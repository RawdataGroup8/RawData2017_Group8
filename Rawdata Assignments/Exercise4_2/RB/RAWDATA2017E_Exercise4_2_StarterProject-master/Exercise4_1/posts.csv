postid,posttypeid,parentid,creationdate,score,title,"replace(body, '""', '&quot;')"
19,1,NULL,"2008-08-01 05:21:22",164,"What is the fastest way to get the value of π?","<p>Solutions are welcome in any language. :-) I'm looking for the fastest way to obtain the value of π, as a personal challenge. More specifically I'm using ways that don't involve using <code>#define</code>d constants like <code>M_PI</code>, or hard-coding the number in.</p>&#xA;&#xA;<p>The program below tests the various ways I know of. The inline assembly version is, in theory, the fastest option, though clearly not portable; I've included it as a baseline to compare the other versions against. In my tests, with built-ins, the <code>4 * atan(1)</code> version is fastest on GCC 4.2, because it auto-folds the <code>atan(1)</code> into a constant. With <code>-fno-builtin</code> specified, the <code>atan2(0, -1)</code> version is fastest.</p>&#xA;&#xA;<p>Here's the main testing program (<code>pitimes.c</code>):</p>&#xA;&#xA;<pre><code>#include &lt;math.h&gt;&#xA;#include &lt;stdio.h&gt;&#xA;#include &lt;time.h&gt;&#xA;&#xA;#define ITERS 10000000&#xA;#define TESTWITH(x) {                                                       \&#xA;    diff = 0.0;                                                             \&#xA;    time1 = clock();                                                        \&#xA;    for (i = 0; i &lt; ITERS; ++i)                                             \&#xA;        diff += (x) - M_PI;                                                 \&#xA;    time2 = clock();                                                        \&#xA;    printf(&quot;%s\t=&gt; %e, time =&gt; %f\n&quot;, #x, diff, diffclock(time2, time1));   \&#xA;}&#xA;&#xA;static inline double&#xA;diffclock(clock_t time1, clock_t time0)&#xA;{&#xA;    return (double) (time1 - time0) / CLOCKS_PER_SEC;&#xA;}&#xA;&#xA;int&#xA;main()&#xA;{&#xA;    int i;&#xA;    clock_t time1, time2;&#xA;    double diff;&#xA;&#xA;    /* Warmup. The atan2 case catches GCC's atan folding (which would&#xA;     * optimise the ``4 * atan(1) - M_PI'' to a no-op), if -fno-builtin&#xA;     * is not used. */&#xA;    TESTWITH(4 * atan(1))&#xA;    TESTWITH(4 * atan2(1, 1))&#xA;&#xA;#if defined(__GNUC__) &amp;&amp; (defined(__i386__) || defined(__amd64__))&#xA;    extern double fldpi();&#xA;    TESTWITH(fldpi())&#xA;#endif&#xA;&#xA;    /* Actual tests start here. */&#xA;    TESTWITH(atan2(0, -1))&#xA;    TESTWITH(acos(-1))&#xA;    TESTWITH(2 * asin(1))&#xA;    TESTWITH(4 * atan2(1, 1))&#xA;    TESTWITH(4 * atan(1))&#xA;&#xA;    return 0;&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>And the inline assembly stuff (<code>fldpi.c</code>), noting that it will only work for x86 and x64 systems:</p>&#xA;&#xA;<pre><code>double&#xA;fldpi()&#xA;{&#xA;    double pi;&#xA;    asm(&quot;fldpi&quot; : &quot;=t&quot; (pi));&#xA;    return pi;&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>And a build script that builds all the configurations I'm testing (<code>build.sh</code>):</p>&#xA;&#xA;<pre><code>#!/bin/sh&#xA;gcc -O3 -Wall -c           -m32 -o fldpi-32.o fldpi.c&#xA;gcc -O3 -Wall -c           -m64 -o fldpi-64.o fldpi.c&#xA;&#xA;gcc -O3 -Wall -ffast-math  -m32 -o pitimes1-32 pitimes.c fldpi-32.o&#xA;gcc -O3 -Wall              -m32 -o pitimes2-32 pitimes.c fldpi-32.o -lm&#xA;gcc -O3 -Wall -fno-builtin -m32 -o pitimes3-32 pitimes.c fldpi-32.o -lm&#xA;gcc -O3 -Wall -ffast-math  -m64 -o pitimes1-64 pitimes.c fldpi-64.o -lm&#xA;gcc -O3 -Wall              -m64 -o pitimes2-64 pitimes.c fldpi-64.o -lm&#xA;gcc -O3 -Wall -fno-builtin -m64 -o pitimes3-64 pitimes.c fldpi-64.o -lm&#xA;</code></pre>&#xA;&#xA;<p>Apart from testing between various compiler flags (I've compared 32-bit against 64-bit too, because the optimisations are different), I've also tried switching the order of the tests around. The <code>atan2(0, -1)</code> version still comes out top every time, though.</p>&#xA;"
709,1,NULL,"2008-08-03 14:53:54",28,".NET Testing Framework Advice","<p>I'm looking to introduce a unit testing framework into the mix at my job.  We're using Visual Studio 2005 (though we may be moving to 2008 within the next 6 months) and work primarily in C#.  If the framework has some kind of IDE integration that would be best, but I'm open to frameworks that don't have integration but are still relatively simple to get set up.  I'm going to get resistance to it one way or another, so if I can make sure what I'm pushing isn't a pain in the neck, that would help my case.</p>&#xA;&#xA;<p>The obvious choice from the research I've done so far points to nUnit, but I'd like to get the impressions of someone who's actually used it before recommending it to my team.</p>&#xA;&#xA;<p>Has anyone out there used nUnit?  If so, are there any pitfalls or limitations of which I should be aware?  Are there other good options out there?  If so, if you've used both nUnit at that, I'd greatly appreciate an idea of the strengths and weaknesses of them.</p>&#xA;"
1053,1,NULL,"2008-08-04 06:21:38",7,"A little diversion into floating point (im)precision, part 1","<p>Most mathematicians agree that:</p>&#xA;&#xA;<blockquote>&#xA;  <p>e<sup>πi</sup> + 1 = 0</p>&#xA;</blockquote>&#xA;&#xA;<p>However, most floating point implementations disagree. How well can we settle this dispute?</p>&#xA;&#xA;<p>I'm keen to hear about different languages and implementations, and various methods to make the result as close to zero as possible. Be creative!</p>&#xA;"
1237,1,NULL,"2008-08-04 13:47:11",25,"Regex: To pull out a sub-string between two tags in a string","<p>I have a file in the following format:</p>&#xA;&#xA;<pre>&#xA;Data Data&#xA;Data&#xA;[Start]&#xA;Data i want&#xA;[End]&#xA;Data&#xA;</pre>&#xA;&#xA;<p>I'd like to grab the <code>Data i want</code> from between the <code>[Start]</code> and <code>[End]</code> tags using a RegEx. Can anyone show me how this might be done?</p>&#xA;"
1669,1,NULL,"2008-08-04 22:46:37",704,"Learning to write a compiler","<p><em>Preferred languages</em>: C/C++, Java, and Ruby.</p>&#xA;&#xA;<p>I am looking for some helpful books/tutorials on how to write your own compiler simply for educational purposes. I am most familiar with C/C++, Java, and Ruby, so I prefer resources that involve one of those three, but any good resource is acceptable.</p>&#xA;"
1711,1,NULL,"2008-08-04 23:50:23",1440,"What is the single most influential book every programmer should read?","<p>If you could go back in time and tell yourself to read a specific book at the beginning of your career as a developer, which book would it be?</p>&#xA;&#xA;<p>I expect this list to be varied and to cover a wide range of things.</p>&#xA;&#xA;<p><strong>To search:</strong> Use the search box in the upper-right corner. To search the answers of the current question, use <code>inquestion:this</code>.  For example:</p>&#xA;&#xA;<pre><code>inquestion:this &quot;Code Complete&quot;&#xA;</code></pre>&#xA;"
1760,1,NULL,"2008-08-05 00:51:49",44,".NET Unit Testing packages?","<p>Getting back into a bit more .NET after a few-years of not using it full-time, and wondering what the good unit testing packages are these days.</p>&#xA;&#xA;<p>I'm familiar with NUnit (a few years ago), and have played briefly around with IronRuby, with the goal of getting something like rspec going, but don't know much beyond that.</p>&#xA;&#xA;<p>I realise I could google for this and call it a day but I believe I'm likely to get a better and more informed response from asking a question here :-)</p>&#xA;&#xA;<p>Suggestions?</p>&#xA;"
3284,1,NULL,"2008-08-06 11:04:34",96,"Why can't I have abstract static methods in C#?","<p>I've been working with <a href=&quot;http://msdn.microsoft.com/en-us/library/aa479030.aspx&quot;>providers</a> a fair bit lately, and I came across an interesting situation where I wanted to have an abstract class that had an abstract static method. I read a few posts on the topic, and it sort of made sense, but is there a nice clear explanation?</p>&#xA;"
4736,1,NULL,"2008-08-07 14:05:24",166,"Learning Regular Expressions","<p>I don't really understand regular expressions.  Can you explain them to me in an easy-to-follow manner?  If there are any online tools or books, could you also link to them?</p>&#xA;"
5323,1,NULL,"2008-08-07 21:14:26",16,"Is there a business reason for striving for pure CSS layout?","<p>It seems like every time I try to create a pure CSS layout it takes me much longer than if I'd use a table or two. Getting three columns to be equal lengths with different amounts of data seems to require particular fancy hacks, especially when dealing with cross-browser issues.</p>&#xA;&#xA;<p>My Question:</p>&#xA;&#xA;<p>Who are these few tables going to hurt? </p>&#xA;&#xA;<p>Tables seem to work particularly well on tabular data &mdash; why are they so reviled in this day and age? Google.com has a table in its source code, so do many other sites (stackoverflow.com does not by the way).</p>&#xA;"
5821,1,NULL,"2008-08-08 11:56:36",104,"SQL Server 2000/5 Escape an Underscore","<p>How do I escape the underscore character?</p>&#xD;&#xA;&#xD;&#xA;<p>I am writing something like the following where clause and want to be able to find actual entries with _d at the end.</p>&#xD;&#xA;&#xD;&#xA;<pre><code>Where Username Like '%_d'<br></code></pre>"
5916,1,NULL,"2008-08-08 13:38:30",17,"How do you feel about code folding?","<p>For those of you in the Visual Studio environment, how do you feel about wrapping any of your code in #regions?  (or if any other IDE has something similar...)</p>&#xA;"
6173,1,NULL,"2008-08-08 17:24:19",9,"Regular expression for parsing links from a webpage?","<P>I'm looking for a .NET regular expression extract all the URLs from a webpage but haven't found one to be comprehensive enough to cover all the different ways you can specify a link. </P>&#xD;&#xA;<P>And a side question:</P>&#xD;&#xA;<P>Is there 'one regex to rule them all'? Or am I better off using a series of less complicated regular expressions and just using mutliple passes against the raw HTML? (Speed vs. Maintainability)</P>"
7244,1,NULL,"2008-08-10 17:14:10",55,"Anyone know a good workaround for the lack of an enum generic constraint?","<p>What I want to do is something like this: I have enums with combined flagged values.</p>&#xA;&#xA;<pre><code>public static class EnumExtension&#xA;{&#xA;    public static bool IsSet&lt;T&gt;( this T input, T matchTo ) &#xA;        where T:enum //the constraint I want that doesn't exist in C#3&#xA;    {    &#xA;    	return (input &amp; matchTo) != 0;&#xA;    }&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>So then I could do:</p>&#xA;&#xA;<pre><code>MyEnum tester = MyEnum.FlagA | MyEnum.FlagB&#xA;&#xA;if( tester.IsSet( MyEnum.FlagA ) )&#xA;    //act on flag a&#xA;</code></pre>&#xA;&#xA;<p>Unfortunately C#'s generic where constraints have no enum restriction, only class and struct. C# doesn't see enums as structs (even though they are value types) so I can't add extension types like this.</p>&#xA;&#xA;<p>Anyone know a workaround?</p>&#xA;"
7284,1,NULL,"2008-08-10 18:41:02",165,"What is Turing Complete?","<p>What does the expression &quot;Turing Complete&quot; mean? </p>&#xA;&#xA;<p>Can you give a simple explanation, without going into too many theoretical details?</p>&#xA;"
9033,1,NULL,"2008-08-12 16:32:25",1478,"Hidden Features of C#?","<p>This came to my mind after I learned the following from <a href=&quot;http://www.stackoverflow.com/questions/8941/generic-type-checking&quot;>this question</a>:</p>&#xA;&#xA;<pre><code>where T : struct&#xA;</code></pre>&#xA;&#xA;<p>We, C# developers, all know the basics of C#. I mean declarations, conditionals, loops, operators, etc.</p>&#xA;&#xA;<p>Some of us even mastered the stuff like <a href=&quot;http://msdn.microsoft.com/en-us/library/512aeb7t.aspx&quot; rel=&quot;nofollow&quot;>Generics</a>, <a href=&quot;http://msdn.microsoft.com/en-us/library/bb397696.aspx&quot; rel=&quot;nofollow&quot;>anonymous types</a>, <a href=&quot;http://msdn.microsoft.com/en-us/library/bb397687.aspx&quot; rel=&quot;nofollow&quot;>lambdas</a>, <a href=&quot;http://msdn.microsoft.com/en-us/library/bb397676.aspx&quot; rel=&quot;nofollow&quot;>LINQ</a>, ...</p>&#xA;&#xA;<p>But what are the most hidden features or tricks of C# that even C# fans, addicts, experts barely know?</p>&#xA;&#xA;<h1>Here are the revealed features so far:</h1>&#xA;&#xA;<p><br /></p>&#xA;&#xA;<h2>Keywords</h2>&#xA;&#xA;<ul>&#xA;<li><a href=&quot;http://msdn.microsoft.com/en-us/library/9k7k7cf0.aspx&quot; rel=&quot;nofollow&quot;><code>yield</code></a> by <a href=&quot;http://stackoverflow.com/questions/9033/hidden-features-of-c/9035#9035&quot;>Michael Stum</a></li>&#xA;<li><code>var</code> by <a href=&quot;http://stackoverflow.com/questions/9033/hidden-features-of-c/9035#9035&quot;>Michael Stum</a></li>&#xA;<li><code>using()</code> statement by <a href=&quot;http://stackoverflow.com/questions/9033/hidden-features-of-c/9036#9036&quot;>kokos</a></li>&#xA;<li><code>readonly</code> by <a href=&quot;http://stackoverflow.com/questions/9033/hidden-features-of-c/9036#9036&quot;>kokos</a></li>&#xA;<li><code>as</code> by <a href=&quot;http://stackoverflow.com/questions/9033/hidden-features-of-c/9041#9041&quot;>Mike Stone</a></li>&#xA;<li><code>as</code> / <code>is</code> by <a href=&quot;http://stackoverflow.com/questions/9033/hidden-features-of-c/9070#9070&quot;>Ed Swangren</a></li>&#xA;<li><code>as</code> / <code>is</code> (improved) by <a href=&quot;http://stackoverflow.com/questions/9033/hidden-features-of-c/9092#9092&quot;>Rocketpants</a></li>&#xA;<li><code>default</code> by <a href=&quot;http://stackoverflow.com/questions/9033/hidden-features-of-c/9639#9639&quot;>deathofrats</a></li>&#xA;<li><code>global::</code> by <a href=&quot;http://stackoverflow.com/questions/9033/hidden-features-of-c/12152#12152&quot;>pzycoman</a></li>&#xA;<li><code>using()</code> blocks by <a href=&quot;http://stackoverflow.com/questions/9033/hidden-features-of-c/12316#12316&quot;>AlexCuse</a></li>&#xA;<li><code>volatile</code> by <a href=&quot;http://stackoverflow.com/questions/9033/hidden-features-of-c/59691#59691&quot;>Jakub Šturc</a></li>&#xA;<li><code>extern alias</code> by <a href=&quot;http://stackoverflow.com/questions/9033/hidden-features-of-c/37926#37926&quot;>Jakub Šturc</a></li>&#xA;</ul>&#xA;&#xA;<h2>Attributes</h2>&#xA;&#xA;<ul>&#xA;<li><a href=&quot;http://msdn.microsoft.com/en-us/library/system.componentmodel.defaultvalueattribute.aspx&quot; rel=&quot;nofollow&quot;><code>DefaultValueAttribute</code></a> by <a href=&quot;http://stackoverflow.com/questions/9033/hidden-features-of-c/9035#9035&quot;>Michael Stum</a></li>&#xA;<li><a href=&quot;http://msdn.microsoft.com/en-us/library/system.obsoleteattribute.aspx&quot; rel=&quot;nofollow&quot;><code>ObsoleteAttribute</code></a> by <a href=&quot;http://stackoverflow.com/questions/9033/hidden-features-of-c/9037#9037&quot;>DannySmurf</a></li>&#xA;<li><a href=&quot;http://msdn.microsoft.com/en-us/library/system.diagnostics.debuggerdisplayattribute.aspx&quot; rel=&quot;nofollow&quot;><code>DebuggerDisplayAttribute</code></a> by <a href=&quot;http://stackoverflow.com/questions/9033/hidden-features-of-c/9048#9048&quot;>Stu</a></li>&#xA;<li><a href=&quot;http://msdn.microsoft.com/en-us/library/system.diagnostics.debuggerbrowsableattribute.aspx&quot; rel=&quot;nofollow&quot;><code>DebuggerBrowsable</code></a> and <a href=&quot;http://msdn.microsoft.com/en-us/library/system.diagnostics.debuggerstepthroughattribute.aspx&quot; rel=&quot;nofollow&quot;><code>DebuggerStepThrough</code></a> by <a href=&quot;http://stackoverflow.com/questions/9033/hidden-features-of-c/33474#33474&quot;>bdukes</a></li>&#xA;<li><a href=&quot;http://msdn.microsoft.com/en-us/library/system.threadstaticattribute%28VS.71%29.aspx&quot; rel=&quot;nofollow&quot;><code>ThreadStaticAttribute</code></a> by <a href=&quot;http://stackoverflow.com/questions/9033/hidden-features-of-c/13932#13932&quot;>marxidad</a></li>&#xA;<li><a href=&quot;http://msdn.microsoft.com/en-us/library/system.flagsattribute.aspx&quot; rel=&quot;nofollow&quot;><code>FlagsAttribute</code></a> by <a href=&quot;http://stackoverflow.com/questions/9033/hidden-features-of-c/21752#21752&quot;>Martin Clarke</a></li>&#xA;<li><a href=&quot;http://msdn.microsoft.com/en-us/library/4xssyw96.aspx&quot; rel=&quot;nofollow&quot;><code>ConditionalAttribute</code></a> by <a href=&quot;http://stackoverflow.com/questions/9033/hidden-features-of-c/35342#35342&quot;>AndrewBurns</a></li>&#xA;</ul>&#xA;&#xA;<h2>Syntax</h2>&#xA;&#xA;<ul>&#xA;<li><a href=&quot;http://msdn.microsoft.com/en-us/library/ms173224.aspx&quot; rel=&quot;nofollow&quot;><code>??</code></a> (coalesce nulls) operator by <a href=&quot;http://stackoverflow.com/questions/9033/hidden-features-of-c/9036#9036&quot;>kokos</a></li>&#xA;<li>Number flaggings by <a href=&quot;http://stackoverflow.com/questions/9033/hidden-features-of-c/9038#9038&quot;>Nick Berardi</a></li>&#xA;<li><code>where T:new</code> by <a href=&quot;http://stackoverflow.com/questions/9033/hidden-features-of-c/9067#9067&quot;>Lars Mæhlum</a></li>&#xA;<li>Implicit generics by <a href=&quot;http://stackoverflow.com/questions/9033/hidden-features-of-c/9099#9099&quot;>Keith</a></li>&#xA;<li>One-parameter lambdas by <a href=&quot;http://stackoverflow.com/questions/9033/hidden-features-of-c/9099#9099&quot;>Keith</a></li>&#xA;<li>Auto properties by <a href=&quot;http://stackoverflow.com/questions/9033/hidden-features-of-c/9099#9099&quot;>Keith</a></li>&#xA;<li>Namespace aliases by <a href=&quot;http://stackoverflow.com/questions/9033/hidden-features-of-c/9099#9099&quot;>Keith</a></li>&#xA;<li>Verbatim string literals with @ by <a href=&quot;http://stackoverflow.com/questions/9033/hidden-features-of-c/9114#9114&quot;>Patrick</a></li>&#xA;<li><code>enum</code> values by <a href=&quot;http://stackoverflow.com/questions/9033/hidden-features-of-c/11738#11738&quot;>lfoust</a></li>&#xA;<li>@variablenames by <a href=&quot;http://stackoverflow.com/questions/9033/hidden-features-of-c/14088#14088&quot;>marxidad</a></li>&#xA;<li><code>event</code> operators by <a href=&quot;http://stackoverflow.com/questions/9033/hidden-features-of-c/14277#14277&quot;>marxidad</a></li>&#xA;<li>Format string brackets by <a href=&quot;http://stackoverflow.com/questions/9033/hidden-features-of-c/15321#15321&quot;>Portman</a></li>&#xA;<li>Property accessor accessibility modifiers by <a href=&quot;http://stackoverflow.com/questions/9033/hidden-features-of-c/15715#15715&quot;>xanadont</a></li>&#xA;<li>Conditional (ternary) operator (<code>?:</code>) by <a href=&quot;http://stackoverflow.com/questions/9033/hidden-features-of-c/16450#16450&quot;>JasonS</a></li>&#xA;<li><code>checked</code> and <code>unchecked</code> operators by <a href=&quot;http://stackoverflow.com/questions/9033/hidden-features-of-c/355991#355991&quot;>Binoj Antony</a></li>&#xA;<li><code>implicit and explicit</code> operators by <a href=&quot;http://stackoverflow.com/questions/9033/hidden-features-of-c/121470#121470&quot;>Flory</a></li>&#xA;</ul>&#xA;&#xA;<h2>Language Features</h2>&#xA;&#xA;<ul>&#xA;<li>Nullable types by <a href=&quot;http://stackoverflow.com/questions/9033/hidden-features-of-c/9055#9055&quot;>Brad Barker</a></li>&#xA;<li>Anonymous types by <a href=&quot;http://stackoverflow.com/questions/9033/hidden-features-of-c/9099#9099&quot;>Keith</a></li>&#xA;<li><code>__makeref __reftype __refvalue</code> by <a href=&quot;http://stackoverflow.com/questions/9033/hidden-features-of-c/9125#9125&quot;>Judah Himango</a></li>&#xA;<li>Object initializers by <a href=&quot;http://stackoverflow.com/questions/9033/hidden-features-of-c/9547#9547&quot;>lomaxx</a></li>&#xA;<li>Format strings by <a href=&quot;http://stackoverflow.com/questions/9033/hidden-features-of-c/10207#10207&quot;>David in Dakota</a></li>&#xA;<li>Extension Methods by <a href=&quot;http://stackoverflow.com/questions/9033/hidden-features-of-c/13932#13932&quot;>marxidad</a></li>&#xA;<li><code>partial</code> methods by <a href=&quot;http://stackoverflow.com/questions/9033/hidden-features-of-c/16395#16395&quot;>Jon Erickson</a></li>&#xA;<li>Preprocessor directives by <a href=&quot;http://stackoverflow.com/questions/9033/hidden-features-of-c/16482#16482&quot;>John Asbeck</a></li>&#xA;<li><code>DEBUG</code> pre-processor directive by <a href=&quot;http://stackoverflow.com/questions/9033/hidden-features-of-c/29081#29081&quot;>Robert Durgin</a></li>&#xA;<li>Operator overloading by <a href=&quot;http://stackoverflow.com/questions/9033/hidden-features-of-c/24914#24914&quot;>SefBkn</a></li>&#xA;<li>Type inferrence by <a href=&quot;http://stackoverflow.com/questions/9033/hidden-features-of-c/28811#28811&quot;>chakrit</a></li>&#xA;<li>Boolean operators <a href=&quot;http://www.java2s.com/Tutorial/CSharp/0160__Operator-Overload/truefalseoperatorforComplex.htm&quot; rel=&quot;nofollow&quot;>taken to next level</a> by <a href=&quot;http://stackoverflow.com/questions/9033/hidden-features-of-c/32148#32148&quot;>Rob Gough</a></li>&#xA;<li>Pass value-type variable as interface without boxing by <a href=&quot;http://stackoverflow.com/questions/9033/hidden-features-of-c/1820538#1820538&quot;>Roman Boiko</a></li>&#xA;<li>Programmatically determine declared variable type by <a href=&quot;http://stackoverflow.com/questions/9033/hidden-features-of-c/1789985#1789985&quot;>Roman Boiko</a></li>&#xA;<li>Static Constructors by <a href=&quot;http://stackoverflow.com/questions/9033/hidden-features-of-c/100321#100321&quot;>Chris</a></li>&#xA;<li>Easier-on-the-eyes / condensed ORM-mapping using LINQ by <a href=&quot;http://stackoverflow.com/questions/9033/hidden-features-of-c/2026781#2026781&quot;>roosteronacid</a></li>&#xA;<li><code>__arglist</code> by <a href=&quot;http://stackoverflow.com/a/1836944/171819&quot;>Zac Bowling</a></li>&#xA;</ul>&#xA;&#xA;<h2>Visual Studio Features</h2>&#xA;&#xA;<ul>&#xA;<li>Select block of text in editor by <a href=&quot;http://stackoverflow.com/questions/9033/hidden-features-of-c/1699477#1699477&quot; title=&quot;block text selecting with alt key&quot;>Himadri</a></li>&#xA;<li>Snippets by <a href=&quot;http://stackoverflow.com/questions/9033/hidden-features-of-c/9037#9037&quot;>DannySmurf</a>  </li>&#xA;</ul>&#xA;&#xA;<h2>Framework</h2>&#xA;&#xA;<ul>&#xA;<li><code>TransactionScope</code> by <a href=&quot;http://stackoverflow.com/questions/9033/hidden-features-of-c/9042#9042&quot;>KiwiBastard</a></li>&#xA;<li><code>DependantTransaction</code> by <a href=&quot;http://stackoverflow.com/questions/9033/hidden-features-of-c/9042#9042&quot;>KiwiBastard</a></li>&#xA;<li><code>Nullable&lt;T&gt;</code> by <a href=&quot;http://stackoverflow.com/questions/9033/hidden-features-of-c/9118#9118&quot;>IainMH</a></li>&#xA;<li><code>Mutex</code> by <a href=&quot;http://stackoverflow.com/questions/9033/hidden-features-of-c/9181#9181&quot;>Diago</a></li>&#xA;<li><code>System.IO.Path</code> by <a href=&quot;http://stackoverflow.com/questions/9033/hidden-features-of-c/9401#9401&quot;>ageektrapped</a></li>&#xA;<li><code>WeakReference</code> by <a href=&quot;http://stackoverflow.com/questions/9033/hidden-features-of-c/14723#14723&quot;>Juan Manuel</a></li>&#xA;</ul>&#xA;&#xA;<h2>Methods and Properties</h2>&#xA;&#xA;<ul>&#xA;<li><code>String.IsNullOrEmpty()</code> method by <a href=&quot;http://stackoverflow.com/questions/9033/hidden-features-of-c/9042#9042&quot;>KiwiBastard</a></li>&#xA;<li><code>List.ForEach()</code> method by <a href=&quot;http://stackoverflow.com/questions/9033/hidden-features-of-c/9042#9042&quot;>KiwiBastard</a></li>&#xA;<li><code>BeginInvoke()</code>, <code>EndInvoke()</code> methods by <a href=&quot;http://stackoverflow.com/questions/9033/hidden-features-of-c/9581#9581&quot;>Will Dean</a></li>&#xA;<li><code>Nullable&lt;T&gt;.HasValue</code> and <code>Nullable&lt;T&gt;.Value</code> properties by <a href=&quot;http://stackoverflow.com/questions/9033/hidden-features-of-c/15393#15393&quot;>Rismo</a></li>&#xA;<li><code>GetValueOrDefault</code> method by <a href=&quot;http://stackoverflow.com/questions/9033/hidden-features-of-c/18158#18158&quot;>John Sheehan</a></li>&#xA;</ul>&#xA;&#xA;<h2>Tips &amp; Tricks</h2>&#xA;&#xA;<ul>&#xA;<li>Nice method for event handlers by <a href=&quot;http://stackoverflow.com/questions/9033/hidden-features-of-c/9282#9282&quot;>Andreas H.R. Nilsson</a></li>&#xA;<li>Uppercase comparisons by <a href=&quot;http://stackoverflow.com/questions/9033/hidden-features-of-c/12137#12137&quot;>John</a></li>&#xA;<li>Access anonymous types without reflection by <a href=&quot;http://stackoverflow.com/questions/9033/hidden-features-of-c/13441#13441&quot;>dp</a></li>&#xA;<li>A quick way to lazily instantiate collection properties by <a href=&quot;http://stackoverflow.com/questions/9033/hidden-features-of-c/58945#58945&quot;>Will</a></li>&#xA;<li>JavaScript-like anonymous inline-functions by <a href=&quot;http://stackoverflow.com/questions/9033/hidden-features-of-c/1399130#1399130&quot;>roosteronacid</a></li>&#xA;</ul>&#xA;&#xA;<h2>Other</h2>&#xA;&#xA;<ul>&#xA;<li>netmodules by <a href=&quot;http://stackoverflow.com/questions/9033/hidden-features-of-c/9036#9036&quot;>kokos</a>  </li>&#xA;<li><a href=&quot;http://www.albahari.com/nutshell/linqbridge.html&quot; rel=&quot;nofollow&quot;>LINQBridge</a> by <a href=&quot;http://stackoverflow.com/questions/9033/hidden-features-of-c/10886#10886&quot;>Duncan Smart</a>  </li>&#xA;<li><a href=&quot;http://msdn.microsoft.com/en-us/concurrency/default.aspx&quot; rel=&quot;nofollow&quot;>Parallel Extensions</a> by <a href=&quot;http://stackoverflow.com/questions/9033/hidden-features-of-c/31293#31293&quot;>Joel Coehoorn</a></li>&#xA;</ul>&#xA;"
9666,1,NULL,"2008-08-13 11:41:29",56,"Is accessing a variable in C# an atomic operation?","<p>I've been raised to believe that if multiple threads can access a variable, then all reads from and writes to that variable must be protected by synchronization code, such as a &quot;lock&quot; statement, because the processor might switch to another thread halfway through a write.</p>&#xA;&#xA;<p>However, I was looking through System.Web.Security.Membership using Reflector and found code like this:</p>&#xA;&#xA;<pre><code>public static class Membership&#xA;{&#xA;    private static bool s_Initialized = false;&#xA;    private static object s_lock = new object();&#xA;    private static MembershipProvider s_Provider;&#xA;&#xA;    public static MembershipProvider Provider&#xA;    {&#xA;        get&#xA;        {&#xA;            Initialize();&#xA;            return s_Provider;&#xA;        }&#xA;    }&#xA;&#xA;    private static void Initialize()&#xA;    {&#xA;        if (s_Initialized)&#xA;            return;&#xA;&#xA;        lock(s_lock)&#xA;        {&#xA;            if (s_Initialized)&#xA;                return;&#xA;&#xA;            // Perform initialization...&#xA;            s_Initialized = true;&#xA;        }&#xA;    }&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>Why is the s_Initialized field read outside of the lock? Couldn't another thread be trying to write to it at the same time? <strong>Are reads and writes of variables atomic?</strong> </p>&#xA;"
11831,1,NULL,"2008-08-15 00:39:01",60,"Singletons: good design or a crutch?","<p>Singletons are a hotly debated design pattern, so I am interested in what the Stack Overflow community thought about them.</p>&#xA;&#xA;<p>Please provide reasons for your opinions, not just &quot;Singletons are for lazy programmers!&quot;</p>&#xA;&#xA;<p>Here is a fairly good article on the issue, although it is against the use of Singletons:&#xA;<a href=&quot;http://scientificninja.com/advice/performant-singletons&quot;>scientificninja.com: performant-singletons</a>.</p>&#xA;&#xA;<p>Does anyone have any other good articles on them? Maybe in support of Singletons?</p>&#xA;"
13470,1,NULL,"2008-08-17 02:01:56",3,"Purpose of {1} in this regular expression to match url protocols","<p>I was reading <a href=&quot;http://stackoverflow.com/questions/6173/regular-expression-for-parsing-links-from-a-webpage&quot; rel=&quot;nofollow&quot; title=&quot;Human Interface Guidelines&quot;>this question</a> about how to parse URLs out of web pages and had a question about the <a href=&quot;http://stackoverflow.com/questions/6173/regular-expression-for-parsing-links-from-a-webpage#6183&quot; rel=&quot;nofollow&quot;>accepted answer</a> which offered this solution:</p>&#xA;&#xA;<pre><code>((mailto\:|(news|(ht|f)tp(s?))\://){1}\S+)&#xA;</code></pre>&#xA;&#xA;<p>The solution was offered by <a href=&quot;http://stackoverflow.com/users/350/csmba&quot; rel=&quot;nofollow&quot;>csmba</a> and he credited it to <a href=&quot;http://regexlib.com/Search.aspx?k=URL&quot; rel=&quot;nofollow&quot;>regexlib.com</a>.  Whew.  Credits done.</p>&#xA;&#xA;<p>I think this is a fairly naive regular expression but it's a fine starting point for building something better.  But, my question is this:</p>&#xA;&#xA;<p>What is the point of &quot;{1}&quot;?  It means &quot;exactly one of the previous grouping&quot;, right?  Isn't that the default behavior of a grouping in a regular expression?  Would the expression be changed in any way if the {1} were removed?</p>&#xA;&#xA;<p>If I saw this from a coworker I would point out his or her error but as I write this the response is rated at a 6 and the expression on regexlib.com is rated a 4 of 5.  So maybe I'm missing something?</p>&#xA;"
15496,1,NULL,"2008-08-19 01:36:03",295,"Hidden Features of Java","<p>After reading <a href=&quot;http://stackoverflow.com/questions/9033/hidden-features-of-c&quot; rel=&quot;nofollow&quot;>Hidden Features of C#</a> I wondered, What are some of the hidden features of Java?</p>&#xA;"
18465,1,NULL,"2008-08-20 18:06:13",12,".Net Parse versus Convert","<p>In .Net you can read a string value into another data type using either .parse or Convert.To. </p>&#xA;&#xA;<p>I'm not familiar with the fundamentals of parse versus convert so I am always at a loss when asked which one is better/faster/more appropriate. </p>&#xA;&#xA;<p>So - which way is best in what type of circumstances?</p>&#xA;"
20529,1,NULL,"2008-08-21 17:01:20",65,"Useful Eclipse features?","<p>I have been using Eclipse as an IDE for a short amount of time (about 3 months of full use) and almost every day I learn about some shortcut or feature that I had absolutely no idea about.  For instance, just today I learned that <kbd>Ctrl</kbd>+<kbd>3</kbd> was the shortcut for a Quick Access window.</p>&#xA;&#xA;<p>I was wondering what your most useful/favorite Eclipse features are.  With the IDE being so big, it would be helpful to learn about the more commonly used parts of the program.</p>&#xA;"
21715,1,NULL,"2008-08-22 03:25:09",43,"List<BusinessObject> or BusinessObjectCollection?","<p>Prior to C# generics, everyone would code collections for their business objects by creating a collection base that implemented IEnumerable</p>&#xA;&#xA;<p>IE:</p>&#xA;&#xA;<pre><code>public class CollectionBase : IEnumerable&#xA;</code></pre>&#xA;&#xA;<p>and then would derive their Business Object collections from that.</p>&#xA;&#xA;<pre><code>public class BusinessObjectCollection : CollectionBase&#xA;</code></pre>&#xA;&#xA;<p>Now with the generic list class, does anyone just use that instead? I've found that I use a compromise of the two techniques:</p>&#xA;&#xA;<pre><code>public class BusinessObjectCollection : List&lt;BusinessObject&gt;&#xA;</code></pre>&#xA;&#xA;<p>I do this because I like to have strongly typed names instead of just passing Lists around.</p>&#xA;&#xA;<p>What is <strong>your</strong> approach?</p>&#xA;"
24853,1,NULL,"2008-08-24 05:19:20",305,"What is the difference between ++i and i++","<p>In C, what is the difference between using <code>++i</code> and <code>i++</code>, and which should be used in the incrementation block of a <code>for</code> loop?</p>&#xA;"
24886,1,NULL,"2008-08-24 06:48:23",220,"Is there a performance difference between i++ and ++i in C?","<p>Is there a performance difference between <code>i++</code> and <code>++i</code> if the resulting value is not used?</p>&#xA;"
24901,1,NULL,"2008-08-24 07:14:22",158,"Is there a performance difference between i++ and ++i in C++?","<p>We looked at this answer for C in this question:</p>&#xA;&#xA;<p><a href=&quot;http://stackoverflow.com/questions/24886/is-there-a-performance-difference-between-i-and-i-in-c&quot; rel=&quot;nofollow&quot;>http://stackoverflow.com/questions/24886/is-there-a-performance-difference-between-i-and-i-in-c</a></p>&#xA;&#xA;<p>What's the answer for C++?</p>&#xA;"
27745,1,NULL,"2008-08-26 11:01:37",54,"Getting parts of a URL (Regex)","<p>Given the URL (single line):<br />&#xA;<a href=&quot;http://test.example.com/dir/subdir/file.html&quot;>http://test.example.com/dir/subdir/file.html</a></p>&#xA;&#xA;<p>How can I extract the following parts using regular expressions:</p>&#xA;&#xA;<ol>&#xA;<li>The Subdomain (test)</li>&#xA;<li>The Domain (example.com)</li>&#xA;<li>The path without the file (/dir/subdir/)</li>&#xA;<li>The file (file.html)</li>&#xA;<li>The path with the file (/dir/subdir/file.html)</li>&#xA;<li>The URL without the path (<a href=&quot;http://test.example.com&quot;>http://test.example.com</a>)</li>&#xA;<li>(add any other that you think would be useful)</li>&#xA;</ol>&#xA;&#xA;<p>The regex should work correctly even if I enter the following URL:<br />&#xA;<a href=&quot;http://example.example.com/example/example/example.html&quot;>http://example.example.com/example/example/example.html</a></p>&#xA;&#xA;<p>Thank you.</p>&#xA;"
29869,1,NULL,"2008-08-27 10:41:45",14,"Regex to match all HTML tags except <p> and </p>","<p>I need to match and remove all tags using a regular expression in Perl.  I have the following:</p>&#xA;&#xA;<pre><code>&lt;\\??(?!p).+?&gt;&#xA;</code></pre>&#xA;&#xA;<p>But this still matches with the closing <code>&lt;/p&gt;</code> tag.  Any hint on how to match with the closing tag as well?</p>&#xA;&#xA;<p>Note, this is being performed on xhtml.</p>&#xA;"
30251,1,NULL,"2008-08-27 14:19:45",88,"Tables instead of DIVs","<blockquote>&#xA;  <p><strong>Possible Duplicate:</strong><br>&#xA;  <a href=&quot;http://stackoverflow.com/questions/83073/why-not-use-tables-for-layout-in-html&quot;>Why not use tables for layout in HTML?</a>  </p>&#xA;</blockquote>&#xA;&#xA;&#xA;&#xA;<p>Under what conditions should you choose tables instead of DIVs in HTML coding?</p>&#xA;"
30373,1,NULL,"2008-08-27 15:03:00",65,"What C++ pitfalls should I avoid?","<p>I remember first learning about vectors in the STL and after some time, I wanted to use a vector of bools for one of my projects. After seeing some strange behavior and doing some research, I learned that <a href=&quot;http://www.informit.com/guides/content.aspx?g=cplusplus&amp;seqNum=98&quot; rel=&quot;nofollow&quot;>a vector of bools is not really a vector of bools</a>.</p>&#xA;&#xA;<p>Are there any other common pitfalls to avoid in C++?</p>&#xA;"
32282,1,NULL,"2008-08-28 13:34:56",85,"How can test I regular expressions using multiple RE engines?","<p>How can I test the same regex against different regular expression engines?</p>&#xA;"
33265,1,NULL,"2008-08-28 20:06:02",85,"What's the false operator in C# good for?","<p>There are two weird operators in C#:</p>&#xA;&#xA;<ul>&#xA;<li>the <a href=&quot;http://msdn.microsoft.com/en-us/library/6x6y6z4d.aspx&quot;>true operator</a></li>&#xA;<li>the <a href=&quot;http://msdn.microsoft.com/en-us/library/6292hy1k.aspx&quot;>false operator</a></li>&#xA;</ul>&#xA;&#xA;<p>If I understand this right these operators can be used in types which I want to use instead of a boolean expression and where I don't want to provide an implicit conversion to bool.</p>&#xA;&#xA;<p>Let's say I have a following class:</p>&#xA;&#xA;<pre><code>    public class MyType&#xA;    {&#xA;        public readonly int Value;&#xA;&#xA;        public MyType(int value)&#xA;        {&#xA;            Value = value;&#xA;        }&#xA;&#xA;        public static bool operator true (MyType mt)&#xA;        {&#xA;            return  mt.Value &gt; 0;&#xA;        }&#xA;&#xA;        public static bool operator false (MyType mt)&#xA;        {&#xA;            return  mt.Value &lt; 0;&#xA;        }&#xA;&#xA;    }&#xA;</code></pre>&#xA;&#xA;<p>So I can write the following code:</p>&#xA;&#xA;<pre><code>    MyType mTrue = new MyType(100);&#xA;    MyType mFalse = new MyType(-100);&#xA;    MyType mDontKnow = new MyType(0);&#xA;&#xA;    if (mTrue)&#xA;    {&#xA;         // Do something.&#xA;    }&#xA;&#xA;    while (mFalse)&#xA;    {&#xA;        // Do something else.&#xA;    }&#xA;&#xA;    do&#xA;    {&#xA;        // Another code comes here.&#xA;    } while (mDontKnow)&#xA;</code></pre>&#xA;&#xA;<p>However for all the examples above only the true operator is executed. So what's the false operator in C# good for?</p>&#xA;&#xA;<p><em>Note: More examples can be found <a href=&quot;http://www.java2s.com/Tutorial/CSharp/0160__Operator-Overload/truefalseoperatorforComplex.htm&quot;>here</a>, <a href=&quot;http://www.java2s.com/Tutorial/CSharp/0160__Operator-Overload/OverloadtrueandfalseforTwoDimension.htm&quot;>here</a> and <a href=&quot;http://www.java2s.com/Tutorial/CSharp/0160__Operator-Overload/trueandfalseoperator.htm&quot;>here</a>.</em></p>&#xA;"
34571,1,NULL,"2008-08-29 16:11:10",904,"How to test a class that has private methods, fields or inner classes","<p>How do I use JUnit to test a class that has internal private methods, fields or nested classes? It seems bad to change the access modifier for a method just to be able to run a test. </p>&#xA;"
35699,1,NULL,"2008-08-30 05:28:40",15,"On a two-column page, how can I grow the left div to the same height of the right div using CSS or Javascript?","<p>I'm trying to make a two-column page using a div-based layout (no tables please!). Problem is, I can't grow the left div to match the height of the right one.  My right div typically has a lot of content.  </p>&#xA;&#xA;<p>Here's a paired down example of my template to illustrate the problem.</p>&#xA;&#xA;<pre><code>&lt;div style=&quot;float:left; width: 150px; border: 1px solid;&quot;&gt;&#xA;  &lt;ul&gt;&#xA;    &lt;li&gt;nav1&lt;/li&gt;&#xA;    &lt;li&gt;nav2&lt;/li&gt;&#xA;    &lt;li&gt;nav3&lt;/li&gt;&#xA;    &lt;li&gt;nav4&lt;/li&gt;&#xA;  &lt;/ul&gt;&#xA;&lt;/div&gt;&#xA;&lt;div style=&quot;float:left; width: 250px&quot;&gt;&#xA;Lorem ipsum dolor sit amet, consectetur adipisicing elit,&#xA;sed do eiusmod tempor incididunt ut labore et dolore magna&#xA;....&#xA;&lt;/div&gt;&#xA;</code></pre>&#xA;&#xA;<p><img src=&quot;http://involution.com/images/divlayout.png&quot; alt=&quot;alt text&quot;></p>&#xA;"
36832,1,NULL,"2008-08-31 12:37:24",12,"Virtual functions in constructors, why do languages differ?","<p>In C++ when a virtual function is called from within a constructor it doesn't behave like a virtual function. I think everyone who encountered for the first time was surprised but on second thought it makes sense, if the derived constructor hasn't yet run the object is <strong>not</strong> yet a <em>derived</em> so how can a derived function be called? The preconditions haven't had the chance to be set up. Example:</p>&#xA;&#xA;<pre><code>class base {&#xA;public:&#xA;    base()&#xA;    {&#xA;        std::cout &lt;&lt; &quot;foo is &quot; &lt;&lt; foo() &lt;&lt; std::endl;&#xA;    }&#xA;    virtual int foo() { return 42; }&#xA;};&#xA;&#xA;class derived : public foo {&#xA;    int* ptr_;&#xA;public:&#xA;    derived(int i) : ptr_(new int(i*i)) { }&#xA;    // The following cannot be called before derived::derived due to how C++ behaves, &#xA;    // if it was possible... Kaboom!&#xA;    virtual int foo()   { return *ptr_; } &#xA;};&#xA;</code></pre>&#xA;&#xA;<p>It's exactly the same for Java and .NET yet they chose to go the other way, was the only reason <em>the principal of least surprise</em>? </p>&#xA;&#xA;<p>Which do you think is the correct choice?</p>&#xA;"
38549,1,NULL,"2008-09-01 22:36:07",1848,"Difference between INNER and OUTER joins","<p>What is the difference between <code>INNER JOIN</code> and <code>OUTER JOIN</code>?</p>&#xA;&#xA;<p>How do <code>LEFT JOIN</code>, <code>RIGHT JOIN</code>, and <code>FULL JOIN</code> fit in?</p>&#xA;"
38820,1,NULL,"2008-09-02 04:34:21",17,"Which class design is better?","<p>Which class design is better and why?</p>&#xA;&#xA;<pre><code>public class User&#xA;{&#xA;    public String UserName;&#xA;    public String Password;&#xA;    public String FirstName;&#xA;    public String LastName;&#xA;}&#xA;&#xA;public class Employee : User&#xA;{&#xA;    public String EmployeeId;&#xA;    public String EmployeeCode;&#xA;    public String DepartmentId;&#xA;}&#xA;&#xA;public class Member : User&#xA;{&#xA;    public String MemberId;&#xA;    public String JoinDate;&#xA;    public String ExpiryDate;&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>OR</p>&#xA;&#xA;<pre><code>public class User&#xA;{&#xA;    public String UserId;&#xA;    public String UserName;&#xA;    public String Password;&#xA;    public String FirstName;&#xA;    public String LastName;&#xA;}&#xA;&#xA;public class Employee&#xA;{&#xA;    public User UserInfo;&#xA;    public String EmployeeId;&#xA;    public String EmployeeCode;&#xA;    public String DepartmentId;&#xA;}&#xA;&#xA;public class Member&#xA;{&#xA;    public User UserInfo;&#xA;    public String MemberId;&#xA;    public String JoinDate;&#xA;    public String ExpiryDate;&#xA;}&#xA;</code></pre>&#xA;"
40764,1,NULL,"2008-09-02 21:49:33",86,"How should I cast in VB.NET?","<p>Are all of these equal?  Under what circumstances should I choose each over the others?</p>&#xA;&#xA;<ul>&#xA;<li><p>var.ToString()</p></li>&#xA;<li><p>CStr(var)</p></li>&#xA;<li><p>CType(var, String)</p></li>&#xA;<li><p>DirectCast(var, String)</p></li>&#xA;</ul>&#xA;&#xA;<p><hr /></p>&#xA;&#xA;<p><em>EDIT: Suggestion from <strong><a href=&quot;http://stackoverflow.com/users/303/notmyself&quot; rel=&quot;nofollow&quot;>NotMyself</a></strong>&hellip;</em></p>&#xA;&#xA;<ul>&#xA;<li>TryCast(var, String)</li>&#xA;</ul>&#xA;"
41925,1,NULL,"2008-09-03 15:22:34",61,"Is there a standard for storing normalized phone numbers in a database?","<p>What is a good data structure for storing phone numbers in database fields?  I'm looking for something that is flexible enough to handle international numbers, and also something that allows the various parts of the number to be queried efficiently.</p>&#xA;&#xA;<p><strong>Edit:</strong> Just to clarify the use case here: I currently store numbers in a single varchar field, and I leave them just as the customer entered them.  Then, when the number is needed by code, I normalize it.  The problem is that if I want to query a few million rows to find matching phone numbers, it involves a function, like</p>&#xA;&#xA;<pre><code>where dbo.f_normalizenum(num1) = dbo.f_normalizenum(num2)&#xA;</code></pre>&#xA;&#xA;<p>which is terribly inefficient.  Also queries that are looking for things like the area code become extremely tricky when it's just a single varchar field.</p>&#xA;&#xA;<p><strong>[Edit]</strong></p>&#xA;&#xA;<p>People have made lots of good suggestions here, thanks! As an update, here is what I'm doing now: I still store numbers exactly as they were entered, in a varchar field, but instead of normalizing things at query time, I have a trigger that does all that work as records are inserted or updated. So I have ints or bigints for any parts that I need to query, and those fields are indexed to make queries run faster.</p>&#xA;"
42519,1,NULL,"2008-09-03 20:34:34",124,"How do you rotate a two dimensional array?","<p>Inspired by <a href=&quot;http://blogs.msdn.com/oldnewthing/archive/2008/09/02/8918130.aspx&quot;>Raymond Chen's post</a>, say you have a 4x4 two dimensional array, write a function that rotates it 90 degrees. Raymond links to a solution in pseudo code, but I'd like to see some real world stuff.</p>&#xA;&#xA;<pre><code>[1][2][3][4]&#xA;[5][6][7][8]&#xA;[9][0][1][2]&#xA;[3][4][5][6]&#xA;</code></pre>&#xA;&#xA;<p>Becomes:</p>&#xA;&#xA;<pre><code>[3][9][5][1]&#xA;[4][0][6][2]&#xA;[5][1][7][3]&#xA;[6][2][8][4]&#xA;</code></pre>&#xA;&#xA;<p><strong>Update</strong>: Nick's answer is the most straightforward, but is there a way to do it better than n^2? What if the matrix was 10000x10000?</p>&#xA;"
43632,1,NULL,"2008-09-04 12:33:27",53,"Can you make just part of a regex case-insensitive?","<p>I've seen lots of examples of making an entire regular expression case-insensitive.  What I'm wondering about is having just part of the expression be case-insensitive.</p>&#xA;&#xA;<p>For example, let's say I have a string like this:</p>&#xA;&#xA;<pre><code>fooFOOfOoFoOBARBARbarbarbAr&#xA;</code></pre>&#xA;&#xA;<p>What if I want to match all occurrences of &quot;foo&quot; regardless of case but I only want to match the upper-case &quot;BAR&quot;s?</p>&#xA;&#xA;<p>The ideal solution would be something that works across regex flavors but I'm interested in hearing language-specific ones as well (Thanks <a href=&quot;http://stackoverflow.com/questions/43632/can-you-make-just-part-of-a-regex-case-insensitive#43636&quot;>Espo</a>)</p>&#xA;&#xA;<p><em><strong>Edit</em></strong></p>&#xA;&#xA;<p>The link Espo provided was very helpful.  There's a good example in there about turning modifiers on and off within the expression.</p>&#xA;&#xA;<p>For my contrived example, I can do something like this:</p>&#xA;&#xA;<pre><code>(?i)foo*(?-i)|BAR&#xA;</code></pre>&#xA;&#xA;<p>which makes the match case-insensitive for just the foo portion of the match.</p>&#xA;&#xA;<p>That seemed to work in most regex implementations except Javascript, Python, and a few others (as Espo mentioned).  </p>&#xA;&#xA;<p>The big ones that I was wondering about (Perl, PHP, .NET) all support inline mode changes.</p>&#xA;"
45604,1,NULL,"2008-09-05 12:01:39",35,"Why doesn't C# support implied generic types on class constructors?","<p>C# doesn't require you to specify a generic type parameter if the compiler can infer it, for instance:</p>&#xA;&#xA;<pre><code>List&lt;int&gt; myInts = new List&lt;int&gt; {0,1,1,&#xA;    2,3,5,8,13,21,34,55,89,144,233,377,&#xA;    610,987,1597,2584,4181,6765};&#xA;&#xA;//this statement is clunky&#xA;List&lt;string&gt; myStrings = myInts.&#xA;    Select&lt;int,string&gt;( i =&gt; i.ToString() ).&#xA;    ToList&lt;string&gt;();&#xA;&#xA;//the type is inferred from the lambda expression&#xA;//the compiler knows that it's taking an int and &#xA;//returning a string&#xA;List&lt;string&gt; myStrings = myInts.&#xA;    Select( i =&gt; i.ToString() ).&#xA;    ToList();&#xA;</code></pre>&#xA;&#xA;<p>This is needed for anonymous types where you don't know what the type parameter would be (in intellisense it shows up as <code>'a</code>) because it's added by the compiler.</p>&#xA;&#xA;<p>Class-level type parameters don't let you do this:</p>&#xA;&#xA;<pre><code>//sample generic class&#xA;public class GenericDemo&lt;T&gt; &#xA;{&#xA;    public GenericDemo ( T value ) &#xA;    {&#xA;        GenericTypedProperty = value;&#xA;    }&#xA;&#xA;    public T GenericTypedProperty {get; set;}&#xA;}&#xA;&#xA;//why can't I do:&#xA;int anIntValue = 4181;&#xA;var item = new GenericDemo( anIntValue ); //type inference fails&#xA;&#xA;//however I can create a wrapper like this:&#xA;public static GenericDemo&lt;T&gt; Create&lt;T&gt; ( T value )&#xA;{&#xA;    return new GenericDemo&lt;T&gt; ( value );&#xA;}&#xA;&#xA;//then this works - type inference on the method compiles&#xA;var item = Create( anIntValue );&#xA;</code></pre>&#xA;&#xA;<p>Why doesn't C# support this class level generic type inference?</p>&#xA;"
47521,1,NULL,"2008-09-06 14:53:45",14,"Using yield to iterate over a datareader might not close the connection?","<p>Here is a sample code to retrieve data from a database using the yield keyword that I found in a few place while googling around :</p>&#xA;&#xA;<pre><code>public IEnumerable&lt;object&gt; ExecuteSelect(string commandText)&#xA;{&#xA;    using (IDbConnection connection = CreateConnection())&#xA;    {&#xA;        using (IDbCommand cmd = CreateCommand(commandText, connection))&#xA;        {&#xA;             connection.Open();&#xA;             using (IDbDataReader reader = cmd.ExecuteReader())&#xA;             {&#xA;                while(reader.Read())&#xA;                {&#xA;                    yield return reader[&quot;SomeField&quot;];&#xA;                }&#xA;             }&#xA;             connection.Close();&#xA;        }&#xA;    }&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>Am I correct in thinking that in this sample code, the connection would not be closed if we do not iterate over the whole datareader ? </p>&#xA;&#xA;<p>Here is an example that would not close the connection, if I understand yield correctly..</p>&#xA;&#xA;<pre><code>foreach(object obj in ExecuteSelect(commandText))&#xA;{&#xA;  break;&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>For a db connection that might not be catastrophic, I suppose the GC would clean it up eventually, but what if instead of a connection it was a more critical resource?</p>&#xA;"
48211,1,NULL,"2008-09-07 06:54:55",48,"Free Python decompiler that is not an online service?","<p>Is there a library or application that can decompile Python 2.4+ bytecode to obtain the source code?</p>&#xA;&#xA;<p>A search revealed:</p>&#xA;&#xA;<ul>&#xA;<li><a href=&quot;http://depython.net&quot;>http://depython.net</a> - an online service that you need to upload a pyc or pyo file to</li>&#xA;<li>the <a href=&quot;http://docs.python.org/lib/module-dis.html&quot;>dis module</a> - allows you to disassemble, but not decompile bytecode</li>&#xA;<li><a href=&quot;http://users.cs.cf.ac.uk/J.P.Giddy/python/decompiler/decompiler.html&quot;>decompile.py</a> - works only for 1.5.2 or  2.0</li>&#xA;<li>decompyle - an decompiling online service that you need to pay for and upload your pyc to</li>&#xA;</ul>&#xA;"
49002,1,NULL,"2008-09-08 01:58:15",689,"Prefer composition over inheritance?","<p>Why prefer composition over inheritance?  What trade-offs are there for each approach?  When should you choose inheritance over composition?</p>&#xA;"
71,2,19,"2008-08-01 13:38:00",43,NULL,"<p>Here's a general description of a technique for calculating pi that I learnt in high school.</p>&#xA;&#xA;<p>I only share this because I think it is simple enough that anyone can remember it, indefinitely, plus it teaches you the concept of &quot;Monte-Carlo&quot; methods -- which are statistical methods of arriving at answers that don't immediately appear to be deducible through random processes.</p>&#xA;&#xA;<p>Draw a square, and inscribe a quadrant (one quarter of a semi-circle) inside that square (a quadrant with radius equal to the side of the square, so it fills as much of the square as possible)</p>&#xA;&#xA;<p>Now throw a dart at the square, and record where it lands -- that is, choose a random point anywhere inside the square. Of course, it landed inside the square, but is it inside the semi-circle? Record this fact.</p>&#xA;&#xA;<p>Repeat this process many times -- and you will find there is a ratio of the number of points inside the semi-circle versus the total number thrown, call this ratio x.</p>&#xA;&#xA;<p>Since the area of the square is r times r, you can deduce that the area of the semi circle is x times r times r (that is, x times r squared). Hence x times 4 will give you pi. </p>&#xA;&#xA;<p>This is not a quick method to use. But it's a nice example of a Monte Carlo method. And if you look around, you may find that many problems otherwise outside your computational skills can be solved by such methods.</p>&#xA;"
531,2,19,"2008-08-02 18:22:53",110,NULL,"<p>The <a href=&quot;http://en.wikipedia.org/wiki/Monte_Carlo_method&quot;>Monte Carlo method</a>, as mentioned, applies some great concepts but it is, clearly, not the fastest --not by a long shot, not by any reasonable usefulness. Also, it all depends on what kind of accuracy you are looking for. The fastest pi I know of is the digits hard coded. Looking at <a href=&quot;http://functions.wolfram.com/Constants/Pi/&quot;>Pi</a> and <a href=&quot;http://functions.wolfram.com/PDF/Pi.pdf&quot;>Pi[PDF]</a>, there are a lot of formulas.</p>&#xA;&#xA;<p>Here is a method that converges quickly (~14digits per iteration). The current fastest application, <a href=&quot;http://numbers.computation.free.fr/Constants/PiProgram/pifast.html&quot;>PiFast</a>, uses this formula with the <a href=&quot;http://www.ele.uri.edu/~hansenj/projects/ele436/fft.pdf&quot;>FFT</a>. I'll just write the formula, since the code is straight forward. This formula was almost found by <a href=&quot;http://numbers.computation.free.fr/Constants/Pi/piramanujan.html&quot;>Ramanujan and discovered by Chudnovsky</a>. It is actually how he calculated several billion digits of the number --so it isn't a method to disregard. The formula will overflow quickly since we are dividing factorials, it would be advantageous then to delay such calculating to remove terms.</p>&#xA;&#xA;<p><img src=&quot;http://i.stack.imgur.com/aQMkk.gif&quot; alt=&quot;enter image description here&quot;></p>&#xA;&#xA;<p><img src=&quot;http://i.stack.imgur.com/2y2l9.gif&quot; alt=&quot;enter image description here&quot;></p>&#xA;&#xA;<p>where,</p>&#xA;&#xA;<p><img src=&quot;http://i.stack.imgur.com/QqVnB.gif&quot; alt=&quot;enter image description here&quot;></p>&#xA;&#xA;<p>Below is the <a href=&quot;http://mathworld.wolfram.com/Brent-SalaminFormula.html&quot;>Brent–Salamin algorithm</a>. Wikipedia mentions that when a and b are 'close enough' then (a+b)^2/4t will be an approximation of pi. I'm not sure what 'close enough' means, but from my tests, one iteration got 2digits, two got 7, and three had 15, of course this is with doubles, so it might have error based on it's representation and the 'true' calculation could be more accurate.</p>&#xA;&#xA;<pre><code>let pi_2 iters =&#xA;    let rec loop_ a b t p i =&#xA;        if i = 0 then a,b,t,p&#xA;        else&#xA;            let a_n = (a +. b) /. 2.0 &#xA;            and b_n = sqrt (a*.b)&#xA;            and p_n = 2.0 *. p in&#xA;            let t_n = t -. (p *. (a -. a_n) *. (a -. a_n)) in&#xA;            loop_ a_n b_n t_n p_n (i - 1)&#xA;    in &#xA;    let a,b,t,p = loop_ (1.0) (1.0 /. (sqrt 2.0)) (1.0/.4.0) (1.0) iters in&#xA;    (a +. b) *. (a +. b) /. (4.0 *. t)&#xA;</code></pre>&#xA;&#xA;<p>Lastly, how about some pi golf (800 digits)? 160 characters!</p>&#xA;&#xA;<pre><code>int a=10000,b,c=2800,d,e,f[2801],g;main(){for(;b-c;)f[b++]=a/5;for(;d=0,g=c*2;c-=14,printf(&quot;%.4d&quot;,e+d/a),e=d%a)for(b=c;d+=f[b]*a,f[b]=d%--g,d/=g--,--b;d*=b);}&#xA;</code></pre>&#xA;"
4089,2,19,"2008-08-06 22:54:13",5,NULL,"<p>If by fastest you mean fastest to type in the code, here's the <a href=&quot;http://www.golfscript.com/golfscript/examples.html&quot;>golfscript</a> solution:</p>&#xD;&#xA;&#xD;&#xA;<pre><code>;''6666,-2%{2+.2/@*\/10.3??2*+}*`1000&lt;~\;<br></code></pre>"
25197,2,19,"2008-08-24 17:14:08",19,NULL,"<p>There's actually a whole book dedicated (amongst other things) to <em>fast</em> methods for the computation of \pi: 'Pi and the AGM', by Jonathan and Peter Borwein (<a href=&quot;http://rads.stackoverflow.com/amzn/click/047131515X&quot;>available on Amazon</a>).</p>&#xA;&#xA;<p>I studied the AGM and related algorithms quite a bit: it's quite interesting (though sometimes non-trivial).</p>&#xA;&#xA;<p>Note that to implement most modern algorithms to compute \pi, you will need a multiprecision arithmetic library (<a href=&quot;http://gmplib.org/&quot;>GMP</a> is quite a good choice, though it's been a while since I last used it).</p>&#xA;&#xA;<p>The time-complexity of the best algorithms is in O(M(n)log(n)), where M(n) is the time-complexity for the multiplication of two n-bit integers (M(n)=O(n log(n) log(log(n))) using FFT-based algorithms, which are usually needed when computing digits of \pi, and such an algorithm is implemented in GMP).</p>&#xA;&#xA;<p>Note that even though the mathematics behind the algorithms might not be trivial, the algorithms themselves are usually a few lines of pseudo-code, and their implementation is usually very straightforward (if you chose not to write your own multiprecision arithmetic :-) ). </p>&#xA;"
34239,2,19,"2008-08-29 09:22:17",12,NULL,"<p>The <a href=&quot;http://en.wikipedia.org/wiki/Bailey-Borwein-Plouffe_formula&quot;>BBP formula</a> allows you to compute the nth digit - in base 2 (or 16) - without having to even bother with the previous n-1 digits first :)</p>&#xA;"
39512,2,19,"2008-09-02 13:28:52",53,NULL,"<p>I really like this program, which approximates pi by looking at its own area :-)</p>&#xA;&#xA;<p>IOCCC 1988 : <a href=&quot;http://www0.us.ioccc.org/1988/westley.c&quot; rel=&quot;nofollow&quot;>westley.c</a> </p>&#xA;"
79104,2,19,"2008-09-17 01:53:55",10,NULL,"<p>Pick a better algorithm.<br />&#xA;<a href=&quot;http://en.wikipedia.org/wiki/Gauss%E2%80%93Legendre_algorithm&quot;>This one</a> is more work, but converges fast.</p>&#xA;"
85798,2,19,"2008-09-17 17:49:15",5,NULL,"<h2>Calculate PI at compile-time with D.</h2>&#xA;&#xA;<p>( Copied from <a href=&quot;http://www.dsource.org/projects/ddl/browser/trunk/meta/demo/calcpi.d&quot; rel=&quot;nofollow&quot;>DSource.org</a> )</p>&#xA;&#xA;<pre class=&quot;lang-d prettyprint-override&quot;><code>/** Calculate pi at compile time&#xA; *&#xA; * Compile with dmd -c pi.d&#xA; */&#xA;module calcpi;&#xA;&#xA;import meta.math;&#xA;import meta.conv;&#xA;&#xA;/** real evaluateSeries!(real x, real metafunction!(real y, int n) term)&#xA; *&#xA; * Evaluate a power series at compile time.&#xA; *&#xA; * Given a metafunction of the form&#xA; *  real term!(real y, int n),&#xA; * which gives the nth term of a convergent series at the point y&#xA; * (where the first term is n==1), and a real number x,&#xA; * this metafunction calculates the infinite sum at the point x&#xA; * by adding terms until the sum doesn't change any more.&#xA; */&#xA;template evaluateSeries(real x, alias term, int n=1, real sumsofar=0.0)&#xA;{&#xA;  static if (n&gt;1 &amp;&amp; sumsofar == sumsofar + term!(x, n+1)) {&#xA;     const real evaluateSeries = sumsofar;&#xA;  } else {&#xA;     const real evaluateSeries = evaluateSeries!(x, term, n+1, sumsofar + term!(x, n));&#xA;  }&#xA;}&#xA;&#xA;/*** Calculate atan(x) at compile time.&#xA; *&#xA; * Uses the Maclaurin formula&#xA; *  atan(z) = z - z^3/3 + Z^5/5 - Z^7/7 + ...&#xA; */&#xA;template atan(real z)&#xA;{&#xA;    const real atan = evaluateSeries!(z, atanTerm);&#xA;}&#xA;&#xA;template atanTerm(real x, int n)&#xA;{&#xA;    const real atanTerm =  (n &amp; 1 ? 1 : -1) * pow!(x, 2*n-1)/(2*n-1);&#xA;}&#xA;&#xA;/// Machin's formula for pi&#xA;/// pi/4 = 4 atan(1/5) - atan(1/239).&#xA;pragma(msg, &quot;PI = &quot; ~ fcvt!(4.0 * (4*atan!(1/5.0) - atan!(1/239.0))) );&#xA;</code></pre>&#xA;"
164687,2,19,"2008-10-02 21:27:55",8,NULL,"<p>This is a &quot;classic&quot; method, very easy to implement.&#xA;This implementation, in python (not so fast language) does it:</p>&#xA;&#xA;<pre><code>from math import pi&#xA;from time import time&#xA;&#xA;&#xA;precision = 10**6 # higher value -&gt; higher precision&#xA;                  # lower  value -&gt; higher speed&#xA;&#xA;t = time()&#xA;&#xA;calc = 0&#xA;for k in xrange(0, precision):&#xA;    calc += ((-1)**k) / (2*k+1.)&#xA;calc *= 4. # this is just a little optimization&#xA;&#xA;t = time()-t&#xA;&#xA;print &quot;Calculated: %.40f&quot; % calc&#xA;print &quot;Costant pi: %.40f&quot; % pi&#xA;print &quot;Difference: %.40f&quot; % abs(calc-pi)&#xA;print &quot;Time elapsed: %s&quot; % repr(t)&#xA;</code></pre>&#xA;&#xA;<p>You can find more information <a href=&quot;http://functions.wolfram.com/Constants/Pi/02/&quot;>here</a>.</p>&#xA;&#xA;<p>Anyway the fastest way to get a precise as-much-as-you-want value of pi in python is:</p>&#xA;&#xA;<pre><code>from gmpy import pi&#xA;print pi(3000) # the rule is the same as &#xA;               # the precision on the previous code&#xA;</code></pre>&#xA;&#xA;<p>here is the piece of source for the gmpy pi method, I don't think the code is as much useful as the comment in this case:</p>&#xA;&#xA;<pre><code>static char doc_pi[]=&quot;\&#xA;pi(n): returns pi with n bits of precision in an mpf object\n\&#xA;&quot;;&#xA;&#xA;/* This function was originally from netlib, package bmp, by&#xA; * Richard P. Brent. Paulo Cesar Pereira de Andrade converted&#xA; * it to C and used it in his LISP interpreter.&#xA; *&#xA; * Original comments:&#xA; * &#xA; *   sets mp pi = 3.14159... to the available precision.&#xA; *   uses the gauss-legendre algorithm.&#xA; *   this method requires time o(ln(t)m(t)), so it is slower&#xA; *   than mppi if m(t) = o(t**2), but would be faster for&#xA; *   large t if a faster multiplication algorithm were used&#xA; *   (see comments in mpmul).&#xA; *   for a description of the method, see - multiple-precision&#xA; *   zero-finding and the complexity of elementary function&#xA; *   evaluation (by r. p. brent), in analytic computational&#xA; *   complexity (edited by j. f. traub), academic press, 1976, 151-176.&#xA; *   rounding options not implemented, no guard digits used.&#xA;*/&#xA;static PyObject *&#xA;Pygmpy_pi(PyObject *self, PyObject *args)&#xA;{&#xA;    PympfObject *pi;&#xA;    int precision;&#xA;    mpf_t r_i2, r_i3, r_i4;&#xA;    mpf_t ix;&#xA;&#xA;    ONE_ARG(&quot;pi&quot;, &quot;i&quot;, &amp;precision);&#xA;    if(!(pi = Pympf_new(precision))) {&#xA;        return NULL;&#xA;    }&#xA;&#xA;    mpf_set_si(pi-&gt;f, 1);&#xA;&#xA;    mpf_init(ix);&#xA;    mpf_set_ui(ix, 1);&#xA;&#xA;    mpf_init2(r_i2, precision);&#xA;&#xA;    mpf_init2(r_i3, precision);&#xA;    mpf_set_d(r_i3, 0.25);&#xA;&#xA;    mpf_init2(r_i4, precision);&#xA;    mpf_set_d(r_i4, 0.5);&#xA;    mpf_sqrt(r_i4, r_i4);&#xA;&#xA;    for (;;) {&#xA;        mpf_set(r_i2, pi-&gt;f);&#xA;        mpf_add(pi-&gt;f, pi-&gt;f, r_i4);&#xA;        mpf_div_ui(pi-&gt;f, pi-&gt;f, 2);&#xA;        mpf_mul(r_i4, r_i2, r_i4);&#xA;        mpf_sub(r_i2, pi-&gt;f, r_i2);&#xA;        mpf_mul(r_i2, r_i2, r_i2);&#xA;        mpf_mul(r_i2, r_i2, ix);&#xA;        mpf_sub(r_i3, r_i3, r_i2);&#xA;        mpf_sqrt(r_i4, r_i4);&#xA;        mpf_mul_ui(ix, ix, 2);&#xA;        /* Check for convergence */&#xA;        if (!(mpf_cmp_si(r_i2, 0) &amp;&amp; &#xA;              mpf_get_prec(r_i2) &gt;= (unsigned)precision)) {&#xA;            mpf_mul(pi-&gt;f, pi-&gt;f, r_i4);&#xA;            mpf_div(pi-&gt;f, pi-&gt;f, r_i3);&#xA;            break;&#xA;        }&#xA;    }&#xA;&#xA;    mpf_clear(ix);&#xA;    mpf_clear(r_i2);&#xA;    mpf_clear(r_i3);&#xA;    mpf_clear(r_i4);&#xA;&#xA;    return (PyObject*)pi;&#xA;}&#xA;</code></pre>&#xA;&#xA;<p><hr /></p>&#xA;&#xA;<p><strong>EDIT:</strong> I had some problem with cut and paste and identation, anyway you can find the source <a href=&quot;http://code.google.com/p/gmpy/source/browse/branches/aleax-sandbox/src/gmpy.c&quot;>here</a>.</p>&#xA;"
436447,2,19,"2009-01-12 18:24:48",6,NULL,"<p>This version (in Delphi) is nothing special, but it is at least faster than <a href=&quot;http://blogs.codegear.com/nickhodges/2009/01/09/39174&quot;>the version Nick Hodge posted on his blog</a> :).  On my machine, it takes about 16 seconds to do a billion iterations, giving a value of <strong>3.14159265</strong>25879 (the accurate part is in bold).</p>&#xA;&#xA;<pre><code>program calcpi;&#xA;&#xA;{$APPTYPE CONSOLE}&#xA;&#xA;uses&#xA;  SysUtils;&#xA;&#xA;var&#xA;  start, finish: TDateTime;&#xA;&#xA;function CalculatePi(iterations: integer): double;&#xA;var&#xA;  numerator, denominator, i: integer;&#xA;  sum: double;&#xA;begin&#xA;  {&#xA;  PI may be approximated with this formula:&#xA;  4 * (1 - 1/3 + 1/5 - 1/7 + 1/9 - 1/11 .......)&#xA;  //}&#xA;  numerator := 1;&#xA;  denominator := 1;&#xA;  sum := 0;&#xA;  for i := 1 to iterations do begin&#xA;    sum := sum + (numerator/denominator);&#xA;    denominator := denominator + 2;&#xA;    numerator := -numerator;&#xA;  end;&#xA;  Result := 4 * sum;&#xA;end;&#xA;&#xA;begin&#xA;  try&#xA;    start := Now;&#xA;    WriteLn(FloatToStr(CalculatePi(StrToInt(ParamStr(1)))));&#xA;    finish := Now;&#xA;    WriteLn('Seconds:' + FormatDateTime('hh:mm:ss.zz',finish-start));&#xA;  except&#xA;    on E:Exception do&#xA;      Writeln(E.Classname, ': ', E.Message);&#xA;  end;&#xA;end.&#xA;</code></pre>&#xA;"
436531,2,19,"2009-01-12 18:46:22",9,NULL,"<p>Just came across this one that should be here for completeness: </p>&#xA;&#xA;<p><a href=&quot;http://www.dangermouse.net/esoteric/piet/piet_pi.png&quot;>calculate PI in Piet</a></p>&#xA;&#xA;<p>It has the rather nice property that the precision can be improved making the program bigger. </p>&#xA;&#xA;<p><a href=&quot;http://www.dangermouse.net/esoteric/piet.html&quot;>Here</a>'s some insight into the language itself</p>&#xA;"
571276,2,19,"2009-02-20 21:21:21",5,NULL,"<p>Back in the old days, with small word sizes and slow or non-existent floating-point operations, we used to do stuff like this:</p>&#xA;&#xA;<pre><code>/* Return approximation of n * PI; n is integer */&#xA;#define pi_times(n) (((n) * 22) / 7)&#xA;</code></pre>&#xA;&#xA;<p>For applications that don't require a lot of precision (video games, for example), this is very fast and is accurate enough.</p>&#xA;"
1230060,2,19,"2009-08-04 21:39:14",4,NULL,"<p>Brent's method posted above by Chris is very good; Brent generally is a giant in the field of arbitrary-precision arithmetic.</p>&#xA;&#xA;<p>If all you want is the Nth digit, the famous &#xA;<a href=&quot;http://en.literateprograms.org/Pi_with_the_BBP_formula_(Python)&quot;>BBP formula</a>&#xA;is useful in hex</p>&#xA;"
1439914,2,19,"2009-09-17 16:30:45",5,NULL,"<p>If you are willing to use an approximation, <code>355 / 113</code> is good for 6 decimal digits, and has the added advantage of being usable with integer expressions. That's not as important these days, as &quot;floating point math co-processor&quot; ceased to have any meaning, but it was quite important once.</p>&#xA;"
1947163,2,19,"2009-12-22 15:40:04",26,NULL,"<p>In the interests of completeness, a C++ template version, which in an optimised build will compute PI at compile time and will inline to a single value.</p>&#xA;&#xA;<pre><code>#include &lt;iostream&gt;&#xA;&#xA;template&lt;int I&gt;&#xA;struct sign&#xA;{&#xA;    enum {value = (I % 2) == 0 ? 1 : -1};&#xA;};&#xA;&#xA;template&lt;int I, int J&gt;&#xA;struct pi_calc&#xA;{&#xA;    inline static double value ()&#xA;    {&#xA;        return (pi_calc&lt;I-1, J&gt;::value () + pi_calc&lt;I-1, J+1&gt;::value ()) / 2.0;&#xA;    }&#xA;};&#xA;&#xA;template&lt;int J&gt;&#xA;struct pi_calc&lt;0, J&gt;&#xA;{&#xA;    inline static double value ()&#xA;    {&#xA;        return (sign&lt;J&gt;::value * 4.0) / (2.0 * J + 1.0) + pi_calc&lt;0, J-1&gt;::value ();&#xA;    }&#xA;};&#xA;&#xA;&#xA;template&lt;&gt;&#xA;struct pi_calc&lt;0, 0&gt;&#xA;{&#xA;    inline static double value ()&#xA;    {&#xA;        return 4.0;&#xA;    }&#xA;};&#xA;&#xA;template&lt;int I&gt;&#xA;struct pi&#xA;{&#xA;    inline static double value ()&#xA;    {&#xA;        return pi_calc&lt;I, I&gt;::value ();&#xA;    }&#xA;};&#xA;&#xA;int main ()&#xA;{&#xA;    std::cout.precision (12);&#xA;&#xA;    const double pi_value = pi&lt;10&gt;::value ();&#xA;&#xA;    std::cout &lt;&lt; &quot;pi ~ &quot; &lt;&lt; pi_value &lt;&lt; std::endl;&#xA;&#xA;    return 0;&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>Note for I > 10, optimised builds can be slow, as can non-optimised runs. I think for 12 iterations there are around 80k calls to value() (without memoization).</p>&#xA;"
1949194,2,19,"2009-12-22 21:13:50",4,NULL,"<p>If you want to <em>compute</em> an approximation of the value of π (for some reason), you should try a binary extraction algorithm. <a href=&quot;http://en.wikipedia.org/wiki/Bellard%27s_formula&quot; rel=&quot;nofollow&quot;>Bellard's</a> improvement of BBP gives does PI in O(N^2). </p>&#xA;&#xA;<p><hr></p>&#xA;&#xA;<p>If you want to <em>obtain</em> an approximation of the value of π to do calculations, then: </p>&#xA;&#xA;<pre><code>PI = 3.141592654&#xA;</code></pre>&#xA;&#xA;<p>Granted, that's only an approximation, and not entirely accurate. It's off by a little more than 0.00000000004102. (four ten-trillionths, about <sup>4</sup>/<sub>10,000,000,000</sub>).</p>&#xA;&#xA;<p><hr></p>&#xA;&#xA;<p>If you want to do <em>math</em> with π, then get yourself a pencil and paper or a computer algebra package, and use π's exact value, π. </p>&#xA;&#xA;<p>If you really want a formula, this one is fun: </p>&#xA;&#xA;<h2>π = -<em>i</em> ln(-1) </h2>&#xA;"
2012922,2,19,"2010-01-06 12:41:04",9,NULL,"<p>If <a href=&quot;http://www.theregister.co.uk/2010/01/06/very_long_pi/&quot;>this article</a> is true, then the <a href=&quot;http://en.wikipedia.org/wiki/Bellard%27s_formula&quot;>algorithm that Bellard</a> has created could be one of the speediest available. He has created pi to 2.7 TRILLION digits using a DESKTOP PC!</p>&#xA;&#xA;<p>...and he has published his <a href=&quot;http://bellard.org/pi/pi2700e9/pipcrecord.pdf&quot;>work here</a></p>&#xA;&#xA;<p>Good work Bellard, You are a pioneer!</p>&#xA;&#xA;<p><a href=&quot;http://www.theregister.co.uk/2010/01/06/very_long_pi/&quot;>http://www.theregister.co.uk/2010/01/06/very_long_pi/</a></p>&#xA;"
2350024,2,19,"2010-02-28 03:52:32",6,NULL,"<p>With doubles:</p>&#xA;&#xA;<pre><code>4.0 * (4.0 * Math.Atan(0.2) - Math.Atan(1.0 / 239.0))&#xA;</code></pre>&#xA;&#xA;<p>This will be accurate up to 14 decimal places, enough to fill a double (the inaccuracy is probably because the rest of the decimals in the arc tangents are truncated).</p>&#xA;&#xA;<p>Also Seth, it's 3.14159265358979323846<b>3</b>, not 64.</p>&#xA;"
4905303,2,19,"2011-02-05 05:26:06",6,NULL,"<p>Use the Machin-like formula </p>&#xA;&#xA;<pre><code>176 * arctan (1/57) + 28 * arctan (1/239) - 48 * arctan (1/682) + 96 * arctan(1/12943) &#xA;&#xA;[; \left( 176 \arctan \frac{1}{57} + 28 \arctan \frac{1}{239} - 48 \arctan \frac{1}{682} + 96 \arctan \frac{1}{12943}\right) ;], for you TeX the World people.&#xA;</code></pre>&#xA;&#xA;<p>Implemented in Scheme, for instance: </p>&#xA;&#xA;<p><code>(+ (- (+ (* 176 (atan (/ 1 57))) (* 28 (atan (/ 1 239)))) (* 48 (atan (/ 1 682)))) (* 96 (atan (/ 1 12943))))</code></p>&#xA;"
7924123,2,19,"2011-10-28 01:02:10",16,NULL,"<p>The following answers <strong>precisely how to do this in the fastest possible way -- with the least computing effort</strong>.  Even if you don't like the answer, you have to admit that it is indeed the fastest way to <strong>get</strong> the value of PI.</p>&#xA;&#xA;<p>The <strong>FASTEST way</strong> to get the value of Pi is:</p>&#xA;&#xA;<ol>&#xA;<li>chose your favorite programming language</li>&#xA;<li>load it's Math library</li>&#xA;<li>and find that Pi is already defined there!! ready to use it..</li>&#xA;</ol>&#xA;&#xA;<p>in case you don't have a Math library at hand..</p>&#xA;&#xA;<p>the <strong>SECOND FASTEST</strong> way (more universal solution) is:</p>&#xA;&#xA;<p>look up Pi on the Internet, e.g. here:</p>&#xA;&#xA;<p><a href=&quot;http://www.eveandersson.com/pi/digits/1000000&quot;>http://www.eveandersson.com/pi/digits/1000000</a> (1 million digits .. what's your floating point precision? )</p>&#xA;&#xA;<p>or here:</p>&#xA;&#xA;<p><a href=&quot;http://3.141592653589793238462643383279502884197169399375105820974944592.com/&quot;>http://3.141592653589793238462643383279502884197169399375105820974944592.com/</a> </p>&#xA;&#xA;<p>or here:</p>&#xA;&#xA;<p><a href=&quot;http://en.wikipedia.org/wiki/Pi&quot;>http://en.wikipedia.org/wiki/Pi</a></p>&#xA;&#xA;<p>It's really fast to find the digits you need for whatever precision arithmetic you would like to use, and by defining a constant, you can make sure that you don't waste precious CPU time.</p>&#xA;&#xA;<p>Not only is this a partly humorous answer, but in reality, if anybody would go ahead and compute the value of Pi in a real application .. that would be a pretty big waste of CPU time, wouldn't it?  At least I don't see a real application for trying to re-compute this.</p>&#xA;&#xA;<p>Dear Moderator: please note that the OP asked: <strong>&quot;Fastest Way</strong> to get the value of PI&quot;</p>&#xA;"
27229415,2,19,"2014-12-01 13:22:46",-1,NULL,"<p>When you finally find the fastest way, you may compare it's execution time with programs in other languages on <a href=&quot;http://spoj.com/CONSTANT&quot; rel=&quot;nofollow&quot;>http://spoj.com/CONSTANT</a>.</p>&#xA;&#xA;<p>You can see there that for now Haskell is the best language for this job.</p>&#xA;"
712,2,709,"2008-08-03 14:57:45",14,NULL,"<p>Scott Hanselman had a good Podcast about this, entitled:</p>&#xA;&#xA;<blockquote>&#xA;  <p>&quot;The Past, Present and Future of .NET Unit Testing Frameworks&quot;</p>&#xA;</blockquote>&#xA;&#xA;<p>:</p>&#xA;&#xA;<p><a href=&quot;http://www.hanselminutes.com/default.aspx?showID=130&quot; rel=&quot;nofollow&quot;>Hanselminutes #112</a></p>&#xA;"
713,2,709,"2008-08-03 14:59:21",32,NULL,"<p>I think <code>NUnit</code> <strong>is</strong> your best bet. With <code>TestDriven.NET</code>, you get great integration within <code>VS.NET</code>. (Resharper also has a unit test runner if you're using it).  <code>NUnit</code> it simple to use and follows an established paradigm. You'll also find plenty of projects/tutorials/guides using it which always helps.</p>&#xA;&#xA;<p>Your other main choice is probably MBUnit, which is more and more position itself as the <code>BDD</code> framework of choice (in conjunction with Gallio <a href=&quot;http://www.gallio.org&quot; rel=&quot;nofollow&quot;>http://www.gallio.org</a>).</p>&#xA;"
718,2,709,"2008-08-03 15:07:20",5,NULL,"<p><code>Visual Studio 2008</code> has a built in test project type that works in a similar way to NUnit, but obviously has much tighter integration with <code>Visual Studio</code> (can run on every build and shows the results in a similar way to the conversion results page when upgrading solution files), but it is obviously not as mature as NUnit as it's pretty new and I'm not sure about how it handles mocking.</p>&#xA;&#xA;<p>But it would be worth looking into when your team moves to <code>VS2008</code></p>&#xA;"
798,2,709,"2008-08-03 19:36:48",3,NULL,"<p><code>mbUnit</code> is worth alook, it has a set of features comparable to <code>NUnit</code>, it has its own GUI, or can be integrated into <code>VS</code> if you have <code>Resharper</code>. I would also recommend <code>Rhino Mocks</code> if you are doing any sort of <code>TDD</code>.</p>&#xA;"
4290,2,709,"2008-08-07 01:55:51",2,NULL,"<p>I would say mbUnit also, I like being able to run a single test many times just by specifying inputs and result right above the test function.  Horrible description of what I mean so <a href=&quot;http://www.hanselman.com/blog/MbUnitUnitTestingOnCrack.aspx&quot; rel=&quot;nofollow&quot;>here is a link that shows you what I mean.</a></p>"
71134,2,709,"2008-09-16 10:46:09",4,NULL,"<p>When I started unit testing I started with <code>NUnit</code> as it is simple to set up and use, currently I am using the built in test runner that comes with <code>Resharper</code>, that way I can easily flip between code and test results.&#xA;Incidently <code>NUnit</code> detects when you have compiled your code so you do not need to do any refresh in <code>NUnit</code>. <code>Resharper</code> automatically does a build when you choose to run a specific test.</p>&#xA;"
71142,2,709,"2008-09-16 10:48:30",7,NULL,"<p>The built in unit testing in <code>VS 2008</code> is alright, but its difficult to integrate with <code>CruiseControl.net</code>, certainly a lot harder than normal <code>NUnit</code>. </p>&#xA;&#xA;<p>So go with <code>NUnit</code> if you plan to have nice automated tests.</p>&#xA;"
763178,2,709,"2009-04-18 09:00:33",4,NULL,"<p>Try also <a href=&quot;http://research.microsoft.com/en-us/projects/Pex/&quot; rel=&quot;nofollow&quot;>PEX</a> tool&#xA;It Microsoft's own probably soon to be integrated into VSTS &#xA;and does support <code>NUnit</code>  , <code>MbUnit</code> and <code>xUnit.net</code> </p>&#xA;&#xA;<p>I use also small Console Application for testing one class or small library. You could copy paste the code from <a href=&quot;http://ysgitdiary.blogspot.com/2009/04/example-console-application-in-c-ready.html&quot; rel=&quot;nofollow&quot;>here</a></p>&#xA;"
6164060,2,709,"2011-05-28 20:03:06",3,NULL,"<p><code>VSTT 2010</code> should be a good bet if you are looking for functional test automation. Web Services Testing, <code>UI</code> testing, Biztalk testing and Data Driven Testing Support. Please look at <a href=&quot;http://msdn.microsoft.com/en-us/library/ee338734%28v=vs.90%29.aspx&quot; rel=&quot;nofollow&quot;>VSTT</a></p>&#xA;"
1054,2,1053,"2008-08-04 06:22:19",5,NULL,"<p>Here's a short list of implementations and languages I've tried. It's sorted by closeness to zero:</p>&#xA;&#xA;<ul>&#xA;<li>Scheme: <code>(+ 1 (make-polar 1 (atan 0 -1)))</code>&#xA;<ul>&#xA;<li>⇒ <code>0.0+1.2246063538223773e-16i</code> (Chez Scheme, MIT Scheme)</li>&#xA;<li>⇒ <code>0.0+1.22460635382238e-16i</code> (Guile)</li>&#xA;<li>⇒ <code>0.0+1.22464679914735e-16i</code> (Chicken with <code>numbers</code> egg)</li>&#xA;<li>⇒ <code>0.0+1.2246467991473532e-16i</code> (MzScheme, SISC, Gauche, Gambit)</li>&#xA;<li>⇒ <code>0.0+1.2246467991473533e-16i</code> (SCM)</li>&#xA;</ul></li>&#xA;<li>Common Lisp: <code>(1+ (exp (complex 0 pi)))</code>&#xA;<ul>&#xA;<li>⇒ <code>#C(0.0L0 -5.0165576136843360246L-20)</code> (CLISP)</li>&#xA;<li>⇒ <code>#C(0.0d0 1.2246063538223773d-16)</code> (CMUCL)</li>&#xA;<li>⇒ <code>#C(0.0d0 1.2246467991473532d-16)</code> (SBCL)</li>&#xA;</ul></li>&#xA;<li>Perl: <code>use Math::Complex; Math::Complex-&gt;emake(1, pi) + 1</code>&#xA;<ul>&#xA;<li>⇒ <code>1.22464679914735e-16i</code></li>&#xA;</ul></li>&#xA;<li>Python: <code>from cmath import exp, pi; exp(complex(0, pi)) + 1</code>&#xA;<ul>&#xA;<li>⇒ <code>1.2246467991473532e-16j</code> (CPython)</li>&#xA;</ul></li>&#xA;<li>Ruby: <code>require 'complex'; Complex::polar(1, Math::PI) + 1</code>&#xA;<ul>&#xA;<li>⇒ <code>Complex(0.0, 1.22464679914735e-16)</code> (MRI)</li>&#xA;<li>⇒ <code>Complex(0.0, 1.2246467991473532e-16)</code> (JRuby)</li>&#xA;</ul></li>&#xA;<li>R: <code>complex(argument = pi) + 1</code>&#xA;<ul>&#xA;<li>⇒ <code>0+1.224606353822377e-16i</code></li>&#xA;</ul></li>&#xA;</ul>&#xA;"
1057,2,1053,"2008-08-04 06:29:04",3,NULL,"<p>Is it possible to settle this dispute?</p>&#xA;&#xA;<p>My first thought is to look to a symbolic language, like <a href=&quot;http://en.wikipedia.org/wiki/Maple_%28software%29&quot; rel=&quot;nofollow&quot;>Maple</a>. I don't think that counts as floating point though.</p>&#xA;&#xA;<p>In fact, how does one represent <em>i</em> (or <em>j</em> for the engineers) in a conventional programming language?</p>&#xA;&#xA;<p>Perhaps a better example is sin(π) = 0? (Or have I missed the point again?)</p>&#xA;"
25528,2,1053,"2008-08-25 01:10:29",3,NULL,"<p>I agree with Ryan, you would need to move to another number representation system. The solution is outside the realm of floating point math because you need pi to represented as an infinitely long decimal so any limited precision scheme just isn't going to work (at least not without employing some kind of fudge-factor to make up the lost precision).</p>&#xA;"
26026,2,1053,"2008-08-25 13:29:02",2,NULL,"<p>@Ryan Fox <blockquote>In fact, how does one represent i (or j for the engineers) in a conventional programming language?</blockquote></p>&#xA;&#xA;<p>Native complex data types are far from unknown. Fortran had it by the mid-sixties, and the OP exhibits a variety of other languages that support them in hist followup. </p>&#xA;&#xA;<p>And complex numbers can be added to other languages as libraries (with operator overloading they even look just like native types in the code).</p>&#xA;&#xA;<p>But unless you provide a special case for this problem, the &quot;non-agreement&quot; is just an expression of imprecise machine arithmetic, no? It's like complaining that</p>&#xA;&#xA;<pre><code>float r = 2/3;&#xA;float s = 3*r;&#xA;float t = s - 2;&#xA;</code></pre>&#xA;&#xA;<p>ends with (t != 0) (At least if you use an dumb enough compiler)...</p>&#xA;"
26038,2,1053,"2008-08-25 13:37:28",3,NULL,"<p>Your question seems a little odd to me, as you seem to be suggesting that the Floating Point math is implemented by the language.  That's generally not true, as the FP math is done using a floating point processor in hardware.  But software or hardware, floating point will always be inaccurate.  That's just how floats work.</p>&#xA;&#xA;<p>If you need better precision you need to use a different number representation.  Just like if you're doing integer math on numbers that don't fit in an int or long.  Some languages have libraries for that built in (I know java has BigInteger and BigDecimal), but you'd have to explicitly use those libraries instead of native types, and the performance would be (sometimes significantly) worse than if you used floats.</p>&#xA;"
26055,2,1053,"2008-08-25 13:48:47",1,NULL,"<blockquote>&#xA;  <p>In fact, how does one represent i (or j for the engineers) in a conventional programming language?</p>&#xA;</blockquote>&#xA;&#xA;<p>In a language that doesn't have a native representation, it is usually added using OOP to create a <code>Complex</code> class to represent <code>i</code> and <code>j</code>, with operator overloading to properly deal with operations involving other <code>Complex</code> numbers and or other number primitives native to the language.</p>&#xA;&#xA;<p>Eg: <a href=&quot;http://www.math.ksu.edu/~bennett/jomacg/c.html&quot; rel=&quot;nofollow&quot;>Complex.java</a>, <a href=&quot;http://msdn.microsoft.com/en-us/library/0352zzhd%28VS.80%29.aspx&quot; rel=&quot;nofollow&quot;>C++ &lt; complex ></a></p>&#xA;"
394225,2,1053,"2008-12-26 20:22:02",13,NULL,"<p>It's not that most floating point implementations disagree, it's just that they cannot get the accuracy necessary to get a 100% answer. And the correct answer is that they can't.</p>&#xA;&#xA;<p>PI is an infinite series of digits that nobody has been able to denote by anything other than  a symbolic representation, and e^X is the same, and thus the only way to get to 100% accuracy is to go symbolic.</p>&#xA;"
394290,2,1053,"2008-12-26 21:22:10",1,NULL,"<p>Numerical Analysis teaches us that you can't rely on the precise value of small differences between large numbers. </p>&#xA;&#xA;<p>This doesn't just affect the equation in question here, but can bring instability to everything from solving a near-singular set of simultaneous equations, through finding the zeros of polynomials, to evaluating log(~1) or exp(~0) (I have even seen special functions for evaluating log(x+1) and (exp(x)-1) to get round this).</p>&#xA;&#xA;<p>I would encourage you not to think in terms of zeroing the difference -- you can't -- but rather in doing the associated calculations in such a way as to ensure the minimum error.</p>&#xA;&#xA;<p>I'm sorry, it's 43 years since I had this drummed into me at uni, and even if I could remember the references, I'm sure there's better stuff around now. I suggest <strong><em><a href=&quot;http://en.wikipedia.org/wiki/Numerical_analysis#The_generation_and_propagation_of_errors&quot; rel=&quot;nofollow&quot;>this</a></em></strong> as a starting point.</p>&#xA;&#xA;<p><hr /></p>&#xA;&#xA;<p>If that sounds a bit patronising, I apologise. My &quot;Numerical Analysis 101&quot; was part of my Chemistry course, as there wasn't much CS in those days. I don't really have a feel for the place/importance numerical analysis has in a modern CS course. </p>&#xA;"
1773104,2,1053,"2009-11-20 20:37:55",1,NULL,"<p>It's a limitation of our current floating point computational architectures. Floating point arithmetic is only an approximation of numeric poles like e or pi (or anything beyond the precision your bits allow). I really enjoy these numbers because they defy classification, and appear to have greater entropy(?) than even primes, which are a canonical series. A ratio defy's numerical representation, sometimes simple things like that can blow a person's mind (I love it).</p>&#xA;&#xA;<p>Luckily entire languages and libraries can be dedicated to precision trigonometric functions by using notational concepts (similar to those described by <a href=&quot;http://stackoverflow.com/users/267/lasse-v-karlsen&quot;>Lasse V. Karlsen</a> ). </p>&#xA;&#xA;<p>Consider a library/language that describes concepts like e and pi in a form that a machine can understand. Does a machine have any notion of what a perfect circle is? Probably not, but we can create an object - circle that satisfies all the known features we attribute to it (constant radius, relationship of radius to circumference is 2*pi*r = C). An object like pi is only described by the aforementioned ratio. r &amp; C can be numeric objects described by whatever precision you want to give them. e can be defined &quot;as the e is the unique real number such that the value of the derivative (slope of the tangent line) of the function f(x) = ex at the point x = 0 is exactly 1&quot; from <a href=&quot;http://en.wikipedia.org/wiki/E%5F%28mathematical%5Fconstant%29&quot; rel=&quot;nofollow&quot;>wikipedia</a>.</p>&#xA;&#xA;<p>Fun question.</p>&#xA;"
1240,2,1237,"2008-08-04 13:52:06",44,NULL,"<pre><code>\[start\](.*?)\[end\]&#xD;&#xA;</code></pre>&#xD;&#xA;&#xD;&#xA;<p>which'll put the text in the middle within a capture</p>"
1243,2,1237,"2008-08-04 13:55:06",14,NULL,"<pre><code>\[start\]\s*(((?!\[start\]|\[end\]).)+)\s*\[end\]<br></code></pre>&#xD;&#xA;&#xD;&#xA;<p>This should hopefully drop the [start] and [end] markers as well.</p>"
1252,2,1237,"2008-08-04 14:00:04",0,NULL,"<p>With Perl you can surround the data you want with ()'s and pull it out later, perhaps other languages have a similar feature.</p>&#xA;&#xA;<pre><code>if ($s_output =~ /(data data data data START(data data data)END (data data)/) &#xA;{&#xA;    $dataAllOfIt = $1;      # 1 full string&#xA;    $dataInMiddle = $2;     # 2 Middle Data&#xA;    $dataAtEnd = $3;        # 3 End Data&#xA;}&#xA;</code></pre>&#xA;"
18612,2,1237,"2008-08-20 19:14:19",3,NULL,"<p>A more complete discussion of the pitfalls of using a regex to find matching tags can be found at: <a href=&quot;http://faq.perl.org/perlfaq4.html#How_do_I_find_matchi&quot; rel=&quot;nofollow&quot;>http://faq.perl.org/perlfaq4.html#How_do_I_find_matchi</a>.  In particular, be aware that nesting tags really need a full-fledged parser in order to be interpreted correctly.</p>&#xA;&#xA;<p>Note that case sensitivity will need to be turned off in order to answer the question as stated.  In perl, that's the <strong>i</strong> modifier:</p>&#xA;&#xA;<pre><code>$ echo &quot;Data Data Data [Start] Data i want [End] Data&quot; \&#xA;  | perl -ne '/\[start\](.*?)\[end\]/i; print &quot;$1\n&quot;'&#xA; Data i want&#xA;</code></pre>&#xA;&#xA;<p>The other trick is to use the <strong>*?</strong> quantifier which turns off the greediness of the captured match.  For instance, if you have a non-matching <strong>[end]</strong> tag:</p>&#xA;&#xA;<pre><code>Data Data [Start] Data i want [End] Data [end]&#xA;</code></pre>&#xA;&#xA;<p>you probably don't want to capture:</p>&#xA;&#xA;<pre><code> Data i want [End] Data&#xA;</code></pre>&#xA;"
63313,2,1237,"2008-09-15 14:18:28",3,NULL,"<p>While you can use a regular expression to parse the data between opening and closing tags, you need to think long and hard as to whether this is a path you want to go down.  The reason for it is the potential of tags to nest: if nesting tags could ever happen or may ever happen, the language is said to no longer be regular, and regular expressions cease to be the proper tool for parsing it.</p>&#xA;&#xA;<p>Many regular expression implementations, such as PCRE or perl's regular expressions, support backtracking which can be used to achieve this rough effect.  But PCRE (unlike perl) doesn't support unlimited backtracking, and this can actually cause things to break in weird ways as soon as you have too many tags.  </p>&#xA;&#xA;<p>There's a very commonly cited blog post that discusses this more, <a href=&quot;http://kore-nordmann.de/blog/do_NOT_parse_using_regexp.html&quot; rel=&quot;nofollow&quot;>http://kore-nordmann.de/blog/do_NOT_parse_using_regexp.html</a>  (google for it and check the cache currently, they seem to be having some downtime)</p>&#xA;"
849859,2,1237,"2009-05-11 20:08:31",1,NULL,"<p>Well, if you guarantee that each start tag is followed by an end tag then the following would work.</p>&#xA;&#xA;<pre><code>\[start\](.*?)\[end\]&#xA;</code></pre>&#xA;&#xA;<p>However, If you have  complex text such as the follwoing:</p>&#xA;&#xA;<pre><code>[start] sometext [start] sometext2 [end] sometext [end]&#xA;</code></pre>&#xA;&#xA;<p>then you would run into problems with regex.</p>&#xA;&#xA;<p>Now the following example will pull out all the hot links in a page:</p>&#xA;&#xA;<pre><code>'/&lt;a(.*?)a&gt;/i'&#xA;</code></pre>&#xA;&#xA;<p>In the above case we can guarantee that there would not be any nested cases of:</p>&#xA;&#xA;<pre><code>'&lt;a&gt;&lt;/a&gt;'&#xA;</code></pre>&#xA;&#xA;<p>So, this is a complex question and can't just be solved with a simple answer.</p>&#xA;"
12761781,2,1237,"2012-10-06 16:52:09",6,NULL,"<pre><code>$text =&quot;Data Data Data start Data i want end Data&quot;;&#xA;($content) = $text =~ m/ start (.*) end /;&#xA;print $content;&#xA;</code></pre>&#xA;&#xA;<p>I had a similar problem for a while &amp; I can tell you this method works...</p>&#xA;"
18498275,2,1237,"2013-08-28 21:12:48",0,NULL,"<p>Refer to this question to pull out text between tags with space characters and dots (<code>.</code>)</p>&#xA;&#xA;<p><code>[\S\s]</code> is the one I used </p>&#xA;&#xA;<p><a href=&quot;http://stackoverflow.com/questions/8303488/regex-to-match-any-character-including-new-lines&quot;>Regex to match any character including new lines</a></p>&#xA;"
25803893,2,1237,"2014-09-12 08:26:38",0,NULL,"<p>Reading the text with in the square brackets [] i.e.[Start] and [End] and validate the array with a list of values. <b><em>jsfiddle</em></b> <a href=&quot;http://jsfiddle.net/muralinarisetty/r4s4wxj4/1/&quot; rel=&quot;nofollow&quot;>http://jsfiddle.net/muralinarisetty/r4s4wxj4/1/</a></p>&#xA;&#xA;<pre><code>var mergeFields = [&quot;[sitename]&quot;,&#xA;        &quot;[daystoholdquote]&quot;,&#xA;        &quot;[expires]&quot;,&#xA;        &quot;[firstname]&quot;,&#xA;        &quot;[lastname]&quot;,&#xA;        &quot;[sitephonenumber]&quot;,&#xA;        &quot;[hoh_firstname]&quot;,&#xA;        &quot;[hoh_lastname]&quot;];       &#xA;&#xA;&#xA;var str = &quot;fee [sitename] [firstname] \&#xA;sdfasd [lastname] &quot;;&#xA;var res=validateMeargeFileds(str);&#xA;console.log(res);&#xA;&#xA;&#xA;function validateMeargeFileds(input) {&#xA;        var re = /\[\w+]/ig;&#xA;        var isValid;&#xA;        var myArray = input.match(re);&#xA;try{&#xA;        if (myArray.length &gt; 0) {&#xA;            myArray.forEach(function (field) {&#xA;&#xA;                isValid = isMergeField(field);&#xA;                if (!isValid){&#xA;                   throw e;                        &#xA;                }&#xA;            });&#xA;        }&#xA;    }&#xA;    catch(e) {        &#xA;    }&#xA; return isValid;&#xA;}&#xA;&#xA;function isMergeField(mergefield) {&#xA;    return mergeFields.indexOf(mergefield.toLowerCase()) &gt; -1;&#xA;}&#xA;</code></pre>&#xA;"
1672,2,1669,"2008-08-04 22:52:01",744,NULL,"<h2>Big List of Resources:</h2>&#xA;&#xA;<ul>&#xA;<li><a href=&quot;http://www.cs.indiana.edu/~dyb/pubs/nano-jfp.pdf&quot;>A Nanopass Framework for Compiler Education</a> ¶</li>&#xA;<li><a href=&quot;http://rads.stackoverflow.com/amzn/click/1558603204&quot;>Advanced Compiler Design and Implementation</a> $</li>&#xA;<li><a href=&quot;http://scheme2006.cs.uchicago.edu/11-ghuloum.pdf&quot;>An Incremental Approach to Compiler Construction</a> ¶</li>&#xA;<li><a href=&quot;http://javadude.com/articles/antlr3xtut&quot;>ANTLR 3.x Video Tutorial</a></li>&#xA;<li><a href=&quot;http://www.diku.dk/~torbenm/Basics/&quot;>Basics of Compiler Design</a></li>&#xA;<li><a href=&quot;http://www.onlamp.com/pub/a/onlamp/2004/04/15/parrot_compiler_construction.html&quot;>Building a Parrot Compiler</a></li>&#xA;<li><a href=&quot;http://www.cs.man.ac.uk/~pjj/farrell/compmain.html&quot;>Compiler Basics</a></li>&#xA;<li><a href=&quot;http://rads.stackoverflow.com/amzn/click/0201403536&quot;>Compiler Construction</a> $</li>&#xA;<li><a href=&quot;http://rads.stackoverflow.com/amzn/click/0442275366&quot;>Compiler Design and Construction</a> $</li>&#xA;<li><a href=&quot;http://rads.stackoverflow.com/amzn/click/0805321667&quot;>Crafting a Compiler with C</a> $</li>&#xA;<li><a href=&quot;http://www.holub.com/software/compiler.design.in.c.html&quot;>Compiler Design in C</a> ¶</li>&#xA;<li><a href=&quot;http://en.wikipedia.org/wiki/Compilers:_Principles%2C_Techniques%2C_and_Tools&quot;>Dragon Book</a> $ — Widely considered &quot;the book&quot; for compiler writing.</li>&#xA;<li><a href=&quot;http://rads.stackoverflow.com/amzn/click/012088478X&quot;>Engineering a Compiler</a> $</li>&#xA;<li><a href=&quot;http://www.cs.indiana.edu/eopl/&quot;>Essentials of Programming Languages</a></li>&#xA;<li><a href=&quot;http://flipcode.com/archives/articles.shtml&quot;>Flipcode Article Archive</a> (look for &quot;Implementing A Scripting Engine by Jan Niestadt&quot;)</li>&#xA;<li><a href=&quot;http://rads.stackoverflow.com/amzn/click/1931841578&quot;>Game Scripting Mastery</a> $</li>&#xA;<li><a href=&quot;http://www.icemanind.com/VMCS.pdf&quot;>How to build a virtual machine from scratch in C#</a> ¶</li>&#xA;<li><a href=&quot;http://research.microsoft.com/~simonpj/papers/pj-lester-book/&quot;>Implementing Functional Languages</a></li>&#xA;<li><a href=&quot;http://www.codeproject.com/KB/recipes/programminglanguagetoools.aspx&quot;>Implementing Programming Languages using C# 4.0</a></li>&#xA;<li><a href=&quot;http://en.wikipedia.org/wiki/Interpreter_pattern&quot;>Interpreter pattern</a> (described in <a href=&quot;http://rads.stackoverflow.com/amzn/click/0201633612&quot;>Design Patterns</a> $) specifies a way to evaluate sentences in a language</li>&#xA;<li><a href=&quot;http://pragprog.com/titles/tpdsl/language-implementation-patterns&quot;>Language Implementation Patterns: Create Your Own Domain-Specific and General Programming Languages</a></li>&#xA;<li><a href=&quot;http://compilers.iecc.com/crenshaw/&quot;>Let's Build a Compiler</a> — The <a href=&quot;http://www.stack.nl/~marcov/compiler.pdf&quot;>PDF</a> ¶ version</li>&#xA;<li><a href=&quot;http://books.google.com/books?id=Id9cYsIdjIwC&amp;lpg=PP1&amp;ots=IxFkFWJ-8V&amp;dq=%22linkers%20and%20loaders%22&amp;pg=PA215#v=onepage&amp;q=%22linkers%20and%20loaders%22&amp;f=false&quot;>Linkers and Loaders</a> $ (Google Books)</li>&#xA;<li><a href=&quot;http://rads.stackoverflow.com/amzn/click/0521562473&quot;>Lisp in Small Pieces (LiSP)</a> $</li>&#xA;<li><a href=&quot;http://llvm.org/docs/tutorial/&quot;>LLVM Tutorial</a></li>&#xA;<li><a href=&quot;http://rads.stackoverflow.com/amzn/click/0521607647&quot;>Modern Compiler Implementation in ML</a> $ — There is a <a href=&quot;http://rads.stackoverflow.com/amzn/click/052182060X&quot;>Java</a> $ and <a href=&quot;http://rads.stackoverflow.com/amzn/click/0521607655&quot;>C</a> $ version as well - widely considered a very good book</li>&#xA;<li><a href=&quot;http://rads.stackoverflow.com/amzn/click/013630740X&quot;>Object-Oriented Compiler Construction</a> $</li>&#xA;<li><a href=&quot;http://www.dickgrune.com/Books/PTAPG_1st_Edition/&quot;>Parsing Techniques - A Practical Guide</a></li>&#xA;<li><a href=&quot;http://www-old.oberon.ethz.ch/WirthPubl/ProjectOberon.pdf&quot;>Project Oberon</a> ¶ - Look at chapter 13</li>&#xA;<li><a href=&quot;http://rads.stackoverflow.com/amzn/click/0137302673&quot;>Programming a Personal Computer</a> $</li>&#xA;<li><a href=&quot;http://www.cs.brown.edu/~sk/Publications/Books/ProgLangs/&quot;>Programing Languages: Application and Interpretation</a></li>&#xA;<li><a href=&quot;http://repository.readscheme.org/ftp/papers/ai-lab-pubs/AITR-474.pdf&quot;>Rabbit: A Compiler for Scheme</a>¶</li>&#xA;<li><a href=&quot;http://cm.bell-labs.com/who/ken/trust.html&quot;>Reflections on Trusting Trust</a> — A quick guide</li>&#xA;<li><a href=&quot;http://msdn.microsoft.com/en-us/magazine/cc136756.aspx&quot;>Roll Your Own Compiler for the .NET framework</a> — A quick tutorial from MSDN</li>&#xA;<li><a href=&quot;http://mitpress.mit.edu/sicp/&quot;>Structure and Interpretation of Computer Programs</a></li>&#xA;<li><a href=&quot;http://www.cis.upenn.edu/~bcpierce/tapl/&quot;>Types and Programming Languages</a></li>&#xA;<li><a href=&quot;http://prog21.dadgum.com/30.html&quot;>Want to Write a Compiler?</a> - a quick guide</li>&#xA;<li><a href=&quot;http://www.hokstad.com/writing-a-compiler-in-ruby-bottom-up-step-1.html&quot;>Writing a Compiler in Ruby Bottom Up</a></li>&#xA;</ul>&#xA;&#xA;<p>Legend:  </p>&#xA;&#xA;<ul>&#xA;<li>¶ Link to a PDF file</li>&#xA;<li>$ Link to a printed book</li>&#xA;</ul>&#xA;"
1678,2,1669,"2008-08-04 22:56:31",17,NULL,"<p><a href=&quot;http://compilers.iecc.com/crenshaw/&quot; rel=&quot;nofollow&quot;>&quot;Let's Build a Compiler&quot;</a> is awesome, but it's a bit outdated. (I'm not saying it makes it even a little bit less valid.)</p>&#xA;"
1686,2,1669,"2008-08-04 23:08:19",39,NULL,"<p>I concur with the Dragon Book reference; IMO, it is the definitive guide to compiler construction. Get ready for some hardcore theory, though.</p>&#xD;&#xA;&#xD;&#xA;<p>If you want a book that is lighter on theory, <a href=&quot;http://rads.stackoverflow.com/amzn/click/1931841578&quot;>Game Scripting Mastery</a> might be a better book for you. If you are a total newbie at compiler theory, it provides a gentler introduction. It doesn't cover more practical parsing methods (opting for non-predictive recursive descent without discussing LL or LR parsing), and as I recall, it doesn't even discuss any sort of optimization theory. Plus, instead of compiling to machine code, it compiles to a bytecode that is supposed to run on a VM that you also write.</p>&#xD;&#xA;&#xD;&#xA;<p>It's still a decent read, particularly if you can pick it up for cheap on Amazon. If you only want an easy introduction into compilers, Game Scripting Mastery is not a bad way to go. If you want to go hardcore up front, then you should settle for nothing less than the Dragon Book.</p>"
1693,2,1669,"2008-08-04 23:13:49",20,NULL,"<p>If you're looking to use powerful, higher level tools rather than building <em>everything</em> yourself, going through the projects and readings for <a href=&quot;http://www.antlr.org/wiki/display/CS652/CS652+Home&quot;>this course</a> is a pretty good option.  It's a languages course by the author of the Java parser engine ANTLR.  You can get the book for the course as a PDF from <a href=&quot;http://www.pragprog.com/titles/tpantlr/the-definitive-antlr-reference&quot;>the Pragmatic Programmers</a>.</p>&#xD;&#xA;&#xD;&#xA;<p>The course goes over the standard compiler compiler stuff that you'd see elsewhere: parsing, types and type checking, polymorphism, symbol tables, and code generation.  Pretty much the only thing that isn't covered is optimizations.  The final project is  a program that <a href=&quot;http://www.antlr.org/wiki/display/CS652/C+subset+compiler&quot;>compiles a subset of C</a>.  Because you use tools like ANTLR and LLVM, it's feasible to write the entire compiler in a single day (I have an existence proof of this, though I do mean ~24 hours).  It's heavy on practical engineering using modern tools, a bit lighter on theory.</p>&#xD;&#xA;&#xD;&#xA;<p>LLVM, by the way, is simply fantastic.  Many situations where you might normally compile down to assembly, you'd be much better off compiling to <a href=&quot;http://llvm.org/docs/LangRef.html&quot;>LLVM's Intermediate Representation</a> instead.  It's higher level, cross platform, and LLVM is quite good at generating optimized assembly from it.</p>"
2523,2,1669,"2008-08-05 16:16:01",9,NULL,"<p><a href=&quot;http://rads.stackoverflow.com/amzn/click/0321486811&quot;>The Dragon Book</a> is definitely the &quot;building compilers&quot; book, but if your language isn't quite as complicated as the current generation of languages, you may want to look at the Interpreter pattern from <a href=&quot;http://rads.stackoverflow.com/amzn/click/0201633612&quot;>Design Patterns</a>.</p>&#xD;&#xA;&#xD;&#xA;<p>The example in the book designs a regular expression-like language and is well thought through, but as they say in the book, it's good for thinking through the process but is effective really only on small languages. However, it is much faster to write an Interpreter for a small language with this pattern than having to learn about all the different types of parsers, yacc and lex, et cetera...</p>"
7085,2,1669,"2008-08-10 07:54:33",43,NULL,"<p>I think <a href=&quot;http://rads.stackoverflow.com/amzn/click/0521607647&quot;>Modern Compiler Implementation in ML</a> is the best introductory compiler writing text. There's a <a href=&quot;http://rads.stackoverflow.com/amzn/click/052182060X&quot;>Java version</a> and a <a href=&quot;http://rads.stackoverflow.com/amzn/click/0521607655&quot;>C version</a> too, either of which might be more accessible given your languages background. The book packs a lot of useful basic material (scanning and parsing, semantic analysis, activation records, instruction selection, RISC and x86 native code generation) and various &quot;advanced&quot; topics (compiling OO and functional languages, polymorphism, garbage collection, optimization and single static assignment form) into relatively little space (~500 pages).</p>&#xA;&#xA;<p>I prefer Modern Compiler Implementation to the Dragon book because Modern Compiler implementation surveys less of the field--instead it has really solid coverage of all the topics you would need to write a serious, decent compiler. After you work through this book you'll be ready to tackle research papers directly for more depth if you need it.</p>&#xA;&#xA;<p>I must confess I have a serious soft spot for Niklaus Wirth's <a href=&quot;http://rads.stackoverflow.com/amzn/click/0201403536&quot;>Compiler Construction.</a> It is <a href=&quot;http://www-old.oberon.ethz.ch/WirthPubl/CBEAll.pdf&quot;>available online</a> as a PDF. I find Wirth's programming aesthetic simply beautiful, however some people find his style too minimal (for example Wirth favors recursive descent parsers, but most CS courses focus on parser generator tools; Wirth's language designs are fairly conservative.) Compiler Construction is a very succinct distillation of Wirth's basic ideas, so whether you like his style or not or not, I highly recommend reading this book.</p>&#xA;"
15178,2,1669,"2008-08-18 20:18:32",7,NULL,"<p>One book not yet suggested but very important is <a href=&quot;http://books.google.com/books?id=h34d_jr2iikC&amp;dq=%22linkers+and+loaders%22&amp;pg=PP1&amp;ots=IxFkFWJ-8V&amp;sig=GSlclmkezTRL6YYguGJmZsnkM3c&amp;hl=en&amp;sa=X&amp;oi=book_result&amp;resnum=1&amp;ct=result&quot; rel=&quot;nofollow&quot;>&quot;Linkers and Loaders&quot;</a> by John Levine.  If you're not using an external assembler, you'll need a way to output a object file that can be linked into your final program.  Even if you're using an external assembler, you'll probably need to understand relocations and how the whole program loading process works to make a working tool.  This book collects a lot of the random lore around this process for various systems, including Win32 and Linux.</p>&#xA;"
17690,2,1669,"2008-08-20 09:56:34",6,NULL,"<p>An easy way to create a compiler is to use bison and flex (or similar), build a tree (AST) and generate code in C. With generating C code being the most important step. By generating C code, your language will automatically work on all platforms that have a C compiler.</p>&#xA;&#xA;<p>Generating C code is as easy as generating HTML (just use print, or equivalent), which in turn is much easier than writing a C parser or HTML parser.</p>&#xA;"
17694,2,1669,"2008-08-20 10:01:17",9,NULL,"<p>If you're willing to use LLVM, check this out: <a href=&quot;http://llvm.org/docs/tutorial/&quot;><a href=&quot;http://llvm.org/docs/tutorial/&quot;>http://llvm.org/docs/tutorial/</a></a>. It teaches you how to write a compiler from scratch using LLVM's framework, and doesn't assume you have any knowledge about the subject.</p>&#xA;&#xA;<p>The tutorial suggest you write your own parser and lexer etc, but I advise you to look into bison and flex once you get the idea. They make life so much easier.</p>&#xA;"
17768,2,1669,"2008-08-20 11:28:59",8,NULL,"<blockquote>&#xA;  <p>&quot;... Let's Build a Compiler ...&quot;</p>&#xA;</blockquote>&#xA;&#xA;<p>I'd second <a href=&quot;http://compilers.iecc.com/crenshaw/&quot; rel=&quot;nofollow&quot;>http://compilers.iecc.com/crenshaw/</a> by <a href=&quot;http://stackoverflow.com/questions/1669/learning-to-write-a-compiler#1678&quot; rel=&quot;nofollow&quot;>@sasb</a>. Forget buying more books for the moment.</p>&#xA;&#xA;<p>Why?  Tools &amp; language. </p>&#xA;&#xA;<p>The language required is Pascal and if I remember correctly is based on Turbo-Pascal. It just so happens if you go to <a href=&quot;http://www.freepascal.org/&quot; rel=&quot;nofollow&quot;>http://www.freepascal.org/</a> and download the Pascal compiler all the examples work straight from the page ~ <a href=&quot;http://www.freepascal.org/download.var&quot; rel=&quot;nofollow&quot;>http://www.freepascal.org/download.var</a> The beaut thing about Free Pascal is you can use it almost whatever processor or OS you can care for. </p>&#xA;&#xA;<p>Once you have mastered the lessons then try the more advanced <em>&quot;<a href=&quot;http://en.wikipedia.org/wiki/Dragon%5Fbook&quot; rel=&quot;nofollow&quot;>Dragon Book</a>&quot;</em> ~ <a href=&quot;http://en.wikipedia.org/wiki/Dragon_book&quot; rel=&quot;nofollow&quot;>http://en.wikipedia.org/wiki/Dragon_book</a></p>&#xA;"
22718,2,1669,"2008-08-22 15:57:16",4,NULL,"<p>I liked the <A HREF=&quot;http://compilers.iecc.com/crenshaw/&quot; rel=&quot;nofollow&quot;>Crenshaw tutorial</A> too, because it makes it absolutely clear that a compiler is just another program that reads some input and writes some out put. </p>&#xA;&#xA;<p>Read it. </p>&#xA;&#xA;<p>Work it if you want, but then look at another reference on how bigger and more complete compilers are really written.</p>&#xA;&#xA;<p>And read <A href=&quot;http://cm.bell-labs.com/who/ken/trust.html&quot; rel=&quot;nofollow&quot;>On Trusting Trust</A>, to get a clue about the unobvious things that can be done in this domain.</p>&#xA;"
74176,2,1669,"2008-09-16 16:21:23",6,NULL,"<p>The LCC compiler (<a href=&quot;http://en.wikipedia.org/wiki/Local_C_compiler&quot; rel=&quot;nofollow&quot;>wikipedia</a>) (<a href=&quot;http://www.cs.princeton.edu/software/lcc/&quot; rel=&quot;nofollow&quot;>project homepage</a>) of Fraser and Hanson is described in their book &quot;A Retargetable C Compiler: Design and Implementation&quot;. It is quite readable and explains the whole compiler, down to code generation. </p>&#xA;"
98010,2,1669,"2008-09-18 23:31:15",5,NULL,"<p>There's a lot of good answers here, so i thought I'd just add one more to the list:</p>&#xA;&#xA;<p>I got a book called Project Oberon more than a decade ago, which has some very well written text on the compiler. The book really stands out in the sense that the source and explanations is very hands on and readable. The complete text (the 2005 edition) has been made available in pdf, so you can download right now. The compiler is discussed in chapter 12:</p>&#xA;&#xA;<p><a href=&quot;http://www-old.oberon.ethz.ch/WirthPubl/ProjectOberon.pdf&quot;>http://www-old.oberon.ethz.ch/WirthPubl/ProjectOberon.pdf</a></p>&#xA;&#xA;<p>Niklaus Wirth, Jürg Gutknecht</p>&#xA;&#xA;<p>(The treatment is not as extensive as his book on compilers)</p>&#xA;&#xA;<p>I've read several books on compilers, and i can second the dragon book, time spent on this book is very worthwhile.</p>&#xA;"
156867,2,1669,"2008-10-01 09:30:26",5,NULL,"<p>If you are interested in writing a compiler for a functional language (rather than a procedural one) Simon Peyton-Jones and David Lester's &quot;<a href=&quot;http://research.microsoft.com/~simonpj/papers/pj-lester-book/&quot;>Implementing functional languages: a tutorial</a>&quot; is an excellent guide. </p>&#xA;&#xA;<p>The conceptual basics of how functional evaluation works is guided by examples in a simple but powerful functional language called &quot;Core&quot;. Additionally, each part of the Core language compiler is explained with code examples in Miranda (a pure functional language very similar to Haskell). </p>&#xA;&#xA;<p>Several different types of compilers are described but even if you only follow the so-called template compiler for Core you will have an excellent understanding of what makes functional programming tick. </p>&#xA;"
159530,2,1669,"2008-10-01 20:24:42",2,NULL,"<p>The Dragon Book is too complicated. So ignore it as a starting point. It is good and makes you think a lot once you already have a starting point, but for starters, perhaps you should simply try to write an math/logical expression evaluator using RD, LL or LR parsing techniques with everything (lexing/parsing) written by hand in perhaps C/Java. This is interesting in itself and gives you an idea of the problems involved in a compiler. Then you can jump in to your own DSL using some scripting language (since processing text is usually easier in these) and like someone said, generate code in either the scripting language itself or C. You should probably use flex/bison/antlr etc to do the lexing/parsing if you are going to do it in c/java.</p>&#xA;"
401786,2,1669,"2008-12-30 23:01:20",8,NULL,"<p>I am looking into the same concept, and found this promising article by Joel Pobar,</p>&#xA;&#xA;<p><a href=&quot;http://msdn.microsoft.com/en-us/magazine/cc136756.aspx&quot; rel=&quot;nofollow&quot;>Create a Language Compiler for the .NET Framework</a></p>&#xA;&#xA;<p>he discusses a high level concept of a compiler and proceeds to invent his own langauge for the .Net framework. Although its aimed at the .Net Framework, many of the concepts should be able to be reproduced. The Article covers:</p>&#xA;&#xA;<ol>&#xA;<li>Langauge definition </li>&#xA;<li>Scanner </li>&#xA;<li>Parser (the bit im mainly interested in)</li>&#xA;<li>Targeting the .Net Framework The</li>&#xA;<li>Code Generator</li>&#xA;</ol>&#xA;&#xA;<p>there are other topics, but you get the just.</p>&#xA;&#xA;<p>Its aimed to people starting out, written in C# (not quite Java)</p>&#xA;&#xA;<p>HTH</p>&#xA;&#xA;<p>bones</p>&#xA;"
789357,2,1669,"2009-04-25 17:23:55",6,NULL,"<p>Sorry, it is in Spanish, but this is the bibliography of a course called &quot;Compiladores e Intérpretes&quot; (Compilers and Interpreters) in Argentina. </p>&#xA;&#xA;<p>The course was from formal language theory to compiler construction, and these are the topics you need to build, at least, a simple compiler:</p>&#xA;&#xA;<blockquote>&#xA;  <ul>&#xA;  <li><p>Compilers Design in C. <br />    Allen I. Holub <br /><br>&#xA;  Prentice-Hall. 1990.</p></li>&#xA;  <li><p>Compiladores. Teoría y Construcción. <br />    Sanchís&#xA;  Llorca, F.J. ,  Galán Pascual, C.     Editorial Paraninfo. 1988.</p></li>&#xA;  <li><p>Compiler Construction. <br />    Niklaus Wirth <br /><br>&#xA;  Addison-Wesley. 1996.</p></li>&#xA;  <li><p>Lenguajes, Gramáticas y Autómatas. Un enfoque práctico. <br />    Pedro&#xA;  Isasi Viñuela, Paloma Martínez&#xA;  Fernández, Daniel Borrajo Millán.     Addison-Wesley Iberoamericana&#xA;  (España). 1997.</p></li>&#xA;  <li><p>The art of compiler design. Theory and practice. <br />    Thomas&#xA;  Pittman, James Peters. <br /><br>&#xA;  Prentice-Hall. 1992.</p></li>&#xA;  <li><p>Object-Oriented Compiler Construction. <br />    Jim Holmes.&#xA;  <br />    Prentice Hall, Englewood&#xA;  Cliffs, N.J. 1995</p></li>&#xA;  <li><p>Compiladores. Conceptos Fundamentales. <br />    B. Teufel, S.&#xA;  Schmidt, T. Teufel. <br /><br>&#xA;  Addison-Wesley Iberoamericana. 1995.</p></li>&#xA;  <li><p>Introduction to Automata Theory, Languages, and Computation. <br /><br>&#xA;  John E. Hopcroft. Jeffref D. Ullman.&#xA;  <br />    Addison-Wesley. 1979.</p></li>&#xA;  <li><p>Introduction to formal languages. <br />    György E. Révész. <br /><br>&#xA;  Mc Graw Hill. 1983.</p></li>&#xA;  <li><p>Parsing Techniques. A Practical Guide. <br />    Dick Grune, Ceriel&#xA;  Jacobs. <br />    Impreso por los&#xA;  autores. 1995<br>&#xA;  <a href=&quot;http://www.cs.vu.nl/~dick/PTAPG.html&quot; rel=&quot;nofollow&quot;>http://www.cs.vu.nl/~dick/PTAPG.html</a></p></li>&#xA;  <li><p>Yacc: Yet Another Compiler-Compiler. <br />    Stephen&#xA;  C. Johnson <br />    Computing Science&#xA;  Technical Report Nº 32, 1975. Bell&#xA;  Laboratories. Murray Hill, New<br>&#xA;  Jersey.</p></li>&#xA;  <li><p>Lex: A Lexical Analyzer Generator. <br />    M. E. Lesk,  E. Schmidt.     Computing Science Technical&#xA;  Report Nº 39, 1975. Bell Laboratories.&#xA;  Murray Hill, New     Jersey.</p></li>&#xA;  <li><p>lex &amp; yacc. <br />    John R. Levine, Tony Mason, Doug Brown. <br />&#xA;  O’Reilly &amp; Associates. 1995.</p></li>&#xA;  <li><p>Elements of the theory of computation. <br />    Harry R. Lewis,&#xA;  Christos H. Papadimitriou.&#xA;  Segunda Edición. Prentice Hall. 1998. </p></li>&#xA;  <li><p>Un Algoritmo Eficiente para la Construcción del Grafo de Dependencia de Control.<br/>&#xA;  Salvador V. Cavadini.<br>&#xA;  Trabajo Final de Grado para obtener el Título de Ingeniero en Computación.<br>&#xA;  Facultad de Matemática Aplicada.&#xA;  U.C.S.E. 2001.</p></li>&#xA;  </ul>&#xA;</blockquote>&#xA;"
1156383,2,1669,"2009-07-20 22:44:40",5,NULL,"<ol>&#xA;<li>This is a vast subject. Do not underestimate this point. And do not underestimate my point to not underestimate it.</li>&#xA;<li>I hear the <a href=&quot;http://en.wikipedia.org/wiki/Compilers%3a_Principles,_Techniques,_and_Tools&quot; rel=&quot;nofollow&quot;>Dragon Book</a> is a (the?) place to start, along with searching. :) Get better at searching, eventually it will be your life.</li>&#xA;<li>Building your own programming language is absolutely a good exercise! But know that it will never be used for any practical purpose in the end. Exceptions to this are few and <em>very</em> far between.</li>&#xA;</ol>&#xA;"
1156391,2,1669,"2009-07-20 22:47:04",14,NULL,"<p>You might want to look into Lex/Yacc (or Flex/Bison, whatever you want to call them). Flex is a lexical analyzer, which will parse and identify the semantic components (&quot;tokens&quot;) of your language, and Bison will be used to define what happens when each token is parsed. This could be, but is definitely not limited to, printing out C code, for a compiler that would compile to C, or dynamically running the instructions.</p>&#xA;&#xA;<p><a href=&quot;http://tldp.org/HOWTO/Lex-YACC-HOWTO-5.html&quot; rel=&quot;nofollow&quot;>This FAQ</a> should help you, and <a href=&quot;http://www.mactech.com/articles/mactech/Vol.16/16.07/UsingFlexandBison/&quot; rel=&quot;nofollow&quot;>this tutorial</a> looks quite useful.</p>&#xA;"
1156434,2,1669,"2009-07-20 23:01:21",62,NULL,"<p>This is a pretty vague question, I think; just because of the depth of the topic involved.  A compiler can be decomposed into two separate parts, however; a top-half and a bottom-one.  The top-half generally takes the source language and converts it into an intermediate representation, and the bottom half takes care of the platform specific code generation.</p>&#xA;&#xA;<p>Nonetheless, one idea for an easy way to approach this topic (the one we used in my compilers class, at least) is to build the compiler in the two pieces described above.  Specifically, you'll get a good idea of the entire process by just building the top-half.</p>&#xA;&#xA;<p>Just doing the top half lets you get the experience of writing the lexical analyzer and the parser and go to generating some &quot;code&quot; (that intermediate representation I mentioned).  So it will take your source program and convert it to another representation and do some optimization (if you want), which is the heart of a compiler.  The bottom half will then take that intermediate representation and generate the bytes needed to run the program on a specific architecture.  For example, the the bottom half will take your intermediate representation and generate a PE executable.  </p>&#xA;&#xA;<p>Some books on this topic that I found particularly helpful was <a href=&quot;http://rads.stackoverflow.com/amzn/click/0321486811&quot;>Compilers Principles and Techniques</a> (or the Dragon Book, due to the cute dragon on the cover).  It's got some great theory and definitely covers Context-Free Grammars in a really accessible manner.  Also, for building the lexical analyzer and parser, you'll probably use the *nix tools lex and yacc.  And uninterestingly enough, the book called &quot;<a href=&quot;http://rads.stackoverflow.com/amzn/click/1565920007&quot;>lex and yacc</a>&quot; picked up where the Dragon Book left off for this part.</p>&#xA;"
1156436,2,1669,"2009-07-20 23:01:42",1,NULL,"<ul>&#xA;<li>Start by making sure you can answer most of the questions tagged C++ here on Stack Overflow.</li>&#xA;<li>After that, you should make sure you understand how other compilers work and understand [parts of] their source code.</li>&#xA;<li>You'll notice you need assembler and will start learning assembler until you can answer many questions with that tag.</li>&#xA;<li>If you've come this far, you'll find that several years have passed and realize how big such a project is and possibly smile at your own question from back then (if this page still exists at that time) ...</li>&#xA;</ul>&#xA;"
1156689,2,1669,"2009-07-21 00:20:15",2,NULL,"<p>I'm surprised it hasn't been mentioned, but Donald Knuth's <em>The Art of Computer Programming</em> was originally penned as a sort of tutorial on compiler writing.</p>&#xA;&#xA;<p>Of course, Dr. Knuth's propensity for going in-depth on topics has led to the compiler-writing tutorial being expanded to an estimated 9 volumes, only three of which have actually been published. It's a rather complete exposition on programming topics, and covers everything you would ever need to know about writing a compiler, in minute detail.</p>&#xA;"
1156750,2,1669,"2009-07-21 00:42:47",1,NULL,"<p>Whenever I want to try out a new language idea, I just write a simple parser, and have it generate some language that's easy to get good compilers for, like C.</p>&#xA;&#xA;<p>How do you think C++ was done?</p>&#xA;"
1241910,2,1669,"2009-08-06 22:37:05",5,NULL,"<p>I remember asking this question about seven years ago when I was rather new to programming.&#xA;I was very careful when I asked and surprisingly I didn't get as much critisism as you are getting here. They did however point me in the direction of the &quot;<a href=&quot;http://en.wikipedia.org/wiki/Compilers%3a_Principles,_Techniques,_and_Tools&quot; rel=&quot;nofollow&quot;>Dragon Book</a>&quot; which is in my opinion, a really great book that explains everything you need to know to write a compiler (you will of course have to master a language or two. The more languages you know, the marrier.).</p>&#xA;&#xA;<p>And yes, many people say reading that book is crazy and you won't learn anything from it, but I disagree completely with that.</p>&#xA;&#xA;<p>Many people also say that writing compilers are stupid and pointless. Well, there are a number of reasons why compiler development are useful:&#xA;- Because it's fun.&#xA;- It's educational, when learning how to write compilers you will learn a lot about computer science and other techinques that are useful when writing other applications.&#xA;- If nobody wrote compilers the existing languages wouldn't get any better.</p>&#xA;&#xA;<p>I didn't write my own compiler right away, but after asking I knew where to start. And now, after learning many different languages and reading the Dragon Book, writing isn't that much of a problem. (I'm also studying computer engineering atm, but most of what I know about programming is self taught.)</p>&#xA;&#xA;<p>In conclusion:&#xA;- The Dragon Book is a great &quot;tutorial&quot;. But spend some time mastering a language or two before attempting to write a compiler. Don't expect to be a compiler guru within the next decade or so though.</p>&#xA;&#xA;<p>The book is also good if you want to learn how to write parsers/interpreters.</p>&#xA;"
1344367,2,1669,"2009-08-28 00:01:07",3,NULL,"<p>Not a book, but a technical paper and an enormously fun learning experience if you want to know more about compilers (and metacompilers)... This website walks you through building a completely self-contained compiler system that can compile itself and other languages:</p>&#xA;&#xA;<p><em><a href=&quot;http://www.bayfronttechnologies.com/mc_tutorial.html&quot; rel=&quot;nofollow&quot;>Tutorial: Metacompilers Part 1</a></em></p>&#xA;&#xA;<p>This is all based on an amazing little 10-page technical paper:</p>&#xA;&#xA;<p><i>Val Schorre</i> <b>META II: A Syntax-Oriented Compiler Writing Language</b></p>&#xA;&#xA;<p>from honest-to-god 1964. I learned how to build compilers from this back in 1970. There's a mind-blowing moment when you finally grok how the compiler can regenerate itself....</p>&#xA;&#xA;<p>I know the website author from my college days, but I have nothing to do with the website.</p>&#xA;"
2853691,2,1669,"2010-05-17 23:38:29",9,NULL,"<p>Take a look at the book below. The author is the creator of <a href=&quot;http://www.antlr.org/&quot; rel=&quot;nofollow&quot;>ANTLR</a>.</p>&#xA;&#xA;<p><a href=&quot;http://pragprog.com/titles/tpdsl/language-implementation-patterns&quot; rel=&quot;nofollow&quot;>Language Implementation Patterns: Create Your Own Domain-Specific and General Programming Languages</a>.</p>&#xA;&#xA;<p><img src=&quot;https://i.stack.imgur.com/ukOkz.jpg&quot; alt=&quot;alt text&quot;></p>&#xA;"
3125367,2,1669,"2010-06-26 20:17:05",7,NULL,"<p>From the <a href=&quot;http://www.faqs.org/faqs/compilers/faq/&quot;>comp.compilers FAQ</a>:</p>&#xA;&#xA;<p>&quot;Programming a Personal Computer&quot; by Per Brinch Hansen&#xA;Prentice-Hall 1982 ISBN 0-13-730283-5</p>&#xA;&#xA;<p>This unfortunately-titled book&#xA;explains the design and creation of a single-user programming environment&#xA;for micros, using a Pascal-like language called Edison.  The author presents&#xA;all source code and explanations for the step-by-step implementation of an&#xA;Edison compiler and simple supporting operating system, all written in&#xA;Edison itself (except for a small supporting kernel written in a symbolic&#xA;assembler for PDP 11/23; the complete source can also be ordered for the IBM&#xA;PC).</p>&#xA;&#xA;<p>The most interesting things about this book are:  1) its ability to&#xA;demonstrate how to create a complete, self-contained, self-maintaining,&#xA;useful compiler and operating system, and 2) the interesting discussion of&#xA;language design and specification problems and trade-offs in Chapter 2.</p>&#xA;&#xA;<p>&quot;Brinch Hansen on Pascal Compilers&quot; by Per Brinch Hansen&#xA;Prentice-Hall 1985 ISBN 0-13-083098-4</p>&#xA;&#xA;<p>Another light-on-theory&#xA;heavy-on-pragmatics here's-how-to-code-it book.  The author presents the&#xA;design, implementation, and complete source code for a compiler and p-code&#xA;interpreter for Pascal- (Pascal &quot;minus&quot;), a Pascal subset with boolean and&#xA;integer types (but no characters, reals, subranged or enumerated types),&#xA;constant and variable definitions and array and record types (but no packed,&#xA;variant, set, pointer, nameless, renamed, or file types), expressions,&#xA;assignment statements, nested procedure definitions with value and variable&#xA;parameters, if statements, while statements, and begin-end blocks (but no&#xA;function definitions, procedural parameters, goto statements and labels,&#xA;case statements, repeat statements, for statements, and with statements).</p>&#xA;&#xA;<p>The compiler and interpreter are written in Pascal* (Pascal &quot;star&quot;), a&#xA;Pascal subset extended with some Edison-style features for creating&#xA;software development systems.  A Pascal* compiler for the IBM PC is sold by&#xA;the author, but it's easy to port the book's Pascal- compiler to any&#xA;convenient Pascal platform.</p>&#xA;&#xA;<p>This book makes the design and implementation of a compiler look easy.  I&#xA;particularly like the way the author is concerned with quality,&#xA;reliability, and testing.  The compiler and interpreter can easily be used&#xA;as the basis for a more involved language or compiler project, especially&#xA;if you're pressed to quickly get something up and running. </p>&#xA;"
3125860,2,1669,"2010-06-26 23:43:24",3,NULL,"<p>Missing from the list: Garbage Collection: Algorithms for Automatic Dynamic Memory Management, by Jones and Lins.</p>&#xA;&#xA;<p>(Assuming you're writing the compiler <em>and</em> runtime system, and that you're implementing a garbage collected language.</p>&#xA;"
3443032,2,1669,"2010-08-09 18:33:43",7,NULL,"<p>I found the Dragon book much too hard to read with too much focus on language theory that is not really required to write a compiler in practice. </p>&#xA;&#xA;<p>I would add the <a href=&quot;http://en.wikipedia.org/wiki/Oberon_%28programming_language%29&quot; rel=&quot;nofollow&quot;>Oberon</a> book which contains the full source of an amazingly fast and simple Oberon compiler <a href=&quot;http://www.amazon.de/Project-Oberon-Design-Operating-Compiler/dp/0201544288/ref=sr_1_3?ie=UTF8&amp;s=books-intl-de&amp;qid=1281378762&amp;sr=8-3&quot; rel=&quot;nofollow&quot;>Project Oberon</a>.</p>&#xA;&#xA;<p><img src=&quot;https://i.stack.imgur.com/N3GFA.jpg&quot; alt=&quot;Alt text&quot;></p>&#xA;"
3592870,2,1669,"2010-08-28 23:14:41",16,NULL,"<p>If you have little time, I recommend <a href=&quot;http://www.ethoberon.ethz.ch/WirthPubl/CBEAll.pdf&quot;>Niklaus Wirth's &quot;Compiler Construction&quot; (Addison-Wesley. 1996)</a>, a tiny little booklet that you can read in a day, but it explains the basics (including how to implement lexers, recursive descent parsers, and your own stack-based virtual machines). After that, if you want a deep dive, there's no way around the Dragon book as other commenters suggest.</p>&#xA;"
5518042,2,1669,"2011-04-01 19:39:20",1,NULL,"<p>The quickest approach is through two books:</p>&#xA;&#xA;<p>1990 version of <a href=&quot;http://rads.stackoverflow.com/amzn/click/007709221X&quot; rel=&quot;nofollow&quot;>An Introduction to Compiling Techniques, a First Course using ANSI C, LeX, and YaCC</a> by JP Bennett - a perfect balance of example code, parsing theory and design- it contains a complete compiler  written in C, lex and yacc for a simple grammar</p>&#xA;&#xA;<p><a href=&quot;http://rads.stackoverflow.com/amzn/click/0201000229&quot; rel=&quot;nofollow&quot;>Dragon Book</a> (older version) - mostly a detailed reference for the features not covered in the former book</p>&#xA;"
6695987,2,1669,"2011-07-14 15:42:33",1,NULL,"<p>You can use <a href=&quot;http://jakarta.apache.org/bcel/&quot; rel=&quot;nofollow&quot;>BCEL</a> by the Apache Software Foundation. With this tool you can generate assembler-like code, but it's Java with the BCEL API. You can learn how you can generate intermediate language code (in this case byte code).</p>&#xA;&#xA;<h3>Simple example</h3>&#xA;&#xA;<ol>&#xA;<li><p>Create a Java class with this function:</p>&#xA;&#xA;<pre><code>public String maxAsString(int a, int b) {&#xA;    if (a &gt; b) {&#xA;        return Integer.valueOf(a).toString();&#xA;    } else if (a &lt; b) {&#xA;        return Integer.valueOf(b).toString();&#xA;    } else {&#xA;        return &quot;equals&quot;;&#xA;    }&#xA;}&#xA;</code></pre></li>&#xA;</ol>&#xA;&#xA;<p>Now run BCELifier with this class</p>&#xA;&#xA;<pre><code>BCELifier bcelifier = new BCELifier(&quot;MyClass&quot;, System.out);&#xA;bcelifier.start();&#xA;</code></pre>&#xA;&#xA;<p>You can see the result on the console for the whole class (how to build byte code MyClass.java). The code for the function is this:</p>&#xA;&#xA;<pre><code>private void createMethod_1() {&#xA;  InstructionList il = new InstructionList();&#xA;  MethodGen method = new MethodGen(ACC_PUBLIC, Type.STRING, new Type[] { Type.INT, Type.INT }, new String[] { &quot;arg0&quot;, &quot;arg1&quot; }, &quot;maxAsString&quot;, &quot;MyClass&quot;, il, _cp);&#xA;&#xA;  il.append(InstructionFactory.createLoad(Type.INT, 1)); // Load first parameter to address 1&#xA;  il.append(InstructionFactory.createLoad(Type.INT, 2)); // Load second parameter to adress 2&#xA;    BranchInstruction if_icmple_2 = InstructionFactory.createBranchInstruction(Constants.IF_ICMPLE, null); // Do if condition (compare a &gt; b)&#xA;  il.append(if_icmple_2);&#xA;  il.append(InstructionFactory.createLoad(Type.INT, 1)); // Load value from address 1 into the stack&#xA;  il.append(_factory.createInvoke(&quot;java.lang.Integer&quot;, &quot;valueOf&quot;, new ObjectType(&quot;java.lang.Integer&quot;), new Type[] { Type.INT }, Constants.INVOKESTATIC));&#xA;  il.append(_factory.createInvoke(&quot;java.lang.Integer&quot;, &quot;toString&quot;, Type.STRING, Type.NO_ARGS, Constants.INVOKEVIRTUAL));&#xA;  il.append(InstructionFactory.createReturn(Type.OBJECT));&#xA;  InstructionHandle ih_13 = il.append(InstructionFactory.createLoad(Type.INT, 1));&#xA;  il.append(InstructionFactory.createLoad(Type.INT, 2));&#xA;    BranchInstruction if_icmpge_15 = InstructionFactory.createBranchInstruction(Constants.IF_ICMPGE, null); // Do if condition (compare a &lt; b)&#xA;  il.append(if_icmpge_15);&#xA;  il.append(InstructionFactory.createLoad(Type.INT, 2));&#xA;  il.append(_factory.createInvoke(&quot;java.lang.Integer&quot;, &quot;valueOf&quot;, new ObjectType(&quot;java.lang.Integer&quot;), new Type[] { Type.INT }, Constants.INVOKESTATIC));&#xA;  il.append(_factory.createInvoke(&quot;java.lang.Integer&quot;, &quot;toString&quot;, Type.STRING, Type.NO_ARGS, Constants.INVOKEVIRTUAL));&#xA;  il.append(InstructionFactory.createReturn(Type.OBJECT));&#xA;  InstructionHandle ih_26 = il.append(new PUSH(_cp, &quot;equals&quot;)); // Return &quot;equals&quot; string&#xA;  il.append(InstructionFactory.createReturn(Type.OBJECT));&#xA;  if_icmple_2.setTarget(ih_13);&#xA;  if_icmpge_15.setTarget(ih_26);&#xA;  method.setMaxStack();&#xA;  method.setMaxLocals();&#xA;  _cg.addMethod(method.getMethod());&#xA;  il.dispose();&#xA;}&#xA;</code></pre>&#xA;"
22357244,2,1669,"2014-03-12 16:05:12",1,NULL,"<p>Not included in the list so far is this book:<p></p>&#xA;&#xA;<p><a href=&quot;http://www.diku.dk/~torbenm/Basics/&quot; rel=&quot;nofollow&quot;>Basics of Compiler Design (Torben Mogensen)</a>&#xA;(from the dept. of Computer Science, University of Copenhagen)<p></p>&#xA;&#xA;<p>I'm also interested in learning about compilers and plan to enter that industry in the next couple of years. This book is the ideal theory book to begin learning compilers as far as I can see. It's FREE to copy and reproduce, cleanly and carefully written and gives it to you in plain English without any code but still presents the mechanics by way of instructions and diagrams etc. Worth a look imo. </p>&#xA;"
22811770,2,1669,"2014-04-02 12:39:16",1,NULL,"<p>If you're not just looking for books, but also interested in web sites that have articles on the topic, I've blogged about various aspects of creating a programming language. Most of the posts can be found in my blog's &quot;Language Design&quot; category: <a href=&quot;http://orangejuiceliberationfront.com/category/language-design/&quot; rel=&quot;nofollow&quot;>http://orangejuiceliberationfront.com/category/language-design/</a></p>&#xA;&#xA;<p>In particular, I cover generating Intel machine code manually, automatically generating machine- or bytecode, creating a bytecode interpreter, writing an object-oriented runtime, creating a simple loader, and writing a simple mark/sweep garbage collector. All of this in a very practical and pragmatic way instead of boring you with lots of theory.</p>&#xA;&#xA;<p>Would appreciate feedback on these.</p>&#xA;"
1713,2,1711,"2008-08-04 23:51:08",1749,NULL,"<ul>&#xA;<li><em>Code Complete</em> (2nd edition) by Steve McConnell</li>&#xA;<li><em>The Pragmatic Programmer</em></li>&#xA;<li><em>Structure and Interpretation of Computer Programs</em></li>&#xA;<li><em>The C Programming Language</em> by Kernighan and Ritchie</li>&#xA;<li><em>Introduction to Algorithms</em> by Cormen, Leiserson, Rivest &amp; Stein</li>&#xA;<li><em>Design Patterns</em> by the Gang of Four</li>&#xA;<li><em>Refactoring: Improving the Design of Existing Code</em></li>&#xA;<li><em>The Mythical Man Month</em></li>&#xA;<li><em>The Art of Computer Programming</em> by Donald Knuth</li>&#xA;<li><em>Compilers: Principles, Techniques and Tools</em> by Alfred V. Aho, Ravi Sethi and Jeffrey D. Ullman</li>&#xA;<li><em>Gödel, Escher, Bach</em> by Douglas Hofstadter</li>&#xA;<li><em>Clean Code: A Handbook of Agile Software Craftsmanship</em> by Robert C. Martin</li>&#xA;<li><em>Effective C++</em></li>&#xA;<li><em>More Effective C++</em></li>&#xA;<li><em>CODE</em> by Charles Petzold</li>&#xA;<li><em>Programming Pearls</em> by Jon Bentley</li>&#xA;<li><em>Working Effectively with Legacy Code</em> by Michael C. Feathers</li>&#xA;<li><em>Peopleware</em> by Demarco and Lister</li>&#xA;<li><em>Coders at Work</em> by Peter Seibel</li>&#xA;<li><em>Surely You're Joking, Mr. Feynman!</em></li>&#xA;<li><em>Effective Java</em> 2nd edition</li>&#xA;<li><em>Patterns of Enterprise Application Architecture</em> by Martin Fowler</li>&#xA;<li><em>The Little Schemer</em></li>&#xA;<li><em>The Seasoned Schemer</em></li>&#xA;<li><em>Why's (Poignant) Guide to Ruby</em></li>&#xA;<li><em>The Inmates Are Running The Asylum: Why High Tech Products Drive Us Crazy and How to Restore the Sanity</em></li>&#xA;<li><em>The Art of Unix Programming</em></li>&#xA;<li><em>Test-Driven Development: By Example</em> by Kent Beck</li>&#xA;<li><em>Practices of an Agile Developer</em></li>&#xA;<li><em>Don't Make Me Think</em></li>&#xA;<li><em>Agile Software Development, Principles, Patterns, and Practices</em> by Robert C. Martin</li>&#xA;<li><em>Domain Driven Designs</em> by Eric Evans</li>&#xA;<li><em>The Design of Everyday Things</em> by Donald Norman</li>&#xA;<li><em>Modern C++ Design</em> by Andrei Alexandrescu</li>&#xA;<li><em>Best Software Writing I</em> by Joel Spolsky</li>&#xA;<li><em>The Practice of Programming</em> by Kernighan and Pike</li>&#xA;<li><em>Pragmatic Thinking and Learning: Refactor Your Wetware</em> by Andy Hunt</li>&#xA;<li><em>Software Estimation: Demystifying the Black Art</em> by Steve McConnel</li>&#xA;<li><em>The Passionate Programmer (My Job Went To India)</em> by Chad Fowler</li>&#xA;<li><em>Hackers: Heroes of the Computer Revolution</em></li>&#xA;<li><em>Algorithms + Data Structures = Programs</em></li>&#xA;<li><em>Writing Solid Code</em></li>&#xA;<li><em>JavaScript - The Good Parts</em></li>&#xA;<li><em>Getting Real</em> by 37 Signals</li>&#xA;<li><em>Foundations of Programming</em> by Karl Seguin</li>&#xA;<li><em>Computer Graphics: Principles and Practice in C</em> (2nd Edition)</li>&#xA;<li><em>Thinking in Java</em> by Bruce Eckel</li>&#xA;<li><em>The Elements of Computing Systems</em></li>&#xA;<li><em>Refactoring to Patterns</em> by Joshua Kerievsky</li>&#xA;<li><em>Modern Operating Systems</em> by Andrew S. Tanenbaum</li>&#xA;<li><em>The Annotated Turing</em></li>&#xA;<li><em>Things That Make Us Smart</em> by Donald Norman</li>&#xA;<li><em>The Timeless Way of Building</em> by Christopher Alexander</li>&#xA;<li><em>The Deadline: A Novel About Project Management</em> by Tom DeMarco</li>&#xA;<li><em>The C++ Programming Language (3rd edition)</em> by Stroustrup</li>&#xA;<li><em>Patterns of Enterprise Application Architecture</em></li>&#xA;<li><em>Computer Systems - A Programmer's Perspective</em></li>&#xA;<li><em>Agile Principles, Patterns, and Practices in C#</em> by Robert C. Martin</li>&#xA;<li><em>Growing Object-Oriented Software, Guided</em> by Tests</li>&#xA;<li><em>Framework Design Guidelines</em> by Brad Abrams</li>&#xA;<li><em>Object Thinking</em> by Dr. David West</li>&#xA;<li><em>Advanced Programming in the UNIX Environment</em> by W. Richard Stevens</li>&#xA;<li><em>Hackers and Painters: Big Ideas from the Computer Age</em></li>&#xA;<li><em>The Soul of a New Machine</em> by Tracy Kidder</li>&#xA;<li><em>CLR via C#</em> by Jeffrey Richter</li>&#xA;<li><em>The Timeless Way of Building</em> by Christopher Alexander</li>&#xA;<li><em>Design Patterns in C#</em> by Steve Metsker</li>&#xA;<li><em>Alice in Wonderland</em> by Lewis Carol</li>&#xA;<li><em>Zen and the Art of Motorcycle Maintenance</em> by Robert M. Pirsig</li>&#xA;<li><em>About Face - The Essentials of Interaction Design</em></li>&#xA;<li><em>Here Comes Everybody: The Power of Organizing Without Organizations</em> by Clay Shirky</li>&#xA;<li><em>The Tao of Programming</em></li>&#xA;<li><em>Computational Beauty of Nature</em></li>&#xA;<li><em>Writing Solid Code</em> by Steve Maguire</li>&#xA;<li><em>Philip and Alex's Guide to Web Publishing</em></li>&#xA;<li><em>Object-Oriented Analysis and Design with Applications</em> by Grady Booch</li>&#xA;<li><em>Effective Java</em> by Joshua Bloch</li>&#xA;<li><em>Computability</em> by N. J. Cutland</li>&#xA;<li><em>Masterminds of Programming</em></li>&#xA;<li><em>The Tao Te Ching</em></li>&#xA;<li><em>The Productive Programmer</em></li>&#xA;<li><em>The Art of Deception</em> by Kevin Mitnick</li>&#xA;<li><em>The Career Programmer: Guerilla Tactics for an Imperfect World</em> by Christopher Duncan</li>&#xA;<li><em>Paradigms of Artificial Intelligence Programming: Case studies in Common Lisp</em></li>&#xA;<li><em>Masters of Doom</em></li>&#xA;<li><em>Pragmatic Unit Testing in C# with NUnit</em> by Andy Hunt and Dave Thomas with Matt Hargett</li>&#xA;<li><em>How To Solve It</em> by George Polya</li>&#xA;<li><em>The Alchemist</em> by Paulo Coelho</li>&#xA;<li><em>Smalltalk-80: The Language and its Implementation</em></li>&#xA;<li><em>Writing Secure Code</em> (2nd Edition) by Michael Howard</li>&#xA;<li><em>Introduction to Functional Programming</em> by Philip Wadler and Richard Bird</li>&#xA;<li><em>No Bugs!</em> by David Thielen </li>&#xA;<li><em>Rework</em> by Jason Freid and DHH</li>&#xA;<li><em>JUnit in Action</em></li>&#xA;</ul>&#xA;"
1788,2,1711,"2008-08-05 01:25:47",8,NULL,"<p>@Peter Coulton -- you don't read Knuth, you study it.</p>&#xD;&#xA;&#xD;&#xA;<p>For me, and my work... <em>Purely Functional Data Structures</em> is great for thinking and developing with functional languages in mind.</p>"
2602,2,1711,"2008-08-05 17:28:25",4,NULL,"<p>Code Complete is the number one choice, but I'd also cite Gang of Four's Design Patterns and Craig Larman's Applying UML and Patterns.</p>&#xD;&#xA;&#xD;&#xA;<p>The Timeless Way of Building, by Christopher Alexander, is another great one.  Even though it's about archtecture, it's included in the bibliography of many great programming books I have already read.</p>&#xD;&#xA;&#xD;&#xA;<p>Another one, from which I'm learning lots of new things, is Data Access Patterns, by Clifton Nock.</p>"
8349,2,1711,"2008-08-11 23:52:04",6,NULL,"<p>I've been arounda while, so most books that I have found influential don't necessarily apply today.  I do believe it is universally important to understand the platform that you are developing for (both hardware and OS).  I also think it's important to learn from other peoples mistakes.  So two books I would recommend are:</p>&#xA;&#xA;<p><a href=&quot;http://rads.stackoverflow.com/amzn/click/0130828629&quot; rel=&quot;nofollow&quot;>Computing Calamities</a> and <a href=&quot;http://rads.stackoverflow.com/amzn/click/1590597214&quot; rel=&quot;nofollow&quot;>In Search of Stupidity: Over Twenty Years of High Tech Marketing Disasters</a></p>&#xA;"
20969,2,1711,"2008-08-21 19:54:14",6,NULL,"<p><a href=&quot;http://www.pragprog.com/the-pragmatic-programmer&quot; rel=&quot;nofollow&quot;>The Pragmatic Programmer: From Journeyman to Master</a> without a doubt. The advice in it is so well presented, and simple, that it comes across as if it was 'The Common Sense Programmer'. Love it.</p>&#xA;"
20977,2,1711,"2008-08-21 19:55:26",2,NULL,"<p><a href=&quot;http://rads.stackoverflow.com/amzn/click/020161622X&quot; rel=&quot;nofollow&quot;>Pragmatic Programmer</a></p>&#xA;"
20987,2,1711,"2008-08-21 19:58:25",9,NULL,"<p><a href=&quot;http://rads.stackoverflow.com/amzn/click/0131103628&quot; rel=&quot;nofollow&quot;>K&amp;R</a></p>&#xA;&#xA;<p>@Juan: I know Juan, I know - but there are some things that can only be learned by actually getting down to the task at hand. Speaking in abstract ideals all day simply makes you into an academic. It's in the application of the abstract that we truly grok the reason for their existence. :P</p>&#xA;&#xA;<p>@Keith: Great mention of &quot;The Inmates are Running the Asylum&quot; by Alan Cooper - an eye opener for certain, any developer that has worked with me since I read that book has heard me mention the ideas it espouses. +1</p>&#xA;"
21002,2,1711,"2008-08-21 20:02:08",7,NULL,"<p>The Mythical Man-Month by Fred Brooks&#xA;<a href=&quot;http://en.wikipedia.org/wiki/The_Mythical_Man-Month&quot; rel=&quot;nofollow&quot;><a href=&quot;http://en.wikipedia.org/wiki/The_Mythical_Man-Month&quot; rel=&quot;nofollow&quot;>http://en.wikipedia.org/wiki/The_Mythical_Man-Month</a></a></p>&#xA;"
21006,2,1711,"2008-08-21 20:02:29",6,NULL,"<p><a href=&quot;http://rads.stackoverflow.com/amzn/click/0596528124&quot; rel=&quot;nofollow&quot;>Mastering Regular Expressions</a></p>&#xA;"
21029,2,1711,"2008-08-21 20:08:22",5,NULL,"<p><a href=&quot;http://rads.stackoverflow.com/amzn/click/0201485672&quot; rel=&quot;nofollow&quot;>Refactoring</a></p>&#xA;"
21032,2,1711,"2008-08-21 20:10:00",2,NULL,"<p><a href=&quot;http://rads.stackoverflow.com/amzn/click/0131177052&quot; rel=&quot;nofollow&quot;>Working Effectively with Legacy Code</a> is a really amazing book that goes into great detail about how to properly unit test your code and what the true benefit of it is.  It really opened my eyes.</p>&#xA;"
21033,2,1711,"2008-08-21 20:10:11",0,NULL,"<p><a href=&quot;http://rads.stackoverflow.com/amzn/click/0201485672&quot; rel=&quot;nofollow&quot;>Refactoring</a></p>&#xA;&#xA;<p><a href=&quot;http://rads.stackoverflow.com/amzn/click/0321127420&quot; rel=&quot;nofollow&quot;>Patterns of Enterprise Application Architecture</a></p>&#xA;"
21161,2,1711,"2008-08-21 20:54:54",0,NULL,"<p><a href=&quot;http://rads.stackoverflow.com/amzn/click/1593271190&quot; rel=&quot;nofollow&quot;>Code Craft</a></p>&#xA;"
21203,2,1711,"2008-08-21 21:10:00",0,NULL,"<p>I have a couple of (rather old) blog posts on this subject</p>&#xA;&#xA;<ul>&#xA;<li><a href=&quot;http://www.spindriftpages.net/blog/dave/2005/11/17/c-books/&quot; rel=&quot;nofollow&quot;><a href=&quot;http://www.spindriftpages.net/blog/dave/2005/11/17/c-books/&quot; rel=&quot;nofollow&quot;>http://www.spindriftpages.net/blog/dave/2005/11/17/c-books/</a></a></li>&#xA;<li><a href=&quot;http://www.spindriftpages.net/blog/dave/2005/06/06/good-oo-books/&quot; rel=&quot;nofollow&quot;><a href=&quot;http://www.spindriftpages.net/blog/dave/2005/06/06/good-oo-books/&quot; rel=&quot;nofollow&quot;>http://www.spindriftpages.net/blog/dave/2005/06/06/good-oo-books/</a></a></li>&#xA;<li><a href=&quot;http://www.spindriftpages.net/blog/dave/2005/05/11/really-great-it-books/&quot; rel=&quot;nofollow&quot;><a href=&quot;http://www.spindriftpages.net/blog/dave/2005/05/11/really-great-it-books/&quot; rel=&quot;nofollow&quot;>http://www.spindriftpages.net/blog/dave/2005/05/11/really-great-it-books/</a></a></li>&#xA;<li>Although a good book I found Code&#xA;Complete to be rather a dull read (a&#xA;controversial view I admit).</li>&#xA;<li>I like&#xA;Jeffery Richter and the books Joel&#xA;Spolksy has written</li>&#xA;<li>The Eric Meyer CSS books are really good too</li>&#xA;</ul>&#xA;"
21217,2,1711,"2008-08-21 21:19:09",6,NULL,"<p>In no particular order except how they're arranged on my bookshelf:</p>&#xA;&#xA;<ul>&#xA;<li><em>The Pragmatic Programmer</em></li>&#xA;<li><em>Rafactoring</em> by Fowler</li>&#xA;<li><em>Working Effectively with Legacy Code</em> by Feathers. This is practically a companion volume to <em>Refactoring</em>.</li>&#xA;<li><em>UML Distilled</em> by Fowler. Among its other virtues is brevity.</li>&#xA;<li><em>Debugging the Development Process</em> by Steve Maguire</li>&#xA;<li><em>Design Patterns</em> (aka &quot;Gang of Four&quot;) by Gamma et al</li>&#xA;</ul>&#xA;"
21225,2,1711,"2008-08-21 21:26:42",1,NULL,"<p>Implementation Patterns by Kent Beck.</p>&#xA;&#xA;<p><img src=&quot;http://ecx.images-amazon.com/images/I/51JHn-6oNwL._SL500_AA240_.jpg&quot; alt=&quot;alt text&quot; /></p>&#xA;&#xA;<p>You can learn how to communicate people with programming.</p>&#xA;"
26388,2,1711,"2008-08-25 16:53:34",1,NULL,"<p>Deitel and Deitel, &quot;C++: How to Program&quot;</p>&#xA;&#xA;<p>XUnit Test Patterns</p>&#xA;"
26409,2,1711,"2008-08-25 17:02:29",2,NULL,"<p>Read <a href=&quot;http://books.google.com/books?id=LjJcCnNf92kC&amp;dq=head+first+design+patterns&amp;pg=PP1&amp;ots=_9Z38Ii7uY&amp;sig=BQOPlemSK6VvYAapjbrHzCqr434&amp;hl=en&amp;sa=X&amp;oi=book_result&amp;resnum=4&amp;ct=result&quot; rel=&quot;nofollow&quot;>Head First Design Patterns</a> for a much more accessible introduction than the GoF book.  I remember feeling like I'd leveled up after each chapter.</p>&#xA;&#xA;<p>Kent Beck's <a href=&quot;http://books.google.com/books?hl=en&amp;id=gFgnde_vwMAC&amp;dq=Test+driven+development&amp;printsec=frontcover&amp;source=web&amp;ots=enExqwUtlH&amp;sig=UgEMnH7P4D54RuSltQctG_NiDh8&amp;sa=X&amp;oi=book_result&amp;resnum=6&amp;ct=result&quot; rel=&quot;nofollow&quot;>Test Driven Development by Example</a> for TDD.</p>&#xA;"
29268,2,1711,"2008-08-27 00:46:53",0,NULL,"<p>In addition to other people's suggestions, I'd recommend either acquiring a copy of SICP, or <a href=&quot;http://mitpress.mit.edu/sicp/full-text/book/book.html&quot; rel=&quot;nofollow&quot;>reading it online</a>. It's one of the few books that I've read that I feel <em>greatly</em> increased my skill in designing software, particularly in creating good abstraction layers.</p>&#xA;&#xA;<p>A book that is not <em>directly</em> related to programming, but is also a good read for programmers (IMO) is <a href=&quot;http://rads.stackoverflow.com/amzn/click/0201558025&quot; rel=&quot;nofollow&quot;>Concrete Mathematics</a>. Most, if not all of the topics in it are useful for programmers to know about, and it does a better job of explaining things than any other math book I've read to date.</p>&#xA;"
29273,2,1711,"2008-08-27 00:50:04",2,NULL,"<p>I'm a big fan of most titles by Robert C. Martin, especially <a href=&quot;http://rads.stackoverflow.com/amzn/click/0135974445&quot; rel=&quot;nofollow&quot;>Agile Software Development, Principles, and Practices</a> and <a href=&quot;http://rads.stackoverflow.com/amzn/click/0132350882&quot; rel=&quot;nofollow&quot;>Clean Code: A Handbook of Agile Software Craftsmanship</a>.</p>&#xA;"
29282,2,1711,"2008-08-27 00:59:15",0,NULL,"<p><a href=&quot;http://rads.stackoverflow.com/amzn/click/0201699699&quot; rel=&quot;nofollow&quot;>Agile Software Development</a> by Alistair Cockburn</p>&#xA;"
29338,2,1711,"2008-08-27 01:42:43",7,NULL,"<p>I think that &quot;The Art of Unix Programming&quot; is an excellent book, by an excellent hacker/brilliant mind as Eric S. Raymond, who tries to make us understand a few principles of software design (simplicity mainly). This book is a must for every programming who is about to start a project under Unix platform.</p>&#xA;"
31438,2,1711,"2008-08-28 00:41:35",6,NULL,"<p>Mr. Bunny's Guide To ActiveX</p>&#xA;"
33154,2,1711,"2008-08-28 19:13:28",6,NULL,"<p>I have a few good books that strongly influenced me that I've not seen on this list so far:</p>&#xA;&#xA;<p><em><a href=&quot;http://rads.stackoverflow.com/amzn/click/0465067093&quot; rel=&quot;nofollow&quot;>The Psychology of Everyday Things</a></em> by Donald Norman.  The general principles of design for other people.  This may seem to be mostly good for UI but if you think about it, it has applications almost anywhere there is an interface that someone besides the original developer has to work with; e. g. an API and designing the interface in such a way that other developers form the correct mental model and get appropriate feedback from the API itself. </p>&#xA;&#xA;<p><em><a href=&quot;http://rads.stackoverflow.com/amzn/click/0471469122&quot; rel=&quot;nofollow&quot;>The Art of Software Testing</a></em> by Glen Myers.  A good, general introduction to testing software; good for programmers to read to help them think like a tester i. e. think of what may go wrong and prepare for it.</p>&#xA;&#xA;<p>By the way, I realize the question was the &quot;Single Most Influential Book&quot; but the discussion seems to have changed to listing good books for developers to read so I hope I can be forgiven for listing two good books rather than just one.</p>&#xA;"
33671,2,1711,"2008-08-28 23:47:12",7,NULL,"<p>While I agree that many of the books above are must-reads (Pragmatic Programmer, Mythical Man-Month, Art of Computer Programming, and SICP come to mind immediately), I'd like to go in a slightly different direction and recommend <a href=&quot;http://rads.stackoverflow.com/amzn/click/013215871X&quot; rel=&quot;nofollow&quot; title=&quot;A Discipline of Programming&quot;>A Discipline of Programming</a> by Edsger Dijkstra. Even though it's 32 years old, the emphasis on &quot;design for verifiability&quot; is highly relevant (even if &quot;verifiability&quot; means &quot;proof&quot; instead &quot;unit tests&quot;).</p>&#xA;"
38113,2,1711,"2008-09-01 16:22:54",4,NULL,"<p>I recently read <a href=&quot;http://rads.stackoverflow.com/amzn/click/1400082471&quot; rel=&quot;nofollow&quot;>Dreaming in Code</a> and found it to be an interesting read. Perhaps more so since the day I started reading it Chandler 1.0 was released. Reading about the growing pains and mistakes of a project team of talented people trying to &quot;change the world&quot; gives you a lot to learn from. Also Scott brings up a lot of programmer lore and wisdom in between that's just an entertaining read.</p>&#xA;&#xA;<p><a href=&quot;http://rads.stackoverflow.com/amzn/click/0596510047&quot; rel=&quot;nofollow&quot;>Beautiful Code</a> had one or two things that made me think differently, particularly the chapter on top down operator precedence.</p>&#xA;"
42972,2,1711,"2008-09-04 01:10:24",1,NULL,"<p><a href=&quot;http://www.code-is-law.org/&quot; rel=&quot;nofollow&quot;>Code is Law</a> - you are doing all this writing, editing, and thinking in [language of your choice] but WHY? What does you code MEAN? What will does it actually DO?</p>&#xA;&#xA;<p>(I could have recommended a book on QA, but I didn't...)</p>&#xA;"
47601,2,1711,"2008-09-06 16:06:15",1,NULL,"<p><a href=&quot;http://www.apress.com/book/view/1590599217&quot; rel=&quot;nofollow&quot;>Pro Spring</a> is a superb introduction to the world of Inversion of Control and Dependency Injection. If you're not aware of these practices and their implications - the balance of topics and technical detail in Pro Spring is excellent. It builds a great case and consequent personal foundation.</p>&#xA;&#xA;<p>Another book I'd suggest would be Robert Martin's <a href=&quot;http://rads.stackoverflow.com/amzn/click/0135974445&quot; rel=&quot;nofollow&quot;>Agile Software Development</a> (ASD). Code smells, agile techniques, test driven dev, principles ... a well-written balance of many different programming facets.</p>&#xA;&#xA;<p>More traditional classics would include the infamous GoF <a href=&quot;http://rads.stackoverflow.com/amzn/click/0201633612&quot; rel=&quot;nofollow&quot;>Design Patterns</a>, Bertrand Meyer's <a href=&quot;http://rads.stackoverflow.com/amzn/click/0136291554&quot; rel=&quot;nofollow&quot;>Object Oriented Software Construction</a>, Booch's <a href=&quot;http://rads.stackoverflow.com/amzn/click/020189551X&quot; rel=&quot;nofollow&quot;>Object Oriented Analysis and Design</a>, <a href=&quot;http://www.amazon.com/s/ref=nb_ss_b?url=search-alias%3Dstripbooks&amp;field-keywords=scott+meyers&amp;x=0&amp;y=0&quot; rel=&quot;nofollow&quot;>Scott Meyer</a>'s &quot;<a href=&quot;http://rads.stackoverflow.com/amzn/click/0321334876&quot; rel=&quot;nofollow&quot;>Effective C++</a>'&quot; series and a lesser known book I enjoyed by Gunderloy, <a href=&quot;http://www.codertodeveloper.com/&quot; rel=&quot;nofollow&quot;>Coder to Developer</a>.</p>&#xA;&#xA;<p>And while books are nice ... don't forget <a href=&quot;http://www.se-radio.net/&quot; rel=&quot;nofollow&quot;>radio</a>!</p>&#xA;&#xA;<p>... let me add one more thing. If you haven't already discovered <a href=&quot;http://safari.oreilly.com/0735619670&quot; rel=&quot;nofollow&quot;>safari</a> - take a look. It is more addictive than stack overflow :-) I've found that with my google type habits - I need the more expensive subscription so I can look at any book at any time - but I'd recommend the trial to anyone even remotely interested.</p>&#xA;&#xA;<p>(ah yes, a little obj-C today, cocoa tomorrow, patterns? soa? what was that example in that cookbook? What did Steve say in the <a href=&quot;http://safari.oreilly.com/0735619670&quot; rel=&quot;nofollow&quot;>second edition</a>? Should I buy this book? ... a subscription like this is great if you'd like some continuity and context to what you're googling ...)</p>&#xA;"
48191,2,1711,"2008-09-07 06:12:33",4,NULL,"<p><a href=&quot;http://stackoverflow.com/questions/559/what-books-would-you-recommend-for-a-beginning-software-developer#1150&quot;>Debugging the Development Process: Practical Strategies for Staying Focused, Hitting Ship Dates, and Building Solid Teams</a> by Steve Maguire.</p>&#xA;&#xA;<p>No-non-sense, down-to-earth, entertaining, profound.</p>&#xA;"
49088,2,1711,"2008-09-08 02:59:38",2,NULL,"<p>I found &quot;The art of Prolog&quot; a very good read.</p>&#xA;"
49139,2,1711,"2008-09-08 03:55:09",2,NULL,"<p>I think I grew up in a different generation than most here....</p>&#xA;&#xA;<p>One of the most influential books I read, was <a href=&quot;http://www.kohala.com/start/apue.html&quot; rel=&quot;nofollow&quot;>APUE</a>.</p>&#xA;&#xA;<p>Or pretty much anything by W. Richard Stevens.</p>&#xA;"
53240,2,1711,"2008-09-10 00:42:44",2,NULL,"<p>Roger S. Pressman - Software Engineering (A Practitioners Approach). It has got a lot of usefull information.</p>&#xA;"
54322,2,1711,"2008-09-10 15:07:58",5,NULL,"<p>This one isnt really a book for the beginning programmer, but if you're looking for SOA design books, then <a href=&quot;http://rads.stackoverflow.com/amzn/click/0596529554&quot; rel=&quot;nofollow&quot;>SOA in Practice: The Art of Distributed System Design</a> is for you.</p>&#xA;"
55741,2,1711,"2008-09-11 03:15:36",6,NULL,"<p>Do users ever touch your code? If you're not doing solely back-end work, I recommend <a href=&quot;http://rads.stackoverflow.com/amzn/click/0470084111&quot; rel=&quot;nofollow&quot;>About Face: The Essentials of User Interface Design</a> — now in its third edition (linked). I used to think my users were stupid because they didn't &quot;get&quot; my interfaces. I was, of course, wrong. About Face turned me around. </p>&#xA;"
58067,2,1711,"2008-09-12 01:06:13",0,NULL,"<p>Not a programming book, but still a very important book every programmer should read:</p>&#xA;&#xA;<p><a href=&quot;http://rads.stackoverflow.com/amzn/click/0670879835&quot; rel=&quot;nofollow&quot;>Orbiting the Giant Hairball by Gordon MacKenzie</a></p>&#xA;"
60634,2,1711,"2008-09-13 15:53:00",7,NULL,"<p><a href=&quot;http://rads.stackoverflow.com/amzn/click/1593271190&quot; rel=&quot;nofollow&quot;>Code Craft</a> by Pete Goodliffe is a good read!</p>&#xA;&#xA;<p><img src=&quot;http://ecx.images-amazon.com/images/I/51WZ9AEC3GL._SL500_BO2,204,203,200_PIsitb-dp-500-arrow,TopRight,45,-64_OU01_AA240_SH20_.jpg&quot; alt=&quot;Code Craft&quot; /></p>&#xA;"
65407,2,1711,"2008-09-15 18:25:04",5,NULL,"<p>Software Tools by by Brian W. Kernighan and P. J. Plauger</p>&#xA;&#xA;<p>It had a profound influence on how I write software.</p>&#xA;"
66619,2,1711,"2008-09-15 20:29:42",3,NULL,"<p>to get advanced in prolog i like these two books:</p>&#xA;&#xA;<p><a href=&quot;http://rads.stackoverflow.com/amzn/click/0262193388&quot; rel=&quot;nofollow&quot;>The Art of Prolog</a></p>&#xA;&#xA;<p><a href=&quot;http://rads.stackoverflow.com/amzn/click/0262512270&quot; rel=&quot;nofollow&quot;>The Craft of Prolog</a></p>&#xA;&#xA;<p>really opens the mind for logic programming and recursion schemes.</p>&#xA;"
68453,2,1711,"2008-09-16 01:12:01",1,NULL,"<p>Here are two I haven't seen mentioned:<br />&#xA;I wish I had read &quot;<a href=&quot;http://rads.stackoverflow.com/amzn/click/0201423391&quot; rel=&quot;nofollow&quot;>Ruminations on C++</a>&quot; by Koenig and Moo much sooner.  That was the book that made OO concepts really click for me.<br />&#xA;And I recommend Michael Abrash's &quot;Zen of Code Optimization&quot; for anyone else planning on starting a programming career in the mid 90s.  </p>&#xA;"
69157,2,1711,"2008-09-16 03:25:30",8,NULL,"<p>&quot;The World is Flat&quot; by Thomas Friedman. </p>&#xA;&#xA;<p>Excellence in programming demands an investment of mental energy and a dedication to continued learning comparable to the professions of medicine or law. It pays a fraction of what those professions pay, much less the wages paid to the mathematically savvy who head into the finance sector. And wages for <em>constructing code</em> are eroding because it's a profession that is <em>relatively</em> easy for the intelligent and self-disciplined in most economies to enter.</p>&#xA;&#xA;<p>Programming has already eroded to the point of paying less than, say, plumbing. Plumbing can't be &quot;offshored.&quot; You don't need to pay $2395 to attend the Professional Plumber's Conference every other year for the privilege of receiving an entirely new set of plumbing technologies that will take you a year to learn. </p>&#xA;&#xA;<p>If you live in North America or Europe, are young, and are smart, programming is not a rational career choice. Businesses that <em>involve</em> programming, absolutely. Study business, know enough about programming to refine your BS detector: brilliant. But dedicating the lion's share of your mental energy to the mastery of libraries, data structures, and algorithms? That only makes sense if programming is something more to you than an economic choice.</p>&#xA;&#xA;<p>If you <em>love</em> programming and for that reason intend to make it your career, then it behooves you to develop a cold-eyed understanding of the forces that are, and will continue, to make it a harder and harder profession in which to make a living. &quot;The World is Flat&quot; won't teach you what to name your variables, but it will immerse you for 6 or 8 hours in economic realities that have <em>already</em> arrived. If you can read it, and not get scared, <em>then</em> go out and buy &quot;Code Complete.&quot;</p>&#xA;"
72432,2,1711,"2008-09-16 13:51:01",9,NULL,"<p><a href=&quot;http://norvig.com/paip.html&quot;>Paradigms of Artificial Intelligence Programming</a>: Case Studies in Common Lisp by Peter Norvig</p>&#xA;&#xA;<p><img src=&quot;http://i.stack.imgur.com/n9oXc.jpg&quot; alt=&quot;enter image description here&quot;></p>&#xA;&#xA;<p>I started reading it because I wanted to learn Common Lisp. When I was halfway, I realized this was the greatest book about programming I had read so far.</p>&#xA;"
72440,2,1711,"2008-09-16 13:51:35",3,NULL,"<p>It's not strictly a development book and I believe that I've mentioned it in another answer somewhere but it's a book I really believe all developers should read, from php to Java to assembly developers.</p>&#xA;&#xA;<p><a href=&quot;http://rads.stackoverflow.com/amzn/click/0735611319&quot; rel=&quot;nofollow&quot;>Code</a></p>&#xA;&#xA;<p>It really brings together what's under the hood in a computer, why memory shouldn't be wasted and some of the more interesting parts of the history of computing. It's an introduction to the computer and what it is. It gave me my ultimate passion for low level programming and helped me understand pointers and memory more than any other computer.</p>&#xA;"
72490,2,1711,"2008-09-16 13:54:15",1,NULL,"<p>Modern C++ Design by Andrei Alexandrescu</p>&#xA;"
72505,2,1711,"2008-09-16 13:55:06",3,NULL,"<p>I think code complete is going to be a hugely popular one for this question, for me it corrected many of my bad habits and re-affirmed my good practices.</p>&#xA;&#xA;<p>Also for my Perl background I really like Perl Best Practices from Damian Conway. Perl can be a nasty language if you don't use style and best practices, which is what I was seeing in the scripts I was reading ( and sometimes writing ) .</p>&#xA;&#xA;<p>I like the Head First Series, they are quite good and easy to read when your are not in the mood for more serious style books.</p>&#xA;"
72585,2,1711,"2008-09-16 14:01:50",1,NULL,"<p>&quot;Object-Oriented Analysis and Design with Applications&quot; by Grady Booch. I read this a long time ago and it showed me that there could be a methodology to developing Object Oriented Software. Since then many other books have had an impact on me but this one got me started.</p>&#xA;"
72594,2,1711,"2008-09-16 14:02:17",0,NULL,"<p>The <a href=&quot;http://rads.stackoverflow.com/amzn/click/1852335475&quot; rel=&quot;nofollow&quot;>Interpretation of Object-Oriented Programming Languages</a> by Ian Craig</p>&#xA;&#xA;<p>Because it showed me how much more there was to OO than standard C++/Java idioms</p>&#xA;"
72739,2,1711,"2008-09-16 14:14:55",0,NULL,"<p>Thinking in Java (Patterns) , Bruce Eckel</p>&#xA;"
72812,2,1711,"2008-09-16 14:19:43",1,NULL,"<p>Mine is <a href=&quot;http://rads.stackoverflow.com/amzn/click/0321146530&quot; rel=&quot;nofollow&quot;>Test Driven Development by Example</a></p>&#xA;"
72813,2,1711,"2008-09-16 14:20:06",4,NULL,"<p><a href=&quot;http://www.poppendieck.com/ld.htm&quot; rel=&quot;nofollow&quot;>Lean Software Development</a> by Mary and Tom Poppendieck is definitely one for every developers bookshelf</p>&#xA;"
72876,2,1711,"2008-09-16 14:25:32",3,NULL,"<p><a href=&quot;http://rads.stackoverflow.com/amzn/click/0321503619&quot; rel=&quot;nofollow&quot;>Cocoa Programming</a> for Mac OS X by Aaron Hillegass</p>&#xA;"
72905,2,1711,"2008-09-16 14:28:04",2,NULL,"<p>It's a toss up between Head First Design Patterns, for many of the reasons cited above, and Perl Testing: A Developer's Notebook, which should be one of the bibles for any Perl programmer wanting to write maintainable code.</p>&#xA;"
72974,2,1711,"2008-09-16 14:33:43",4,NULL,"<p><a href=&quot;http://rads.stackoverflow.com/amzn/click/0321334876&quot; rel=&quot;nofollow&quot;>Effective C++</a> and <a href=&quot;http://rads.stackoverflow.com/amzn/click/020163371X&quot; rel=&quot;nofollow&quot;>More Effective C++</a> by Scott Myers. </p>&#xA;"
73122,2,1711,"2008-09-16 14:46:04",0,NULL,"<p><a href=&quot;http://samizdat.mines.edu/howto/HowToBeAProgrammer.html&quot; rel=&quot;nofollow&quot;>'How to be a Programmer: A Short, Comprehensive, and Personal Summary'</a> by <em>Robert L Read</em></p>&#xA;&#xA;<p>Not exactly a book but an essay, but this one was definitely an inspiration for me when I got into coding. Loved the notion of entering a tribe. Worth a read.</p>&#xA;"
73228,2,1711,"2008-09-16 14:55:09",2,NULL,"<p>Win32 Programming by Charles Petzold</p>&#xA;"
73235,2,1711,"2008-09-16 14:55:24",6,NULL,"<p><a href=&quot;http://rads.stackoverflow.com/amzn/click/1556159005&quot;>Rapid Development</a> by McConnell</p>&#xA;"
73376,2,1711,"2008-09-16 15:08:37",2,NULL,"<p>I suppose we could ask the <a href=&quot;http://stackoverflow.com/questions/1711/&quot;>same top rated question</a> every couple of weeks and upmod all those who mention <a href=&quot;http://cc2e.com/&quot; rel=&quot;nofollow&quot;>code complete</a> or <a href=&quot;http://www.pragprog.com/titles/tpp/the-pragmatic-programmer&quot; rel=&quot;nofollow&quot;>The Pragmatic Programmer</a>. </p>&#xA;&#xA;<p>Not that there is anythng wrong with it :-)</p>&#xA;"
73623,2,1711,"2008-09-16 15:32:10",2,NULL,"<p>&quot;<em>The Design and Evolution of C++</em>&quot; by Bjarne Stroustrup</p>&#xA;&#xA;<p>Besides giving much background on C++, it is also a lengthy study on the trade-offs and design concerns involved in a large scale program.</p>&#xA;&#xA;<p><a href=&quot;http://search.barnesandnoble.com/The-Design-and-Evolution-of-C/Bjarne-Stroustrup/e/9780201543308/?itm=1&quot; rel=&quot;nofollow&quot;>BN.com</a></p>&#xA;"
73778,2,1711,"2008-09-16 15:46:22",1,NULL,"<p><strong>Learning C# 2005</strong>, by Jesse Liberty &amp; Brian MacDonald (O'Reilly).</p>&#xA;&#xA;<p>ISBN 10: 0-596-10209-7.</p>&#xA;&#xA;<p>When I first made the jump from ASP classic procedural code to object-oriented C# code in VS2005, this book set me on the right path.</p>&#xA;"
73822,2,1711,"2008-09-16 15:50:14",2,NULL,"<p>While not strictly a software development book, I would highly recommend that <a href=&quot;http://rads.stackoverflow.com/amzn/click/0321344758&quot; rel=&quot;nofollow&quot;>Don't Make me Think!</a> be considered in this list.</p>&#xA;"
73880,2,1711,"2008-09-16 15:55:17",1,NULL,"<p>Software Tools by Brian W. Kernighan and  P. J. Plauger by a wide margin had the most effect on me.</p>&#xA;"
74118,2,1711,"2008-09-16 16:15:45",1,NULL,"<p>Inside the C++ Object Model by Stan Lippman. It made C++ finally &quot;click&quot; for me, before it was all &quot;magic&quot;. This book gave me a different frame of mind when approaching a new programming language.</p>&#xA;"
74245,2,1711,"2008-09-16 16:28:12",3,NULL,"<p><a href=&quot;http://en.wikipedia.org/wiki/The_Unix_Programming_Environment&quot; rel=&quot;nofollow&quot;>The Unix Programming Environment</a> by Kernighan and Pike.  </p>&#xA;&#xA;<p><img src=&quot;http://upload.wikimedia.org/wikipedia/en/thumb/4/43/English4.gif/180px-English4.gif&quot; alt=&quot;The Unix Programming Environment&quot; /></p>&#xA;&#xA;<p>More than any other book, it taught me the benefits in building small, easily-tested tools that can be combined to do big things.  </p>&#xA;"
74272,2,1711,"2008-09-16 16:33:02",4,NULL,"<p>Object-Oriented Software Construction by Bertrand Meyer</p>&#xA;"
74310,2,1711,"2008-09-16 16:36:39",2,NULL,"<p><strong>Expert C Programming: Deep C Secrets</strong> by <em>Peter Van Der Linden</em></p>&#xA;"
74424,2,1711,"2008-09-16 16:48:54",3,NULL,"<p>Extreme Programming by Kent Beck</p>&#xA;"
74643,2,1711,"2008-09-16 17:10:51",2,NULL,"<p>My high school math teacher lent me a copy of <a href=&quot;http://rads.stackoverflow.com/amzn/click/0932633161&quot; rel=&quot;nofollow&quot;>Are Your Lights Figure Problem</a> that I have re-read many times. It has been invaluable, as a developer, and in life generally. </p>&#xA;"
74710,2,1711,"2008-09-16 17:17:39",2,NULL,"<p>The question is, <em>&quot;What book really made an impact of how you work as a developer?&quot;</em>  Without any doubt, <strong>Programming Windows with MFC</strong>, by Jeff Prosise, is the book that had the greatest impact on HOW I work as a developer.  It did not teach me the fundamentals of &quot;programming&quot; but it opened the world of Windows platform development to me and many thousands of other developers.</p>&#xA;&#xA;<p>I had written a little Windows code previously in the &quot;Petzold style&quot; before MFC was developed.  I quickly decided the Windows platform we just not worth the trouble as a developer.  When Prosise came out with his MFC book, I realized (along with thousands of other non-Windows programmers) that I could create an easy to use interface that users would not just understand, but actually enjoy using.  I devoured the book, making so many notes in it and turning down so many corners, I eventually bought a second copy.  </p>&#xA;&#xA;<p>Prosise, Jeff. <em>Programming Windows with MFC 2nd Ed.</em>&#xA;Microsoft Press 1999&#xA;ISBN: 1-57231-695-0</p>&#xA;"
74983,2,1711,"2008-09-16 17:45:45",1,NULL,"<p>Object Oriented Analysis and Design - by Grady Booch</p>&#xA;"
75037,2,1711,"2008-09-16 17:51:30",0,NULL,"<p>The C++ Series of programming books by Deitel and Deitel</p>&#xA;"
75058,2,1711,"2008-09-16 17:53:26",1,NULL,"<p><strong>&quot;Thinking in C++&quot;</strong> by Bruce Eckel</p>&#xA;"
75219,2,1711,"2008-09-16 18:07:37",2,NULL,"<p>Domain Driven Design by Eric Evans</p>&#xA;"
75220,2,1711,"2008-09-16 18:07:37",0,NULL,"<p><a href=&quot;http://rads.stackoverflow.com/amzn/click/1558605703&quot; rel=&quot;nofollow&quot;>Managing Gigabytes</a> is an instant classic for thinking about the heavy lifting of information.</p>&#xA;"
75227,2,1711,"2008-09-16 18:08:12",0,NULL,"<p>C# for Experienced Programmers</p>&#xA;&#xA;<p>or really anything from Dietel &amp; Dietel. I have read several of their books, and everything has been awesome.</p>&#xA;"
75393,2,1711,"2008-09-16 18:22:48",0,NULL,"<p>Years ago, Bruce Eckel's Thinking in C++ taught me a great deal about C++ but also the importance of isolating an issue to a small 'sandbox' for study/analysis.  This technique has greatly impacted my career and routinely helps me troubleshoot problems both for myself and others.</p>&#xA;&#xA;<p>These days, I refer to Thinking in Java, which is written in the same style. Somehow, the style is beyond mere, simple 'examples' and profoundly gets at the heart of the issue.</p>&#xA;&#xA;<p>I am so grateful that I will buy virtually anything by Eckel, sight unseen.</p>&#xA;"
75436,2,1711,"2008-09-16 18:26:39",3,NULL,"<p><img src=&quot;http://ecx.images-amazon.com/images/I/519J3P8ANML._SL500_AA240_.jpg&quot;/></p>&#xA;&#xA;<p>Took my programing to a whole new level.</p>&#xA;"
75584,2,1711,"2008-09-16 18:41:54",0,NULL,"<p>When I first started, there was &quot;Mastering Turbo Pascal&quot; by Tom Swan.  There is nothing terribly profound about this book.  It was clear and concise with usable examples.  Based on this knowledge, I spawned a software development career now 15+ years in.</p>&#xA;"
75695,2,1711,"2008-09-16 18:55:40",1,NULL,"<p>Donald Norman, 'The Design of Everyday Things'</p>&#xA;&#xA;<p>Not about programming, per se, but about how things in the world should <em>work</em> -- kind of the psychology of usability.</p>&#xA;&#xA;<p>It's been invaluable for me in designing both end-user interfaces and APIs.</p>&#xA;"
75783,2,1711,"2008-09-16 19:04:12",0,NULL,"<p>Mastering C++ from Tom Swan.  It was the best kind of book, it had examples which were simple enough to teach concepts but useful enough to solve other problems.  It was very readable, it was the first book I read when got to college, and it only needed to be read once.</p>&#xA;"
76132,2,1711,"2008-09-16 19:41:58",0,NULL,"<p>&quot;Algorithms in C&quot; (1st edition) by Sedgewick taught me all about algorithms as well as teaching me all about the pitfalls of documentation and copy/pasting code as all the example code in this version was taken from the &quot;Algorithms in Pascal&quot; version and were simply passed through a simple code translator which did not adjust for the different indexing schemes.</p>&#xA;"
76365,2,1711,"2008-09-16 20:07:28",0,NULL,"<p>My all-time favorite was the C# Back Book, by Matthew Telles.</p>&#xA;"
76530,2,1711,"2008-09-16 20:21:42",0,NULL,"<p>&quot;The C++ Programming Language&quot; by Bjarne Stroustrup</p>&#xA;"
76678,2,1711,"2008-09-16 20:32:08",3,NULL,"<p><a href=&quot;http://rads.stackoverflow.com/amzn/click/078214327X&quot; rel=&quot;nofollow&quot;>Coder to Developer</a>, by Mike Gunderloy.</p>&#xA;"
77228,2,1711,"2008-09-16 21:17:05",0,NULL,"<p>Actually, two books stand out. The first was Code Complete. Despite its age, this is still a very useful book, and the chapter on the dangers of premature optimisation is worth the price of the book on its own. </p>&#xA;&#xA;<p>The second one was The Psychology of Everyday Things (now called The Design of Everyday Things, I think), which changed the way I think about user interfaces when designing applications. It made me more user-focused.</p>&#xA;"
77263,2,1711,"2008-09-16 21:22:06",2,NULL,"<p>Amiga ROM Kernel Manuals :)</p>&#xA;"
77850,2,1711,"2008-09-16 22:16:56",1,NULL,"<p><a href=&quot;http://rads.stackoverflow.com/amzn/click/0201834545&quot; rel=&quot;nofollow&quot;>Inside the C++ object model</a> by Stanley Lippman</p>&#xA;"
78751,2,1711,"2008-09-17 00:52:32",1,NULL,"<p><a href=&quot;http://openbookproject.net/thinkCSpy/index.xhtml&quot; rel=&quot;nofollow&quot;>How to think like a computer scientist: learning with python</a></p>&#xA;&#xA;<p>May not be the most advanced book on the world but it made me understand programming concepts that I couldn't, especially object oriented topics.</p>&#xA;"
78853,2,1711,"2008-09-17 01:11:23",2,NULL,"<p>This might not count as a &quot;development book&quot; but I have to throw it in anyway: Hackers by Stephen Levy.  I found that it spoke to the emotional side of programming.</p>&#xA;"
79649,2,1711,"2008-09-17 03:27:07",2,NULL,"<p>Separately, I'd mention <a href=&quot;http://www.thethirdmanifesto.com/&quot; rel=&quot;nofollow&quot;>The Third Manifesto</a> by Hugh Darwen and CJ Date. If you're interested in understanding <em>data</em> (which seems uncommon among programmers) this book is a must-read. It will also make you sad when you realize just how badly broken SQL is, but it'll also help you cope with that brokenness. Knowing how a tool is broken lets you design with those deficits in mind.</p>&#xA;"
80374,2,1711,"2008-09-17 05:49:22",1,NULL,"<p>The Pragmatic programmer was pretty good. However one that really made an impact when I was starting out was :</p>&#xA;&#xA;<p><a href=&quot;http://rads.stackoverflow.com/amzn/click/1568843186&quot; rel=&quot;nofollow&quot;>Windows 95 System Programming Secrets&quot;</a></p>&#xA;&#xA;<p>I know - it sounds and looks a bit cheesy on the outside and has probably dated a bit - but this was an awesome explanation of the internals of Win95 based on the Authors (Matt Pietrek)  investigations using his own own tools - the code for which came with the book. Bear in mind this was before the whole open source thing and Microsoft was still pretty cagey about releasing documentation of internals - let alone source. &#xA;There was some quote in there like &quot;If you are working through some problem and hit some sticking point then you need to stop and really look deeply into that piece and really understand how it works&quot;. I've found this to be pretty good advice - particularly these days when you often have the source for a library and can go take a look. &#xA;Its also inspired me to enjoy diving into the internals of how systems work, something that has proven invaluable over the course of my career.</p>&#xA;&#xA;<p>Oh and I'd also throw in effective .net - great internals explanation of .Net from Don Box.</p>&#xA;"
80893,2,1711,"2008-09-17 07:45:41",1,NULL,"<p>In recent years it has been 'The C++ Standard Library' by 'Nicolai M. Josuttis'.  It's my bible.</p>&#xA;&#xA;<p><img src=&quot;http://ecx.images-amazon.com/images/I/51BT5SKXTCL._SL500_AA240_.jpg&quot; alt=&quot;alt text&quot; /></p>&#xA;"
80944,2,1711,"2008-09-17 07:55:52",7,NULL,"<p>Martin Fowler's <strong><a href=&quot;http://rads.stackoverflow.com/amzn/click/0201485672&quot; rel=&quot;nofollow&quot;>Refactoring: Improving the Design of Existing Code</a></strong> has already been listed. But I will detail why it has impacted me.</p>&#xA;&#xA;<p>The essence of the whole book is about structuring code so that it is simpler to read and understand by <em>humans</em>. It teaches me strongly that the code that I write is meant for my colleagues and successors to consume and possibly learn something <em>good</em> out of it. It inspires me to consciously <a href=&quot;http://icelava.net/forums/post/1040.aspx&quot; rel=&quot;nofollow&quot;>program in a manner that leaves people praising my name, and not cursing me to damnation for all eternity</a>.</p>&#xA;"
81253,2,1711,"2008-09-17 08:53:51",2,NULL,"<p>Another book that has not been mentioned yet, and SHOULD be required reading for EVERY programmer, newbies on up to gurus, in ANY programming language, is Michael Howard's Writing Secure Code (2nd Edition) from MSPress.</p>&#xA;"
81276,2,1711,"2008-09-17 08:58:01",1,NULL,"<p>The first book that made a real impact on me was <em><a href=&quot;http://rads.stackoverflow.com/amzn/click/0672305267&quot; rel=&quot;nofollow&quot;>Mastering Turbo Assembler</a></em> by Tom Swan.</p>&#xA;&#xA;<p>Other books that have had an impact was <em><a href=&quot;http://rads.stackoverflow.com/amzn/click/0066620732&quot; rel=&quot;nofollow&quot;>Just For Fun</a></em> by Linus Torvalds and David Diamond and of course <em><a href=&quot;http://rads.stackoverflow.com/amzn/click/020161622X&quot; rel=&quot;nofollow&quot;>The Pragmatic Programmer</a></em> by Andrew Hunt and David Thomas.</p>&#xA;"
81470,2,1711,"2008-09-17 09:31:29",0,NULL,"<p><img src=&quot;http://g-ecx.images-amazon.com/images/G/01/ciu/31/89/d4ac024128a044c186a18010._AA207_.L.jpg&quot; alt=&quot;How to Solve it by computer&quot; /> - R.G.Dromey</p>&#xA;"
82446,2,1711,"2008-09-17 12:14:43",0,NULL,"<p>Probably &quot;C for Dummies&quot; vol 1, back in 1997 or so. Just an introduction really, but it was a good read after having picked up the taste for programming in GFA Basic on the Atari ST. The Coronado C tutorial around the same time helped too.</p>&#xA;"
82863,2,1711,"2008-09-17 12:58:34",2,NULL,"<p>for low level entertainment i would suggest <strong>Michael Abrash's</strong><br />&#xA;i) -Zen of Code Optimization- and<br />&#xA;ii) -Graphics Programming Black Book-<br />&#xA;even if you dont do any graphics programming. </p>&#xA;"
83579,2,1711,"2008-09-17 14:03:03",0,NULL,"<p>Michael Abrash  The Zen of Assembly Language</p>&#xA;"
83881,2,1711,"2008-09-17 14:34:25",0,NULL,"<p>Applying UML and Design Patterns.</p>&#xA;&#xA;<p>It helped design patterns to click with me, and provided a justification for UML that made sense to me in the phrasing 'UML as Sketch'. Namely that UML should be used as a brief sketch of the system that has the additional benefit of you not having to explain the notation to others (they either already know UML or you give them a UML book to read)</p>&#xA;"
86239,2,1711,"2008-09-17 18:40:03",0,NULL,"<p>The Algorithms book from Robert Sedgewick. A must-read for application developers.</p>&#xA;&#xA;<p>Comes in many flavours (C, C++, Java)</p>&#xA;&#xA;<p><a href=&quot;http://www.cs.princeton.edu/~rs/&quot; rel=&quot;nofollow&quot;>http://www.cs.princeton.edu/~rs/</a></p>&#xA;"
86779,2,1711,"2008-09-17 19:37:31",1,NULL,"<p>If you are doing anything in Unix/Linux/MacOS etc, you must read Advanced Programming in the Unix Environment (also known by the acronym APUE), by the late W Richard Stevens. If you don't know how file descriptors work or what sessions are, or all the things you should do when you daemonize yourself (admit it, you don't), then this book will tell you.</p>&#xA;&#xA;<p>You'll feel amatuerish for a bit afterwards, but if you want to consider yourself a professional programmer (in any language) in the Unix environment you need to read this.</p>&#xA;"
90266,2,1711,"2008-09-18 05:24:32",2,NULL,"<p>I would say that &quot;<a href=&quot;http://www.lifebeyondcode.com/&quot; rel=&quot;nofollow&quot;>Beyond Code - Learn to Distinguish Yourself in 9 Simple Steps</a>&quot; is quite a good and motivational book. I doesn't cover technical issues, but it describes ways of working with people, being professional, ... For me, this is a book you can read again and again if you are in need of some pep talk. Besides that, it is cheap and very easy and enjoyable to read in 3 to 4 hours.</p>&#xA;&#xA;<p>There is a little review over at <a href=&quot;http://www.herrodius.com/blog/54&quot; rel=&quot;nofollow&quot;>my blog</a>.</p>&#xA;"
109060,2,1711,"2008-09-20 19:17:47",1,NULL,"<p>Even though I had been programming rofessionally for years, Rocky Lhotka's &quot;Business Objects&quot; series about his CSLA framework was the book that opened my eyes.&#xA;<br/><br/>&#xA;His ideas he got me excited about software development patterns and theory again.  It set me on the path of a new interest in learning how to be a better developer, and not just learning about the latest gee-whiz control or library.  (Don't get me wrong, I still love a good technical book too - you gotta keep up!)</p>&#xA;"
109090,2,1711,"2008-09-20 19:30:43",1,NULL,"<p>I found the <a href=&quot;http://rads.stackoverflow.com/amzn/click/1848000693&quot; rel=&quot;nofollow&quot;>The Algorithm Design Manual</a> to be a very beneficial read. I also highly recommend <a href=&quot;http://rads.stackoverflow.com/amzn/click/0201657880&quot; rel=&quot;nofollow&quot;>Programming Pearls</a>.</p>&#xA;"
110019,2,1711,"2008-09-21 02:14:44",1,NULL,"<p>&quot;<a href=&quot;http://www.seas.gwu.edu/~kaufman1/FortranColoringBook/ColoringBkCover.html&quot; rel=&quot;nofollow&quot;>The Fortran Coloring Book</a>&quot; by <a href=&quot;http://www.seas.gwu.edu/~kaufman1/&quot; rel=&quot;nofollow&quot;>Dr. Roger Kaufman</a> (1978, ISBN:0262610264)</p>&#xA;&#xA;<p>What a silly concept - more basic than even a &quot;Dummies&quot; book!  But it works for any language (with a few fortran specific examples of course), explaining the basic concepts of logic, variables, i/o, etc. in a very understandable and &quot;Painfully Funny&quot; way.</p>&#xA;&#xA;<p>It's enough to get a ten year old interested in programming...</p>&#xA;&#xA;<p><img src=&quot;http://farm1.static.flickr.com/155/390132231%5F6600db7b54%5Fm.jpg&quot; alt=&quot;alt text&quot; /></p>&#xA;&#xA;<p>(Found cover photo on a <a href=&quot;http://www.flickr.com/photos/believekevin/390132231/&quot; rel=&quot;nofollow&quot;>Flickr user account</a>)</p>&#xA;"
119305,2,1711,"2008-09-23 05:48:05",7,NULL,"<p><img src=&quot;http://ecx.images-amazon.com/images/I/61dECNkdnTL._SL500_AA240_.jpg&quot; alt=&quot;alt text&quot; /></p>&#xA;&#xA;<p><a href=&quot;http://rads.stackoverflow.com/amzn/click/0136152503&quot; rel=&quot;nofollow&quot;>C++ How to Program</a> It is good for beginner.This is excellent book that full complete with 1500 pages.</p>&#xA;"
130593,2,1711,"2008-09-24 23:29:29",3,NULL,"<p>A Whole New Mind, by Daniel Pink.  Interesting take on the future of our industry.</p>&#xA;&#xA;<p>I assume most of the folks reading this will have read the books at the top of the list already.  So, i'll offer a book that takes a different look at our industry.</p>&#xA;&#xA;<p><img src=&quot;http://www.danpink.com/images/wnm.jpg&quot; alt=&quot;alt text&quot; /></p>&#xA;"
164941,2,1711,"2008-10-02 22:46:35",1,NULL,"<p>Anything by Edward Tufte: The Visual Display of Quantitative Information; Envisioning Information; Visual Explanations</p>&#xA;"
183713,2,1711,"2008-10-08 16:38:38",5,NULL,"<p></p>&#xA;&#xA;<p><a href=&quot;http://books.google.co.uk/books?hl=en&amp;id=3Ntz-UJzZN0C&amp;dq=facts+and+fallacies&amp;printsec=frontcover&amp;source=web&amp;ots=zeNETSf0qr&amp;sig=RoSzxFvdi7dohjf-qXGu3iDAmu8&amp;sa=X&amp;oi=book_result&amp;resnum=3&amp;ct=result&quot; rel=&quot;nofollow&quot;>Facts and Fallacies of Software Engineering by Robert L. Glass</a> is a really excellent book. I had been a professional hacker for almost 10 years before I read it, and a I still learned a ton of stuff.</p>&#xA;"
200877,2,1711,"2008-10-14 12:04:58",9,NULL,"<p><img src=&quot;http://ecx.images-amazon.com/images/I/51HCJ5R42KL._SL500_BO2,204,203,200_AA219_PIsitb-sticker-dp-arrow,TopRight,-24,-23_SH20_OU02_.jpg&quot; alt=&quot;Discrete Mathematics For Computer Scientists&quot; /></p>&#xA;&#xA;<p><a href=&quot;http://rads.stackoverflow.com/amzn/click/0201360616&quot; rel=&quot;nofollow&quot;>Discrete Mathematics For Computer Scientists</a> by J.K. Truss.</p>&#xA;&#xA;<p>While this doesn't teach you programming, it teaches you fundamental mathematics that every programmer should know. You may remember this stuff from university, but really, doing predicate logic will improve you programming skills, you need to learn Set Theory if you want to program using collections.</p>&#xA;&#xA;<p>There really is a lot of interesting information in here that can get you thinking about problems in different ways. It's handy to have, just to pick up once in a while to learn something new.</p>&#xA;"
215195,2,1711,"2008-10-18 15:55:54",1,NULL,"<p>If you write code in C then Expert C Programming is an eye opener. It has answers to all the things you wondered why it works this way. Peter Van Der Linden has a great writing style and makes arcane concepts very readable. A must read for all C developers</p>&#xA;"
238388,2,1711,"2008-10-26 18:15:46",7,NULL,"<p><a href=&quot;http://rads.stackoverflow.com/amzn/click/0812972155&quot; rel=&quot;nofollow&quot;>Masters of doom.</a> As far as motivation and love for your profession go: it won't get any better than what's been described in this book, truthfully inspiring story!</p>&#xA;"
249265,2,1711,"2008-10-30 04:23:11",1,NULL,"<p>Fortran IV with Watfor and Watfiv by Cress, Dirkson and Graham.</p>&#xA;&#xA;<p>This book taught me my first programming language that I programmed onto punch cards at the time. After 3 years, the book was all tatters because I had used it so much. </p>&#xA;&#xA;<p><img src=&quot;http://g-ecx.images-amazon.com/images/G/01/ciu/4b/83/245d9833e7a03768eaf63110._AA240_.L.jpg&quot; alt=&quot;alt text&quot; /></p>&#xA;&#xA;<p>Fortran was a great language! It had a super optimizer and produced very fast code. It is still very popular in Great Britain and FTN95 is now a very full-featured and capable compiler. I sometimes wish I could have continued to use it, but Delphi is a more than adequate replacement.</p>&#xA;"
263750,2,1711,"2008-11-04 22:40:29",4,NULL,"<p>Nobody seems to have mentioned Stroustup's <a href=&quot;http://www.research.att.com/~bs/3rd.html&quot; rel=&quot;nofollow&quot;>The C++ Programming Language</a> which is a great book that every C++ programmer should read.</p>&#xA;&#xA;<p>I also think that <a href=&quot;http://rads.stackoverflow.com/amzn/click/0321278658&quot; rel=&quot;nofollow&quot;>Extreme Programming Explained: Embrace Change</a> should be read by every programmer and manager. Many of the ideas in the book are common knowledge now but the book gives an intelligent and inspiring account of the pursuit of quality in software engineering.</p>&#xA;&#xA;<p>I would second the recommendations for Knuth and Gang of Four which are classics.</p>&#xA;"
283721,2,1711,"2008-11-12 11:56:11",3,NULL,"<p><a href=&quot;http://rads.stackoverflow.com/amzn/click/0131489062&quot; rel=&quot;nofollow&quot;>Applying UML and Patterns</a> by Craig Larman.</p>&#xA;&#xA;<p>The title of the book is slightly misleading; it does deal with UML and patterns, but it covers so much more. The subtitle of the book tells you a bit more: An Introduction to Object-Oriented Analysis and Design and Iterative Development.</p>&#xA;"
290363,2,1711,"2008-11-14 15:12:42",1,NULL,"<p><a href=&quot;http://allwrong.wordpress.com/2008/11/14/mini-book-review-graphics-programming-in-windows-charles-petzold/&quot; rel=&quot;nofollow&quot;>Graphics Programming in Windows</a> is difficult to fault.</p>&#xA;"
301122,2,1711,"2008-11-19 05:57:40",9,NULL,"<p><a href=&quot;http://rads.stackoverflow.com/amzn/click/0812906748&quot; rel=&quot;nofollow&quot;>Systemantics: How Systems Work and Especially How They Fail</a>. Get it used cheap. But you might not get the humor until you've worked on a few failed projects.</p>&#xA;&#xA;<p>The beauty of the book is the copyright year.</p>&#xA;&#xA;<p>Probably the most profound takeaway &quot;law&quot; presented in the book:</p>&#xA;&#xA;<p><em>The Fundamental Failure-Mode Theorem (F.F.T.): Complex systems usually operate in failure mode.</em></p>&#xA;&#xA;<p>The idea being that there are failing parts in any given piece of software that are masked by failures in other parts or by validations in other parts. See a real-world example at the <a href=&quot;http://en.wikipedia.org/wiki/Therac-25&quot; rel=&quot;nofollow&quot;>Therac-25 radiation machine</a>, whose software flaws were masked by hardware failsafes. When the hardware failsafes were removed, the software race condition that had gone undetected all those years resulted in the machine killing 3 people.</p>&#xA;"
304171,2,1711,"2008-11-20 02:31:39",4,NULL,"<p><a href=&quot;http://rads.stackoverflow.com/amzn/click/0201433079&quot; rel=&quot;nofollow&quot;>Advanced Programming in the UNIX Environment</a> by W. Richard Stevens.</p>&#xA;"
334872,2,1711,"2008-12-02 18:02:19",6,NULL,"<p>As I started out developing in Java (and am still doing so to this very day) I'd have to recommend the outstanding work in the field: <a href=&quot;http://www.mrbunny.com/&quot; rel=&quot;nofollow&quot;>Mr Bunny's Big Cup o' Java</a>.</p>&#xA;&#xA;<p>From the author's blurb:</p>&#xA;&#xA;<blockquote>&#xA;  <p>There is simply no better way to learn Java than to have the pineal gland of an expert Java programmer surgically implanted in your brain. Sadly, most HMOs refuse to pay for this career saving procedure, deeming Java to be too experimental. At last there is an alternative treatment for those of us who cannot wait for sweeping health care reforms.</p>&#xA;  &#xA;  <p>Mr. Bunny’s Big Cup O’ Java is recommended by n out of ten doctors, where n is any integer you wish to make up to impress an astoundingly gullible public. The book begins with an overview of the book, and quickly expands into the book itself. Just look at the topics covered:</p>&#xA;  &#xA;  <ul>&#xA;  <li>Java</li>&#xA;  </ul>&#xA;  &#xA;  <p>In short, MBBCOJ will teach you all you need to know for a successful career in today’s rabbit development environments.</p>&#xA;</blockquote>&#xA;&#xA;<p>The insight into pixels alone would have cut years off my software developing life.</p>&#xA;"
345603,2,1711,"2008-12-06 00:18:06",1,NULL,"<p>Etudes for Programmers by Charles Wetherell, More Programming Pearls (Jon Bently), </p>&#xA;"
371191,2,1711,"2008-12-16 12:43:15",9,NULL,"<p>Definitively Software Craftsmanship                                                                                </p>&#xA;&#xA;<p><img src=&quot;http://ecx.images-amazon.com/images/I/5186JKTDVWL._SL500_AA240_.jpg&quot; alt=&quot;alt text&quot;></p>&#xA;&#xA;<p>This book explains a lot of things about software engineering, system development. It's also extremly useful to understand the difference between different kind of product developement: web VS shrinkwrap VS IBM framework. What people had in mind when they conceived waterfall model? Read this and all we'll become clear (hopefully)</p>&#xA;"
378301,2,1711,"2008-12-18 16:00:29",3,NULL,"<p>For me it was <a href=&quot;http://rads.stackoverflow.com/amzn/click/0201715945&quot; rel=&quot;nofollow&quot;>Design Patterns Explained</a> it provided an 'Oh that's how it works' moment for me in regards to design patterns and has been very useful when teaching design patterns to others.</p>&#xA;"
378761,2,1711,"2008-12-18 18:34:49",1,NULL,"<p><strong>The Scelbi-Byte Primer</strong></p>&#xA;&#xA;<p>I pored over the source code listings in this book many times until, one day, I suddenly grokked 8080 assembly language programming.</p>&#xA;"
386338,2,1711,"2008-12-22 14:15:31",0,NULL,"<p><a href=&quot;http://rads.stackoverflow.com/amzn/click/1878739069&quot; rel=&quot;nofollow&quot;>Object-Oriented Programming in Turbo C++</a>.  Not super popular, but it was the one that got me started, and was the first book that really helped me grok what an object was.  Read this one waaaay back in high school.  It sort of brings a tear to my eye...</p>&#xA;"
413817,2,1711,"2009-01-05 17:14:58",1,NULL,"<ul>&#xA;<li><a href=&quot;http://rads.stackoverflow.com/amzn/click/1576104257&quot; rel=&quot;nofollow&quot;>Game Architecture and Design: Learn the Best Practices for Game Design and Programming</a> </li>&#xA;</ul>&#xA;&#xA;<p>Even though i've never programmed a game this book helped me understand a lot of things in a fun way.</p>&#xA;"
413824,2,1711,"2009-01-05 17:16:14",1,NULL,"<ul>&#xA;<li><a href=&quot;http://rads.stackoverflow.com/amzn/click/1861004958&quot; rel=&quot;nofollow&quot;>Professional JSP 2nd Edition</a></li>&#xA;</ul>&#xA;&#xA;<p>I bough this when I was a complete newbie and took me from only knowing that Java existed to a reliable team member in a short time</p>&#xA;"
440028,2,1711,"2009-01-13 17:50:49",1,NULL,"<p>Still a worthwhile classic is the <a href=&quot;http://homepage.mac.com/bradster/iarchitect/shame.htm&quot; rel=&quot;nofollow&quot;>Interface Hall of Shame</a>. This website detailed a huge assortment of interface design faux pas that is quite entertaining. The original iarchitect.com no longer exists, but others have re-established the HOS on their own websites.</p>&#xA;"
444828,2,1711,"2009-01-14 21:46:58",1,NULL,"<p>I'll add a couple that I haven't seen here that are influential for me:</p>&#xA;&#xA;<ul>&#xA;<li>Yourdon and Constantine, &quot;Structured Design&quot;. Everything you need to know about software design is in here, if you're willing to dig for it a little.</li>&#xA;<li>Leonard Koren, &quot;Wabi-Sabi: for Artists, Designers, Poets &amp; Philosophers&quot;. A pragmatic philosophy balancing beauty and pragmatism. </li>&#xA;</ul>&#xA;"
471147,2,1711,"2009-01-22 22:41:11",5,NULL,"<p>Not the most influential, but worth a look is <a href=&quot;http://rads.stackoverflow.com/amzn/click/0436205823&quot; rel=&quot;nofollow&quot;>Youth</a> by J.M.Coetzee.</p>&#xA;&#xA;<p>The narrator of Youth, a student in the South Africa of the 1950s, has long been plotting an escape from his native country: from the stifling love of his mother, from a father whose failures haunt him, and from what he is sure is impending revolution. Studying mathematics, reading poetry, saving money, he tries to ensure that when he arrives in the real world, wherever that may be, he will be prepared to experience life to its full intensity, and transform it into art. Arriving at last in London, however, he finds neither poetry nor romance. Instead he succumbs to the monotony of life as a computer programmer, from which random, loveless affairs offer no relief. Devoid of inspiration, he stops writing. An awkward colonial, a constitutional outsider, he begins a dark pilgrimage in which he is continually tested and continually found wanting.</p>&#xA;&#xA;<p><img src=&quot;http://img440.imageshack.us/img440/5140/youthgd4.jpg&quot; alt=&quot;youth cover&quot; /></p>&#xA;"
562308,2,1711,"2009-02-18 18:32:58",1,NULL,"<p><a href=&quot;http://rads.stackoverflow.com/amzn/click/069111966X&quot; rel=&quot;nofollow&quot;>How to Solve It: A new aspect of mathematical method</a>&#xA;Although not directly related to computer programming but it does teach you the art of problem solving and that's what computer programming is all about.</p>&#xA;"
633289,2,1711,"2009-03-11 04:06:23",0,NULL,"<p><a href=&quot;http://rads.stackoverflow.com/amzn/click/0470261293&quot; rel=&quot;nofollow&quot;>Beginning C# 3.0: An Introduction to Object Oriented Programming</a> </p>&#xA;&#xA;<p>This is the book for those who want to understand the whys and hows of OOP using C# 3.0. You don't want to miss it. </p>&#xA;"
639909,2,1711,"2009-03-12 18:31:29",2,NULL,"<p>I'm reading now <a href=&quot;http://rads.stackoverflow.com/amzn/click/0135974445&quot; rel=&quot;nofollow&quot;>Agile Software Development, Principles, Patterns and Practices</a>. For those interested in XP and Object-Oriented Design, this is a classic reading.</p>&#xA;&#xA;<p></p>&#xA;"
664822,2,1711,"2009-03-20 02:45:42",7,NULL,"<p>Here's an excellent book that is not as widely applauded, but is full of deep insight: <a href=&quot;http://rads.stackoverflow.com/amzn/click/0321482751&quot; rel=&quot;nofollow&quot;>Agile Software Development: The Cooperative Game</a>, by Alistair Cockburn. </p>&#xA;&#xA;<p>What's so special about it? Well, clearly everyone has heard the term &quot;Agile&quot;, and it seems most are believers these days. Whether you believe or not, though, there are some deep principles behind why the Agile movement exists. This book uncovers and articulates these principles in a precise, scientific way. Some of the principles are (btw, these are my words, not Alistair's):</p>&#xA;&#xA;<ol>&#xA;<li>The hardest thing about team software development is getting everyone's brains to have the same understanding. We are building huge, elaborate, complex systems which are invisible in the tangible world. The better you are at getting more peoples' brains to share deeper understanding, the more effective your team will be at software development. <strong>This is the underlying reason that pair programming makes sense. Most people dismiss it (and I did too initially), but with this principle in mind I highly recommend that you give it another shot. You wind up with TWO people who deeply understand the subsystem you just built ... there aren't many other ways to get such a deep information transfer so quickly. It is like a Vulcan mind meld.</strong></li>&#xA;<li>You don't always need words to communicate deep understanding quickly. And a corollary: too many words, and you exceed the listener/reader's capacity, meaning the understanding transfer you're attempting does not happen. Consider that children learn how to speak language by being &quot;immersed&quot; and &quot;absorbing&quot;. Not just language either ... he gives the example of some kids playing with trains on the floor. Along comes another kid who has never even <strong>SEEN</strong> a train before ... but by watching the other kids, he picks up the gist of the game and plays right along. This happens all the time between humans. This along with the corollary about too many words helps you see how misguided it was in the old &quot;waterfall&quot; days to try to write 700 page detailed requirements specifications.</li>&#xA;</ol>&#xA;&#xA;<p>There is so much more in there too. I'll shut up now, but I HIGHLY recommend this book!</p>&#xA;"
793395,2,1711,"2009-04-27 13:02:06",4,NULL,"<p>Three books come to mind for me.</p>&#xA;&#xA;<ul>&#xA;<li>The Art of Unix Programming by Eric S. Raymond.</li>&#xA;<li>The Wizardry Compiled by Rick Cook.</li>&#xA;<li>The Art of Computer Programming by Donald Knuth.</li>&#xA;</ul>&#xA;&#xA;<p>I also love the writing of <a href=&quot;http://www.paulgraham.com&quot; rel=&quot;nofollow&quot;>Paul Graham.</a></p>&#xA;"
793399,2,1711,"2009-04-27 13:04:38",1,NULL,"<p>An introduction to GW Basic. With out it I never would have learned how to program and any other books wouldn't have done me any good.</p>&#xA;"
793437,2,1711,"2009-04-27 13:14:32",0,NULL,"<p><a href=&quot;http://search.barnesandnoble.com/Ivor-Hortons-Beginning-Visual-C-2008/Ivor-Horton/e/9780470225905/?itm=2&quot; rel=&quot;nofollow&quot;>Beginning Visual C++</a></p>&#xA;&#xA;<p>When I first started programming in a OOP languages, I found this book not only to be a comprehensive book about C++ and MFC, it was also has one of the best explanations of Object Oriented concepts I've seen.  </p>&#xA;&#xA;<p>When I talk to developers who are just starting out programming in an object oriented language, I tell them to read this book.</p>&#xA;"
913295,2,1711,"2009-05-26 23:33:06",1,NULL,"<p><a href=&quot;http://rads.stackoverflow.com/amzn/click/0201510596&quot; rel=&quot;nofollow&quot;>Algorithms in C++</a> was invaluable to me in learning Big O notation and the ins and outs of the various sort algorithms.  This was published before Sedgewick decided he could make more money by dividing it into 5 different books. </p>&#xA;&#xA;<p><a href=&quot;http://rads.stackoverflow.com/amzn/click/0201309831&quot; rel=&quot;nofollow&quot;>C++ FAQs</a> is an amazing book that really shows you what you should and shouldn't be doing in C++.  The backward compatibility of C++ leaves a lot of landmines about and this book helps one carefully avoid them while at the same time being a good introduction into OO design and intent.</p>&#xA;"
960996,2,1711,"2009-06-07 01:45:29",2,NULL,"<p><a href=&quot;http://rads.stackoverflow.com/amzn/click/0735625921&quot; rel=&quot;nofollow&quot;>Solid Code Optimizing the Software Development Life Cycle</a> </p>&#xA;&#xA;<p>Although the book is only 300 pages and favors Microsoft technologies it still offers some good language agnostic tidbits.</p>&#xA;"
962377,2,1711,"2009-06-07 17:38:53",9,NULL,"<p>One of my personal favorites is <a href=&quot;http://rads.stackoverflow.com/amzn/click/0201914654&quot;>Hacker's Delight</a>, because it was as much fun to read as it was educational.</p>&#xA;&#xA;<p>I hope the second edition will be released soon!</p>&#xA;"
972198,2,1711,"2009-06-09 19:59:23",3,NULL,"<p>I read most of the books having an high score on this question - but not all of them (thanks God !) and I added the others one to my <strong>Amazon Wish List</strong> right away !</p>&#xA;&#xA;<p>(Someone should create a list on Amazon for these books... Maybe a list named : &quot;Stackoverflow best books ever&quot; ? <strong>Anyone know how to do that ?</strong>)</p>&#xA;&#xA;<p>To me, the best book ever has been <strong>Code Complete</strong>. It was a revelation. I bought the 2nd edition in english and then in French and I still think it should be a mandatory reading in any computer science school. Data structure is cool but Code complete, no joke, is much more  important...</p>&#xA;&#xA;<p>Then, my second best book was <strong>Writing Solid Code</strong> - having learn how to be understood, it was great to know how to write solid code.</p>&#xA;&#xA;<p>Then a lot of very nice books but no one to mention here. Until 2001, I think : <strong>Framework Design Guidelines</strong>: Conventions, Idioms, and Patterns for Reusable .NET Libraries. A jewel ! I read this book many times and it's still on my desk, just beside my LCD, along with Code Complete (really !). I Love the way it has been written (love the comment that has been added here and there - books should all be written like that !)</p>&#xA;&#xA;<p>But well, I forget the very first great books I've read ! The ones who make me <em>love</em> computer science, with passion :</p>&#xA;&#xA;<ul>&#xA;<li><strong>Compute!</strong> (C64 magazine - Will never forget <strong>Jim Butterfly</strong> :o)</li>&#xA;<li><strong>Borland C++ User Guides</strong> (the old ones, circa 1991, those who tried to introduce object oriented programming, very nicely written).</li>&#xA;<li>Most <strong>Microsoft Developpement Tools User Guides</strong>, circa 1990-1995. Don't know who were writing them, but they was pretty cool ! I remember reading them late in the night, on saturdays...</li>&#xA;</ul>&#xA;&#xA;<p>Well, excellent question :o)</p>&#xA;"
1055376,2,1711,"2009-06-28 17:55:19",9,NULL,"<p><a href=&quot;http://rads.stackoverflow.com/amzn/click/0262220695&quot; rel=&quot;nofollow&quot;>Concepts, Techniques, and Models of Computer Programming.</a></p>&#xA;&#xA;<p><img src=&quot;http://ecx.images-amazon.com/images/I/51YZ50ZR13L.%5FSL500%5FAA240%5F.jpg&quot; alt=&quot;alt text&quot; /></p>&#xA;"
1130558,2,1711,"2009-07-15 10:18:58",3,NULL,"<p>All the <strong>Thinking in...</strong> books.</p>&#xA;&#xA;<p><strong>Bruce Eckel</strong> is THE genious of pedagogy!&#xA;It's so easy to understand the implementation of polymorphism in C++. It contains all that you should known about C++, basic and advanced concepts. Way better than the Stroustrup's. &#xA;I learnt Java with him too.</p>&#xA;&#xA;<p>And last but not the least:</p>&#xA;&#xA;<p>The C++ one is free !</p>&#xA;&#xA;<p><a href=&quot;http://www.mindview.net/Books/TICPP/ThinkingInCPP2e.html&quot; rel=&quot;nofollow&quot;>http://www.mindview.net/Books/TICPP/ThinkingInCPP2e.html</a></p>&#xA;"
1169110,2,1711,"2009-07-23 01:24:27",8,NULL,"<p><img src=&quot;http://mpbeno.files.wordpress.com/2009/02/innovatorsdilemma1.jpg&quot; alt=&quot;alt text&quot; /></p>&#xA;&#xA;<p>This last year I took a number of classes. I read<br/></p>&#xA;&#xA;<p><a href=&quot;http://books.google.com/books?id=lqKho8KWXmAC&amp;dq=the+innovator%27s+dilemma&amp;printsec=frontcover&amp;source=bn&amp;hl=en&amp;ei=MLhnSu_-DJWHlAev4LjgCQ&amp;sa=X&amp;oi=book_result&amp;ct=result&amp;resnum=4&quot; rel=&quot;nofollow&quot;>The Innovator's Dilemma (disruptive tech)</a><br/>&#xA;<a href=&quot;http://en.wikipedia.org/wiki/The_Mythical_Man-Month&quot; rel=&quot;nofollow&quot;>The Mythical Man Month (managing software)</a><br/>&#xA;<a href=&quot;http://en.wikipedia.org/wiki/Crossing_the_Chasm&quot; rel=&quot;nofollow&quot;>Crossing the Chasm (startup)</a><br/>&#xA;<a href=&quot;http://pages.cs.wisc.edu/~dbbook/&quot; rel=&quot;nofollow&quot;>Database Management Systems, The COW Book</a><br/>&#xA;<a href=&quot;http://oreilly.com/catalog/9780596003098/&quot; rel=&quot;nofollow&quot;>Programming C#, The OSTRICH Book</a><br/>&#xA;<a href=&quot;http://www.apress.com/book/view/1430216263&quot; rel=&quot;nofollow&quot;>Beginning iPhone Developmen, The GRAPEFRUIT Book</a><br/></p>&#xA;&#xA;<p>Each book was amazing but the Innovator's Dilemma by Clayton Christensen (1997!!!) is really a fantastic book, and it got me really thinking about the modern software world. The challenge addressed is disruptive technology, and how disk drive companies and non-technical companies are always disrupted by new, game changing technology. It gives one a new perspective when thinking about Google, probably the biggest 'web' company. Why do they have their hands in EVERYTHING? It's because they don't want to have their position <i>disrupted</i> by something new. The preview on google is plenty to get the idea. Read it!</p>&#xA;"
1169124,2,1711,"2009-07-23 01:30:31",4,NULL,"<p>Adding to the great ones mentioned above:</p>&#xA;&#xA;<p><a href=&quot;http://rads.stackoverflow.com/amzn/click/0321127420&quot; rel=&quot;nofollow&quot;>Patterns of Enterprise Application Architecture</a></p>&#xA;&#xA;<p><a href=&quot;http://rads.stackoverflow.com/amzn/click/0321200683&quot; rel=&quot;nofollow&quot;>Enterprise Integration Patterns</a></p>&#xA;"
1232808,2,1711,"2009-08-05 12:03:58",3,NULL,"<p>Since I'm a C# programmer and most generic books already has been mentioned I'd like to recommend Bill Wagner's book <a href=&quot;http://srtsolutions.com/blogs/billwagner/archive/2008/10/17/more-effective-c-available-now.aspx&quot; rel=&quot;nofollow&quot;>&quot;More Effective C#</a>.</p>&#xA;&#xA;<p>I think most people that develop composite WPF-applications also should have a look at Microsoft's Composite Application Guidance (also known as Prism):</p>&#xA;&#xA;<p><a href=&quot;http://www.codeplex.com/CompositeWPF&quot; rel=&quot;nofollow&quot;>Composite Application Guidance</a></p>&#xA;"
1235820,2,1711,"2009-08-05 21:19:34",3,NULL,"<p><a href=&quot;http://rads.stackoverflow.com/amzn/click/013662149X&quot; rel=&quot;nofollow&quot;>Peter Norton's Assembly Language Book for the IBM PC</a> </p>&#xA;&#xA;<p><img src=&quot;http://pics.librarything.com/picsizes/7a/30/7a30b6e3c62ba88597a66615167434d414f4541.jpg&quot; alt=&quot;alt text&quot; /></p>&#xA;&#xA;<p>I had spent countless nights in front of the pc (DOS), exploring unknown worlds :-D</p>&#xA;"
1293032,2,1711,"2009-08-18 10:20:43",5,NULL,"<p><a href=&quot;http://rads.stackoverflow.com/amzn/click/0932633692&quot; rel=&quot;nofollow&quot;>Perfect Software: And Other Illusions about Testing</a></p>&#xA;&#xA;<p><img src=&quot;http://ecx.images-amazon.com/images/I/51j3BSRspAL.%5FSL500%5FAA240%5F.jpg&quot; alt=&quot;TITLE Cover&quot; /></p>&#xA;&#xA;<p><strong>Perfect Software: And Other Illusions about Testing</strong> <em>by Gerald M. Weinberg</em></p>&#xA;&#xA;<p>ISBN-10: 0932633692</p>&#xA;&#xA;<p>ISBN-13: 978-0932633699</p>&#xA;"
1308751,2,1711,"2009-08-20 20:55:30",4,NULL,"<p>How influential a book is often depends on the reader and where they were in their career when they read the book.  I have to give a shout-out to <a href=&quot;http://rads.stackoverflow.com/amzn/click/0596007124&quot; rel=&quot;nofollow&quot;>Head First Design Patterns</a>.  Great book and the very creative way it's written should be used as an example for other tech book writers.  I.e. it's written in order to facilitate learning and internalizing the concepts. </p>&#xA;&#xA;<p><img src=&quot;http://ecx.images-amazon.com/images/I/51LSqrgoT1L.%5FSS500%5F.jpg&quot; alt=&quot;Head First Design Patterns&quot; /></p>&#xA;"
1317832,2,1711,"2009-08-23 05:17:21",2,NULL,"<p>Domain Driven Design By Eric Evans is a wonderful book!</p>&#xA;"
1442468,2,1711,"2009-09-18 03:34:36",9,NULL,"<p><a href=&quot;http://rads.stackoverflow.com/amzn/click/0201616416&quot; rel=&quot;nofollow&quot;>Extreme Programming Explained: Embrace Change</a> by Kent Beck. While I don't advocate a hardcore XP-or-the-highway take on software development, I wish I had been introduced to the principles in this book much earlier in my career. Unit testing, refactoring, simplicity, continuous integration, cost/time/quality/scope - these changed the way I looked at development. Before Agile, it was all about the debugger and fear of change requests. After Agile, those demons did not loom as large.</p>&#xA;"
1444527,2,1711,"2009-09-18 13:24:33",9,NULL,"<p>The practice of programming.  By Brian W. Kernighan, Rob Pike.</p>&#xA;&#xA;<p>The style shown here is excellent - the code just speaks for itself, and the whole book follows the KISS principle.  Personally not my languages of choice, but still influential to me.</p>&#xA;"
1606458,2,1711,"2009-10-22 11:00:33",1,NULL,"<p>It seems most people have already touched on the some very good books. One which really helped me out was <a href=&quot;http://rads.stackoverflow.com/amzn/click/0321245660&quot; rel=&quot;nofollow&quot;>Effective C#: 50 Ways to Improve your C#</a>. I'd be remiss if I didn't mention <a href=&quot;http://rads.stackoverflow.com/amzn/click/014095144X&quot; rel=&quot;nofollow&quot;>The Tao of Pooh</a>. Philosophy books can be good for the soul, and the code.</p>&#xA;"
1690667,2,1711,"2009-11-06 21:42:33",1,NULL,"<p>One I didn't already see on here was <strong><a href=&quot;http://www.assoc-amazon.com/e/ir?t=wtfnext-20&amp;l=as2&amp;o=1&amp;a=0131495054&quot; rel=&quot;nofollow&quot;>xUnit Test Patterns: Refactoring Test Code</a></strong> by Gerard Meszaros. This book really helped me see unit testing from a fresh perspective.</p>&#xA;"
1695762,2,1711,"2009-11-08 08:26:34",6,NULL,"<p>&quot;The Practice of programming&quot; by Brian W.Kerninghan &amp; Rob Pike.</p>&#xA;&#xA;<p>The language is easy and also the subject matter is interesting.</p>&#xA;"
1695803,2,1711,"2009-11-08 08:48:03",1,NULL,"<p>I'm late to this question but apparently still have something unique to offer... <em>Software Engineering Economics</em> by <a href=&quot;http://en.wikipedia.org/wiki/Barry%5FBoehm&quot; rel=&quot;nofollow&quot;>Barry Boehm</a> which, to summarize, says that if you want to really improve software productivity get better people since better tools, hardware, languages, methods, etc. will all have a marginal impact.  Only better people drive up productivity by significant amounts.  I emphasize, this is <strong>better</strong> engineers, not more engineers!</p>&#xA;&#xA;<p>Not the kind of book you'd take to bed with you, like you might do with <em>Coders At Work</em> but the kind of book that drives home a lesson that our industry has struggled mightily to take to heart.  Witness off-shoring, a false economy that Boehm's model predicts will have only a marginal positive effect, if any at all.  Check it out.</p>&#xA;"
1784931,2,1711,"2009-11-23 18:08:25",1,NULL,"<p>Essential reading for any mentor/team leader/manager or anyone who reports to the aforementioned.</p>&#xA;&#xA;<p><img src=&quot;http://ecx.images-amazon.com/images/I/316N6QYW32L.%5FBO2,204,203,200%5FPIsitb-sticker-arrow-click,TopRight,35,-76%5FAA240%5FSH20%5FOU01%5F.jpg&quot; alt=&quot;alt text&quot;> </p>&#xA;"
1805444,2,1711,"2009-11-26 20:04:24",8,NULL,"<p>hackers, by Steven Levy.</p>&#xA;&#xA;<p>The personality and way of life must come first. Everything else can be learned.</p>&#xA;"
1805501,2,1711,"2009-11-26 20:24:21",3,NULL,"<p>Advanced Programming in the UNIX environment - W. Richard Stevens</p>&#xA;"
1841670,2,1711,"2009-12-03 17:49:07",2,NULL,"<p>What happened to 'Expert C Programming - Deep C Secrets' by Peter Van Der Linden - a classical and enjoyable read. Should have read that immediately after learning C years ago but got it about after 3 years into learning C! A recommended book which answers the most common SO questions on pointers (a favourite subject of mine). Live it, eat it, breathe it! 10/10!</p>&#xA;"
1901748,2,1711,"2009-12-14 15:59:26",1,NULL,"<p>This is a must read book for every programmer: Database system concepts by Abraham Silberschatz.</p>&#xA;&#xA;<p><img src=&quot;http://images.barnesandnoble.com/images/14870000/14878097.JPG&quot; alt=&quot;alt text&quot;></p>&#xA;"
1913288,2,1711,"2009-12-16 09:00:40",1,NULL,"<p>This is a very rich and useful compilation, however, I am a bit surprised I have not encountered Andrew S. Tanenbaum among the authors. IMO he is one of the best CS professors, and his genius has to do mainly with his extraordinary ability in making rather difficult material accessible to the CS undergraduates. <a href=&quot;http://books.google.com/books?as%5Fauth=Andrew+S+Tanenbaum&amp;source=an&amp;ei=ZqAoS%5FvZDJGG4QbQ1aGsDQ&amp;sa=X&amp;oi=book%5Fgroup&amp;ct=title&amp;cad=author-navigational&amp;resnum=12&amp;ved=0CDIQsAMwCw&quot; rel=&quot;nofollow&quot;>His books</a> (Modern Operating Systems, or Computer Networks might ring a bell) did a wonderful job in providing me with a solid foundation in CS while doing my BS and I highly recommend them.&#xA;Some other interesting stuff on Tanenbaum, proving his skills go beyond teaching: author of an OS called MINIX - Linus had his fare share of inspiration from it when implementing Linux; Amoeba - distributed OS; Turtle - free anonymous p2p network.</p>&#xA;"
1967401,2,1711,"2009-12-27 23:36:49",8,NULL,"<p><img src=&quot;http://ecx.images-amazon.com/images/I/51HlYd-%2BRwL._BO2,204,203,200_PIsitb-sticker-arrow-click,TopRight,35,-76_AA300_SH20_OU01_.jpg&quot; alt=&quot;The New Turing Omnibus&quot;></p>&#xA;&#xA;<p>Really good book. Has a high-level taste of the most important areas of computer science. Yes, CS != programming, but this is still useful to every programmer.</p>&#xA;"
2202200,2,1711,"2010-02-04 18:36:10",1,NULL,"<p><strong>The Art of Game Design - A Book of Lenses</strong> by Jesse Schell</p>&#xA;&#xA;<blockquote>&#xA;  <p>Jesse Schell has taught Game Design and led research projects at Carnegie Mellon’s Entertainment Technology Center since 2002.</p>&#xA;</blockquote>&#xA;&#xA;<p>Nuff said.</p>&#xA;&#xA;<p><img src=&quot;http://i50.tinypic.com/iekw0l.jpg&quot; alt=&quot;The Art of Game Design - A Book of Lenses&quot;></p>&#xA;&#xA;<p>PS: Sorry If I am double posting, I couldn't find this book in the answers - either because the title was not exact or there was no image. Let me know and I'll delete it if so.</p>&#xA;"
2212155,2,1711,"2010-02-06 05:16:10",2,NULL,"<p><a href=&quot;http://people.redhat.com/drepper/cpumemory.pdf&quot; rel=&quot;nofollow&quot;>What Every Programmer Should Know About Memory</a></p>&#xA;&#xA;<p>by Ulrich Drepper - explains the structure of modern memory subsystems and suggests how to utilize them efficiently.</p>&#xA;&#xA;<p>PS: Sorry If I am double posting.</p>&#xA;"
2223093,2,1711,"2010-02-08 16:31:06",2,NULL,"<p><a href=&quot;http://rads.stackoverflow.com/amzn/click/0596809484&quot; rel=&quot;nofollow&quot;>97 Things Every Programmer Should Know</a></p>&#xA;&#xA;<p><img src=&quot;http://ecx.images-amazon.com/images/I/51F134Q8TrL._BO2,204,203,200_PIsitb-sticker-arrow-click,TopRight,35,-76_AA240_SH20_OU01_.jpg&quot; alt=&quot;alt text&quot;></p>&#xA;&#xA;<p>This book pools together the collective experiences of some of the world's best programmers. It is a must read.</p>&#xA;"
2223262,2,1711,"2010-02-08 16:53:23",1,NULL,"<p><a href=&quot;http://www.mrbunny.com/&quot; rel=&quot;nofollow&quot;>Mr Bunny's Guide to ActiveX</a></p>&#xA;"
2315020,2,1711,"2010-02-22 23:13:58",4,NULL,"<p>My vote is &quot;How to Think Like a Computer Scientist: Learning With Python&quot;&#xA;It's available both as a <a href=&quot;http://rads.stackoverflow.com/amzn/click/0971677506&quot; rel=&quot;nofollow&quot;>book</a> and as a <a href=&quot;http://www.greenteapress.com/thinkpython/thinkCSpy/thinkCSpy.pdf&quot; rel=&quot;nofollow&quot;>free e-book</a>.</p>&#xA;&#xA;<p>It really helped me to understand the basics of not just Python but programming in general. Although it uses Python to demonstrate concepts, they apply to most, if not all, programming languages. Also: IT'S FREE!</p>&#xA;"
2319763,2,1711,"2010-02-23 16:18:32",1,NULL,"<p><img src=&quot;http://upload.wikimedia.org/wikipedia/en/3/31/Norton_Guide_to_PC_VGA.jpg&quot; alt=&quot;The Pink Shirt book&quot;></p>&#xA;&#xA;<p>Programmer's Guide to the IBM PC. The Pink Shirt book. </p>&#xA;&#xA;<p>...well, <strong>someone</strong> had to say it.</p>&#xA;"
2362817,2,1711,"2010-03-02 11:44:38",8,NULL,"<p><a href=&quot;http://rads.stackoverflow.com/amzn/click/020189551X&quot; rel=&quot;nofollow&quot;>Object Oriented Analysis and Design with Applications by Brady Booch</a></p>&#xA;"
2374998,2,1711,"2010-03-03 21:13:05",1,NULL,"<p>You.Next(): Move Your Software Development Career to the Leadership Track&#xA;~ Michael C. Finley (Author), Honza Fedák (Author) &#xA;<a href=&quot;http://rads.stackoverflow.com/amzn/click/1439205590&quot; rel=&quot;nofollow&quot;>link text</a></p>&#xA;"
2779417,2,1711,"2010-05-06 07:59:35",1,NULL,"<p><a href=&quot;http://rads.stackoverflow.com/amzn/click/0712678867&quot; rel=&quot;nofollow&quot;>Maverick!: The Success Story Behind the World's Most Unusual Workplace</a> </p>&#xA;&#xA;<p><img src=&quot;http://ecx.images-amazon.com/images/I/410TX7YN94L._SL500_AA300_.jpg&quot; alt=&quot;alt text&quot;></p>&#xA;&#xA;<p><strong>Will make you realise what a workplace should be like.</strong></p>&#xA;"
2912701,2,1711,"2010-05-26 12:01:44",9,NULL,"<p><a href=&quot;http://www.cis.upenn.edu/~bcpierce/tapl/index.html&quot; rel=&quot;nofollow&quot;>Types and Programming Languages</a> by Benjamin C Pierce for a thorough understanding of the underpinnings of programming languages.</p>&#xA;"
2912739,2,1711,"2010-05-26 12:06:06",5,NULL,"<p><a href=&quot;http://rads.stackoverflow.com/amzn/click/0262201755&quot; rel=&quot;nofollow&quot;>Design Concepts in Programming Languages</a> by FA Turbak produces detailed implementations of many programming concepts and is very useful for understanding what's going on underneath the hood.</p>&#xA;"
3346201,2,1711,"2010-07-27 17:27:24",8,NULL,"<p><strong>The Practice of Programming</strong></p>&#xA;&#xA;<p><img src=&quot;http://t1.gstatic.com/images?q=tbn%3aANd9GcSLc9pryomuCkOeUgLIv13xEWjh_CvvjqZ1-KbMDoSKJj4gtaA&amp;t=1&amp;usg=__wxMg3DTFArpa2kMk0Jmqf-_5eI4=&quot; alt=&quot;alt text&quot;></p>&#xA;&#xA;<p>and</p>&#xA;&#xA;<p><strong>How to solve it by computer</strong></p>&#xA;&#xA;<p><img src=&quot;http://img.infibeam.com/img/7101e0ee/496b1/05/629/P-M-B-9788131705629.jpg?hei=200&amp;wid=160&amp;op_sharpen=1&quot; alt=&quot;alt text&quot;></p>&#xA;"
3354925,2,1711,"2010-07-28 16:10:49",6,NULL,"<p><img src=&quot;http://ecx.images-amazon.com/images/I/51fhwR6eb3L._BO2,204,203,200_PIsitb-sticker-arrow-click,TopRight,35,-76_AA300_SH20_OU01_.jpg&quot; alt=&quot;alt text&quot;></p>&#xA;&#xA;<p><img src=&quot;http://ecx.images-amazon.com/images/I/51PDNR3C40L._SL500_AA300_.jpg&quot; alt=&quot;alt text&quot;></p>&#xA;"
3416315,2,1711,"2010-08-05 15:26:41",9,NULL,"<p><a href=&quot;http://rads.stackoverflow.com/amzn/click/0262062186&quot; rel=&quot;nofollow&quot;><img src=&quot;http://ecx.images-amazon.com/images/I/51E0Ojkz8iL._BO2,204,203,200_PIsitb-sticker-arrow-click,TopRight,35,-76_AA300_SH20_OU01_.jpg&quot; alt=&quot;alt text&quot;></a></p>&#xA;"
3444622,2,1711,"2010-08-09 22:18:58",5,NULL,"<p><a href=&quot;http://rads.stackoverflow.com/amzn/click/B0020MMBCG&quot;>The Back of the Napkin</a>, by <a href=&quot;http://www.thebackofthenapkin.com/&quot;>Dan Roam</a>.</p>&#xA;&#xA;<p><img src=&quot;http://www.coverbrowser.com/image/bestsellers-2008/302-7.jpg&quot; alt=&quot;The Back of the Napkin&quot;></p>&#xA;&#xA;<p>A great book about visual thinking techniques.  There is also an <a href=&quot;http://rads.stackoverflow.com/amzn/click/1591843065&quot;>expanded</a> edition now.  I can't speak to that version, as I do not own it; yet.</p>&#xA;"
3565093,2,1711,"2010-08-25 10:53:18",4,NULL,"<p><img src=&quot;http://i.stack.imgur.com/mManT.jpg&quot; alt=&quot;alt text&quot;></p>&#xA;&#xA;<p><a href=&quot;http://rads.stackoverflow.com/amzn/click/0452267560&quot; rel=&quot;nofollow&quot;>Mastery: The Keys to Success and Long-Term Fulfillment, by George Leonard</a></p>&#xA;&#xA;<p>It's about about what mindsets are required to reach mastery in any skill, and why. It's just awesome, and an easy read too.</p>&#xA;"
4008769,2,1711,"2010-10-24 15:01:54",8,NULL,"<p>The Python language was very influential to me, I wish I would have read these book years ago. The beauty and simplicity of the Python language really affected how I wrote code in other languages.</p>&#xA;&#xA;<p><img src=&quot;http://i.stack.imgur.com/HA3fB.gif&quot; alt=&quot;alt text&quot;>&#xA;<img src=&quot;http://i.stack.imgur.com/Ni1BC.gif&quot; alt=&quot;alt text&quot;></p>&#xA;"
4066362,2,1711,"2010-11-01 02:40:53",5,NULL,"<p><a href=&quot;http://www.informit.com/store/product.aspx?isbn=9780321112309&amp;aid=3B419801-6640-4A1F-A653-6CD00295FCDD&quot; rel=&quot;nofollow&quot;>Enterprise Patterns and MDA: Building Better Software with Archetype Patterns and UML</a></p>&#xA;&#xA;<p>An excellent read for those looking to leverage ORM and UML</p>&#xA;&#xA;<p><img src=&quot;http://i.stack.imgur.com/B6iEX.png&quot; alt=&quot;Enterprise Patterns and MDA: Building Better Software with Archetype Patterns and UML&quot;></p>&#xA;"
4218702,2,1711,"2010-11-18 19:27:11",9,NULL,"<p><a href=&quot;http://rads.stackoverflow.com/amzn/click/0073523321&quot; rel=&quot;nofollow&quot;>Database System Concepts</a> is one of the best books you can read on understanding good database design principles.</p>&#xA;&#xA;<p><img src=&quot;http://i.stack.imgur.com/gk1tt.jpg&quot; alt=&quot;alt text&quot;></p>&#xA;"
4252445,2,1711,"2010-11-23 03:15:27",9,NULL,"<p><a href=&quot;http://savannah.spinellicreations.com/pgubook/ProgrammingGroundUp-1-0-booksize.pdf&quot; rel=&quot;nofollow&quot;>Programming from the ground up.</a> It's free on the internet. This book taught me AT&amp;T asm. It is very easy to read.</p>&#xA;&#xA;<p><img src=&quot;http://i.stack.imgur.com/ec9YD.jpg&quot; alt=&quot;alt text&quot;></p>&#xA;"
4395620,2,1711,"2010-12-09 06:49:11",2,NULL,"<p>Steve Macguire's <a href=&quot;http://c2.com/cgi/wiki?WritingSolidCode&quot; rel=&quot;nofollow&quot;>Writing Solid Code</a> </p>&#xA;"
4689505,2,1711,"2011-01-14 09:13:26",7,NULL,"<p><a href=&quot;http://nostarch.com/tcpip.htm&quot; rel=&quot;nofollow&quot;>The TCP/IP Guide</a>, by Charles M. Kozierok </p>&#xA;&#xA;<p>Although it is described as an 'encyclopedic reference', it is <em>incredibly</em> readable as a narrative.</p>&#xA;&#xA;<p>This author provides a very , very, very well written, comprehensive, introduction to networking and the infrastructure that underlies the web. Something all programmers ought to know.</p>&#xA;&#xA;<p>For me it is the natural follow-on from Charles Petzold's '<a href=&quot;http://stackoverflow.com/questions/1711/what-is-the-single-most-influential-book-every-programmer-should-read/1727#1727&quot;>Code</a>'.  If &quot;Code&quot; explains to the layman how computers work, 'The TCP/IP Guide' explains how they connect together.</p>&#xA;&#xA;<p>If you gave a 12 year old geek a copy 'Code' and a copy of 'The TCP/IP Guide' - they'd be building the next Google by the age of 17. </p>&#xA;&#xA;<p>In other words, if I could go back in time and tell myself to read a specific book at the beginning of my career as a developer, this (plus <em>Code</em>) is up there in the top of my list.</p>&#xA;"
4693098,2,1711,"2011-01-14 16:09:12",2,NULL,"<p>In the beginning was the command line. Neal Stephenson.</p>&#xA;"
1765,2,1760,"2008-08-05 00:57:49",0,NULL,"<p>I like <a href=&quot;http://www.mbunit.com/&quot; rel=&quot;nofollow&quot;>MbUnit</a>, er, <a href=&quot;http://www.gallio.org/&quot; rel=&quot;nofollow&quot;>Gallio</a>.  Most importantly to me is having good tools support inside Visual Studio.  For that I use <a href=&quot;http://www.jetbrains.com/resharper/index.html&quot; rel=&quot;nofollow&quot;>Resharper</a>, which has an <a href=&quot;http://code.google.com/p/mbunit-resharper/&quot; rel=&quot;nofollow&quot;>MbUnit test runner</a>.  A lot of folks seem to like <a href=&quot;http://www.testdriven.net/overview.aspx&quot; rel=&quot;nofollow&quot;>TestDriven.NET</a> as their test runner as well.</p>"
1820,2,1760,"2008-08-05 02:07:50",2,NULL,"<P>I like <A href=&quot;http://www.testdriven.net/overview.aspx&quot; rel=&quot;nofollow&quot;>TestDriven.NET</A> (even though I use ReSharper) and I'm pretty happy with <A href=&quot;http://www.codeplex.com/xunit&quot; rel=&quot;nofollow&quot;>XUnit.net</A>. It uses Facts instead of Tests which many people dislike but I like the difference in terminology. It's useful to think of a collection of automatically provable Facts about your software and see which ones you violate when you make a change.</P>&#xD;&#xA;<P>Be aware that <A href=&quot;http://blogs.msdn.com/buckh/archive/2007/03/27/orcas-unit-testing-to-be-available-in-visual-studio-professional.aspx&quot; rel=&quot;nofollow&quot;>Visual Studio 2008 Professional (and above) now comes with integrated Unit Testing</A> (it used to be available only with the Team System Editions) and may be suitable for your needs. </P>"
1821,2,1760,"2008-08-05 02:15:25",46,NULL,"<p>There are so many it's crazy.  Crazy good, I guess.</p>&#xA;&#xA;<ul>&#xA;<li>For the conservative types (me), <a href=&quot;http://www.nunit.org/&quot;><strong>NUnit</strong></a> is still available and still more than capable.</li>&#xA;<li>For the Microsoft-types, <a href=&quot;http://msdn.microsoft.com/en-us/vstudio/default.aspx&quot;><strong>MSTest</strong></a> is adequate, but slow and clunky compared to Nunit.  It also lacks code coverage without paying the big bucks for the pricey versions of Visual Studio.</li>&#xA;<li>There's also <a href=&quot;http://www.mbunit.com/About.aspx&quot;><strong>MbUnit</strong></a>.  It's like NUnit, but has nifty features like RowTest (run the same test with different parameters) and Rollback (put the database back like you found it after a test) </li>&#xA;<li>And finally, <a href=&quot;http://www.codeplex.com/xunit&quot;><strong>xUnit.net</strong></a> is the trendy option with some attitude.</li>&#xA;<li>Oh, and <a href=&quot;http://testdriven.net/&quot;><strong>TestDriven.NET</strong></a> will give you IDE integration for both Nunit and MBunit.</li>&#xA;</ul>&#xA;&#xA;<p>I'm sure they're all just fine.  I'd steer away from MSTest though, unless you just enjoy the convenience of having everything in one IDE out of the box.</p>&#xA;&#xA;<p><a href=&quot;http://www.hanselminutes.com/default.aspx?showID=130&quot;>Scott Hanselman</a> has a podcast on this very topic.</p>&#xA;"
2831,2,1760,"2008-08-05 20:53:01",4,NULL,"<p>xUnit.net looks like it provides a slightly different approach to N/MB/MS/Unit, which is interesting.</p>&#xA;&#xA;<p>In my search for an rspec-like solution (because I LOVE the rspec), I also came across <a href=&quot;http://nspec.tigris.org/&quot; rel=&quot;nofollow&quot;>NSpec</a>, which looks a bit wordy, but combined with the <a href=&quot;http://code.google.com/p/nspec-extensions/&quot; rel=&quot;nofollow&quot;>NSpec Extensions</a> addon to use C#3 extension methods, it looks pretty nice.</p>&#xA;"
3603,2,1760,"2008-08-06 16:07:06",7,NULL,"<p>We use NUnit and <a href=&quot;http://mbunit.com&quot; rel=&quot;nofollow&quot;>MBUnit</a> here. We use <a href=&quot;http://testdriven.net&quot; rel=&quot;nofollow&quot;>TestDriven.NET</a> to run the unit tests from within Visual Studio. We use the excellent, highly recommended <a href=&quot;http://www.ayende.com/projects/rhino-mocks/downloads.aspx&quot; rel=&quot;nofollow&quot;>RhinoMocks</a> as a mock framework.</p>"
3979,2,1760,"2008-08-06 21:03:00",1,NULL,"<p>I used to use NUnit, but I switched to MbUnit since it has more features.  I love RowTest.  It lets you parametrize your tests.  NUnit does have a litter bit better tool support though.  I am using ReSharper to run MbUnit Tests.  I've had problems with TestDriven.NET running my SetUp methods for MbUnit.</p>"
11163,2,1760,"2008-08-14 15:04:09",1,NULL,"<p>This is really a personal opinion on my part (I guess that's redundant since it is a forum). NUnit, MSTest, ect all do pretty mutch the same thing.  However I find NMock indispensable.</p>&#xA;&#xA;<p>NMock or any mocking package is not unit testing but it makes it so much easier to do unit testing that it mught as well be.</p>&#xA;"
11170,2,1760,"2008-08-14 15:09:18",6,NULL,"<p>Stick to NUnit.  Don't go anywhere near MSTest.</p>&#xA;&#xA;<p>NUnit + ReSharper is an absolute joy to work with.</p>&#xA;"
31648,2,1760,"2008-08-28 03:52:45",5,NULL,"<p>I used to use NUnit, but now tend to use MbUnit, for two key features:&#xA;1. The RowTest feature allows you to easily run the same test on different sets of parameters, which is important if you really want thorough coverage.&#xA;2. The Rollback feature allows you to run tests against your database while rolling back changes after every test, keeping your database in exactly the same state every time. And it's as easy as adding the [Rollback] attribute.</p>&#xA;&#xA;<p>Another nice aspect of MbUnit is that its syntax is nearly identical to NUnit, so if you have a whole test bed already in place under NUnit, you can just switch out the references without the need to change any (very much?) code.</p>&#xA;"
56259,2,1760,"2008-09-11 10:54:51",1,NULL,"<p>I have made a small example of testing a .net lib using ironRuby:&#xA;<a href=&quot;http://khebbie.dk/post/2008/08/Example-of-using-ironRubys-mini_rspec-library.aspx&quot; rel=&quot;nofollow&quot;>http://khebbie.dk/post/2008/08/Example-of-using-ironRubys-mini_rspec-library.aspx</a></p>&#xA;"
1150818,2,1760,"2009-07-19 20:34:25",1,NULL,"<p>This is an old question but you might find it interesting that Gallio v3.1 now supports RSpec via IronRuby.</p>&#xA;"
3291,2,3284,"2008-08-06 11:21:12",32,NULL,"<p>Static methods cannot be inherited or overridden, and that is why they can't be abstract. Since static methods are defined on the type, not the instance, of a class, they must be called explicitly on that type. So when you want to call a method on a child class, you need to use its name to call it. This makes inheritance irrelevant.</p>&#xD;&#xA;&#xD;&#xA;<p>Assume you could, for a moment, inherit static methods. Imagine this scenario:</p>&#xD;&#xA;&#xD;&#xA;<pre><code>public static class Base<br>{<br>    public static virtual int GetNumber() { return 5; }<br>}<br><br>public static class Child1 : Base<br>{<br>    public static override int GetNumber() { return 1; }<br>}<br><br>public static class Child2 : Base<br>{<br>    public static override int GetNumber() { return 2; }<br>}<br></code></pre>&#xD;&#xA;&#xD;&#xA;<p>If you call Base.GetNumber(), which method would be called? Which value returned? Its pretty easy to see that without creating instances of objects, inheritance is rather hard. Abstract methods without inheritance are just methods that don't have a body, so can't be called.</p>"
3292,2,3284,"2008-08-06 11:24:42",7,NULL,"<p>To add to the previous explanations, static method calls are bound to a specific method at <em>compile-time</em>, which rather rules out polymorphic behavior.</p>"
3294,2,3284,"2008-08-06 11:30:07",105,NULL,"<p>Static methods are not <em>instantiated</em> as such, they're just available without an object reference.</p>&#xD;&#xA;&#xD;&#xA;<p>A call to a static method is done through the class name, not through an object reference, and the IL code to call it will call the abstract method through the name of the class that defined it, not necessarily the name of the class you used.</p>&#xD;&#xA;&#xD;&#xA;<p>Let me show an example.</p>&#xD;&#xA;&#xD;&#xA;<p>With the following code:</p>&#xD;&#xA;&#xD;&#xA;<pre><code>public class A<br>{<br>    public static void Test()<br>    {<br>    }<br>}<br><br>public class B : A<br>{<br>}<br></code></pre>&#xD;&#xA;&#xD;&#xA;<p>If you call B.Test, like this:</p>&#xD;&#xA;&#xD;&#xA;<pre><code>class Program<br>{<br>    static void Main(string[] args)<br>    {<br>        B.Test();<br>    }<br>}<br></code></pre>&#xD;&#xA;&#xD;&#xA;<p>Then the actual code inside the Main method is as follows:</p>&#xD;&#xA;&#xD;&#xA;<pre><code>.entrypoint<br>.maxstack 8<br>L0000: nop <br>L0001: call void ConsoleApplication1.A::Test()<br>L0006: nop <br>L0007: ret <br></code></pre>&#xD;&#xA;&#xD;&#xA;<p>As you can see, the call is made to A.Test, because it was the A class that defined it, and not to B.Test, even though you can write the code that way.</p>&#xD;&#xA;&#xD;&#xA;<p>If you had <em>class types</em>, like in Delphi, where you can make a variable referring to a type and not an object, you would have more use for virtual and thus abstract static methods (and also constructors), but they aren't available and thus static calls are non-virtual in .NET.</p>&#xD;&#xA;&#xD;&#xA;<p>I realize that the IL designers could allow the code to be compiled to call B.Test, and resolve the call at runtime, but it still wouldn't be virtual, as you would still have to write some kind of class name there.</p>&#xD;&#xA;&#xD;&#xA;<p>Virtual methods, and thus abstract ones, are only useful when you're using a variable which, at runtime, can contain many different types of objects, and you thus want to call the right method for the current object you have in the variable. With static methods you need to go through a class name anyway, so the exact method to call is known at compile time because it can't and won't change.</p>&#xD;&#xA;&#xD;&#xA;<p>Thus, virtual/abstract static methods are not available in .NET.</p>"
6674,2,3284,"2008-08-09 07:01:57",14,NULL,"<p>Another respondent (McDowell) said that polymorphism only works for object instances.  That should be qualified; there are languages that do treat classes as instances of a &quot;Class&quot; or &quot;Metaclass&quot; type.  These languages do support polymorphism for both instance and class (static) methods.</p>&#xD;&#xA;&#xD;&#xA;<p>C#, like Java and C++ before it, is not such a language; the <code>static</code> keyword is used explicitly to denote that the method is statically-bound rather than dynamic/virtual.</p>"
15090,2,3284,"2008-08-18 19:01:59",4,NULL,"<p>We actually override static methods (in delphi), it's a bit ugly, but it works just fine for our needs.</p>&#xA;&#xA;<p>We use it so the classes can have a list of their available objects without the class instance, for example, we have a method that looks like this:</p>&#xA;&#xA;<pre><code>class function AvailableObjects: string; override;&#xA;begin&#xA;  Result := 'Object1, Object2';&#xA;end;&#xA;</code></pre>&#xA;&#xA;<p>It's ugly but necessary, this way we can instantiate just what is needed, instead of having all the classes instantianted just to search for the available objects.</p>&#xA;&#xA;<p>This was a simple example, but the application itself is a client-server application which has all the classes available in just one server, and multiple different clients which might not need everything the server has and will never need an object instance.</p>&#xA;&#xA;<p>So this is much easier to maintain than having one different server application for each client.</p>&#xA;&#xA;<p>Hope the example was clear.</p>&#xA;"
862763,2,3284,"2009-05-14 11:11:59",0,NULL,"<p>The abstract methods are implicitly virtual. Abstract methods require an instance, but static methods do not have an instance. So, you can have a static method in an abstract class, it just cannot be static abstract (or abstract static).</p>&#xA;"
2286540,2,3284,"2010-02-18 05:36:44",3,NULL,"<p>Here is a situation where there is definitely a need for inheritance for static fields and methods:</p>&#xA;&#xA;<pre><code>abstract class Animal&#xA;{&#xA;  protected static string[] legs;&#xA;&#xA;  static Animal() {&#xA;    legs=new string[0];&#xA;  }&#xA;&#xA;  public static void printLegs()&#xA;  {&#xA;    foreach (string leg in legs) {&#xA;      print(leg);&#xA;    }&#xA;  }&#xA;}&#xA;&#xA;&#xA;class Human: Animal&#xA;{&#xA;  static Human() {&#xA;    legs=new string[] {&quot;left leg&quot;, &quot;right leg&quot;};&#xA;  }&#xA;}&#xA;&#xA;&#xA;class Dog: Animal&#xA;{&#xA;  static Dog() {&#xA;    legs=new string[] {&quot;left foreleg&quot;, &quot;right foreleg&quot;, &quot;left hindleg&quot;, &quot;right hindleg&quot;};&#xA;  }&#xA;}&#xA;&#xA;&#xA;public static void main() {&#xA;  Dog.printLegs();&#xA;  Human.printLegs();&#xA;}&#xA;&#xA;&#xA;//what is the output?&#xA;//does each subclass get its own copy of the array &quot;legs&quot;?&#xA;</code></pre>&#xA;"
16019866,2,3284,"2013-04-15 16:10:01",-3,NULL,"<p>Because C# design was copied from Java. And Java doesn't allow abstract static methods.</p>&#xA;"
2759417,2,4736,"2010-05-03 16:09:21",302,NULL,"<p>The most important part is the concepts. Once you understand how the building blocks work, differences in syntax amount to little more than mild dialects. A layer on top of your regular expression engine's syntax is the syntax of the programming language you're using. Languages such as Perl remove most of this complication, but you'll have to keep in mind other considerations if you're using regular expressions in a C program.</p>&#xA;&#xA;<p>If you think of regular expressions as building blocks that you can mix and match as you please, it helps you learn how to write and debug your own patterns but also how to understand patterns written by others.</p>&#xA;&#xA;<h2>Start simple</h2>&#xA;&#xA;<p>Conceptually, the simplest regular expressions are literal characters. The pattern <code>N</code> matches the character 'N'.</p>&#xA;&#xA;<p>Regular expressions next to each other match sequences. For example, the pattern <code>Nick</code> matches the sequence 'N' followed by 'i' followed by 'c' followed by 'k'.</p>&#xA;&#xA;<p>If you've ever used <code>grep</code> on Unix—even if only to search for ordinary looking strings—you've already been using regular expressions! (The <code>re</code> in <code>grep</code> refers to regular expressions.)</p>&#xA;&#xA;<h2>Order from the menu</h2>&#xA;&#xA;<p>Adding just a little complexity, you can match either 'Nick' or 'nick' with the pattern <code>[Nn]ick</code>. The part in square brackets is a <em>character class</em>, which means it matches exactly one of the enclosed characters. You can also use ranges in character classes, so <code>[a-c]</code> matches either 'a' or 'b' or 'c'.</p>&#xA;&#xA;<p>The pattern <code>.</code> is special: rather than matching a literal dot only, it matches <em>any</em> character<sup>†</sup>. It's the same conceptually as the really big character class <code>[-.?+%$A-Za-z0-9...]</code>.</p>&#xA;&#xA;<p>Think of character classes as menus: pick just one.</p>&#xA;&#xA;<h2>Helpful shortcuts</h2>&#xA;&#xA;<p>Using <code>.</code> can save you lots of typing, and there are other shortcuts for common patterns. Say you want to match non-negative integers: one way to write that is <code>[0-9]+</code>. Digits are a frequent match target, so you could instead use <code>\d+</code> match non-negative integers. Others are <code>\s</code> (whitespace) and <code>\w</code> (word characters: alphanumerics or underscore).</p>&#xA;&#xA;<p>The uppercased variants are their complements, so <code>\S</code> matches any <em>non</em>-whitespace character, for example.</p>&#xA;&#xA;<h2>Once is not enough</h2>&#xA;&#xA;<p>From there, you can repeat parts of your pattern with <em>quantifiers</em>. For example, the pattern <code>ab?c</code> matches 'abc' or 'ac' because the <code>?</code> quantifier makes the subpattern it modifies optional. Other quantifiers are</p>&#xA;&#xA;<ul>&#xA;<li><code>*</code> (zero or more times)</li>&#xA;<li><code>+</code> (one or more times)</li>&#xA;<li><code>{n}</code> (exactly <em>n</em> times)</li>&#xA;<li><code>{n,}</code> (at least <em>n</em> times)</li>&#xA;<li><code>{n,m}</code> (at least <em>n</em> times but no more than <em>m</em> times)</li>&#xA;</ul>&#xA;&#xA;<p>Putting some of these blocks together, the pattern <code>[Nn]*ick</code> matches all of</p>&#xA;&#xA;<ul>&#xA;<li>ick</li>&#xA;<li>Nick</li>&#xA;<li>nick</li>&#xA;<li>Nnick</li>&#xA;<li>nNick</li>&#xA;<li>nnick</li>&#xA;<li><em>(and so on)</em></li>&#xA;</ul>&#xA;&#xA;<p>The first match demonstrates an important lesson: <em><code>*</code> always succeeds!</em> Any pattern can match zero times.</p>&#xA;&#xA;<h2>Grouping</h2>&#xA;&#xA;<p>A quantifier modifies the pattern to its immediate left. You might expect <code>0abc+0</code> to match '0abc0', '0abcabc0', and so forth, but the pattern <em>immediately</em> to the left of the plus quantifier is <code>c</code>. This means <code>0abc+0</code> matches '0abc0', '0abcc0', '0abccc0', and so on.</p>&#xA;&#xA;<p>To match one or more sequences of 'abc' with zeros on the ends, use <code>0(abc)+0</code>. The parentheses denote a subpattern that can be quantified as a unit. It's also common for regular expression engines to save or &quot;capture&quot; the portion of the input text that matches a parenthesized group. Extracting bits this way is much more flexible and less error-prone than counting indices and <code>substr</code>.</p>&#xA;&#xA;<h2>Alternation</h2>&#xA;&#xA;<p>Earlier, we saw one way to match either 'Nick' or 'nick'. Another is with alternation as in <code>Nick|nick</code>. Remember that alternation includes everything to its left and everything to its right. Use grouping parentheses to limit the scope of <code>|</code>, <em>e.g.</em>, <code>(Nick|nick)</code>.</p>&#xA;&#xA;<p>For another example, you could equivalently write <code>[a-c]</code> as <code>a|b|c</code>, but this is likely to be suboptimal because many implementations assume alternatives will have lengths greater than 1.</p>&#xA;&#xA;<h2>Escaping</h2>&#xA;&#xA;<p>Although some characters match themselves, others have special meanings. The pattern <code>\d+</code> doesn't match backslash followed by lowercase D followed by a plus sign: to get that, we'd use <code>\\d\+</code>. A backslash removes the special meaning from the following character.</p>&#xA;&#xA;<h2>Greediness</h2>&#xA;&#xA;<p>Regular expression quantifiers are greedy. This means they match as much text as they possibly can while allowing the entire pattern to match successfully.</p>&#xA;&#xA;<p>For example, say the input is</p>&#xA;&#xA;<blockquote>&#xA;  <p>&quot;Hello,&quot; she said, &quot;How are you?&quot;</p>&#xA;</blockquote>&#xA;&#xA;<p>You might expect <code>&quot;.+&quot;</code> to match only 'Hello,' and will then be surprised when you see that it matched from 'Hello' all the way through 'you?'.</p>&#xA;&#xA;<p>To switch from greedy to what you might think of as cautious, add an extra <code>?</code> to the quantifier. Now you understand how <code>\((.+?)\)</code>, the example from your question works. It matches the sequence of a literal left-parenthesis, followed by one or more characters, and terminated by a right-parenthesis.</p>&#xA;&#xA;<p>If your input is '(123) (456)', then the first capture will be '123'. Non-greedy quantifiers want to allow the rest of the pattern to start matching as soon as possible.</p>&#xA;&#xA;<p>(As to your confusion, I don't know of any regular-expression dialect where <code>((.+?))</code> would do the same thing. I suspect something got lost in transmission somewhere along the way.)</p>&#xA;&#xA;<h2>Anchors</h2>&#xA;&#xA;<p>Use the special pattern <code>^</code> to match only at the beginning of your input and <code>$</code> to match only at the end. Making &quot;bookends&quot; with your patterns where you say, &quot;I know what's at the front and back, but give me everything between&quot; is a useful technique.</p>&#xA;&#xA;<p>Say you want to match comments of the form</p>&#xA;&#xA;<blockquote>&#xA;  <p><code>-- This is a comment --</code></p>&#xA;</blockquote>&#xA;&#xA;<p>you'd write <code>^--\s+(.+)\s+--$</code>.</p>&#xA;&#xA;<h2>Build your own</h2>&#xA;&#xA;<p>Regular expressions are recursive, so now that you understand these basic rules, you can combine them however you like.</p>&#xA;&#xA;<h2>Tools for writing and debugging regexes:</h2>&#xA;&#xA;<ul>&#xA;<li><a href=&quot;http://www.regexr.com/&quot;>RegExr</a> (for JavaScript)</li>&#xA;<li>Perl: <a href=&quot;http://search.cpan.org/dist/YAPE-Regex-Explain/&quot;>YAPE: Regex Explain</a></li>&#xA;<li><a href=&quot;http://weitz.de/regex-coach/&quot;>Regex Coach</a> (engine backed by <a href=&quot;http://weitz.de/cl-ppcre/&quot;>CL-PPCRE</a>)</li>&#xA;<li><a href=&quot;http://regexpal.com&quot;>RegexPal</a> (for JavaScript)</li>&#xA;<li><a href=&quot;http://www.regular-expressions.info/&quot;>Regular Expressions Online Tester</a> </li>&#xA;<li><a href=&quot;http://www.regexbuddy.com/&quot;>Regex Buddy</a></li>&#xA;<li><a href=&quot;http://www.regex101.com/&quot;>Regex 101</a> (for PCRE, JavaScript, Python)</li>&#xA;<li><a href=&quot;http://laurent.riesterer.free.fr/regexp/&quot;>Visual RegExp</a></li>&#xA;<li><a href=&quot;http://www.ultrapico.com/Expresso.htm&quot;>Expresso</a> (for .NET)</li>&#xA;<li><a href=&quot;http://www.rubular.com/&quot;>Rubular</a> (for Ruby)</li>&#xA;<li><a href=&quot;http://regexlib.com/Default.aspx&quot;>Regular Expression Library</a> (Predefined Regexes for common scenarios)</li>&#xA;<li><a href=&quot;http://www.txt2re.com/&quot;>Txt2RE</a></li>&#xA;<li><a href=&quot;http://www.regextester.com/&quot;>Regex Tester</a> (for JavaScript)</li>&#xA;</ul>&#xA;&#xA;<h2>Books</h2>&#xA;&#xA;<ul>&#xA;<li><a href=&quot;http://oreilly.com/catalog/9780596528126/&quot;>Mastering Regular Expressions</a> and the <a href=&quot;http://oreilly.com/catalog/9780596002893&quot;>2nd Edition</a></li>&#xA;<li><a href=&quot;http://www.addedbytes.com/cheat-sheets/regular-expressions-cheat-sheet/&quot;>Regular Expressions Cheat Sheet</a></li>&#xA;<li><a href=&quot;http://rads.stackoverflow.com/amzn/click/0596520689&quot;>Regex Cookbook</a></li>&#xA;<li><a href=&quot;http://rads.stackoverflow.com/amzn/click/0672325667&quot;>Teach Yourself Regular Expressions</a></li>&#xA;</ul>&#xA;&#xA;<h2>Free resources</h2>&#xA;&#xA;<ul>&#xA;<li><a href=&quot;http://neverfear.org/blog/view/Regex_tutorial_for_people_who_should_know_Regex__but_do_not___Part_1&quot;>Regular Expressions - Everything you should know</a> (PDF Series)</li>&#xA;<li><a href=&quot;http://www.greenend.org.uk/rjk/2002/06/regexp.html&quot;>Regex Syntax Summary</a></li>&#xA;<li><a href=&quot;http://perl.plover.com/Regex/&quot;>How Regexes Work</a></li>&#xA;</ul>&#xA;&#xA;<h2>Footnote</h2>&#xA;&#xA;<p><strong>†:</strong> The statement above that <code>.</code> matches any character is a simplification for pedagogical purposes that is not strictly true. Dot matches any character except newline, <code>&quot;\n&quot;</code>, but in practice you rarely expect a pattern such as <code>.+</code> to cross a newline boundary. Perl regexes have a <a href=&quot;http://perldoc.perl.org/perlre.html#s&quot;><code>/s</code> switch</a> and Java <a href=&quot;http://docs.oracle.com/javase/1.5.0/docs/api/java/util/regex/Pattern.html#DOTALL&quot;><code>Pattern.DOTALL</code></a>, for example, to make <code>.</code> match any character at all. For languages that don't have such a feature, you can use something like <code>[\s\S]</code> to match &quot;any whitespace or any non-whitespace&quot;, in other words anything.</p>&#xA;"
5331,2,5323,"2008-08-07 21:18:50",6,NULL,"<p>I'm of the thought that CSS layout with as few tables as possible is cleaner and better, but I agree that sometimes you just gotta use a table.</p>&#xD;&#xA;&#xD;&#xA;<p>Business-wise, it's generally &quot;what's going to get it done the fastest and most reliable way.&quot; In my experience, using a few tables generally falls into that category.</p>&#xD;&#xA;&#xD;&#xA;<p>I have found that a very effective way to mitigate cross-browser differences in CSS rendering is to use the &quot;strict&quot; doctype at the top of your page:</p>&#xD;&#xA;&#xD;&#xA;<pre><code>&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.01//EN&quot; &quot;http://www.w3.org/TR/html4/strict.dtd&quot;&gt;<br></code></pre>&#xD;&#xA;&#xD;&#xA;<p>Also, for the dreaded IE6 CSS issues, you can use this hack:</p>&#xD;&#xA;&#xD;&#xA;<pre><code>.someClass {<br>    background-color:black; /*this is for most browsers*/<br>    _background-color:white; /*this is for IE6 only - all others will ignore it*/<br>}<br></code></pre>"
5332,2,5323,"2008-08-07 21:20:11",15,NULL,"<p>Like a lot of things, it's a good idea that often gets carried too far. I like a div+css driven layout because it's usually quite easy to change the appearance, even drastically, just through the stylesheet. It's also nice to be friendly to lower-level browsers, screen readers, etc. But like most decisions in programming, the purpose of the site and the cost of development should be considered in making a decision. Neither side is the right way to go 100% of the time.</p>&#xD;&#xA;&#xD;&#xA;<p>BTW, I think everyone agrees that tables <em>should</em> be used for tabular data.</p>"
5338,2,5323,"2008-08-07 21:22:25",1,NULL,"<p>Business reason for CSS layout: You can blow away the customers by saying &quot;our portal is totally customizable/skinnable without writing code!&quot;</p>&#xD;&#xA;&#xD;&#xA;<p>Then again, I don't see any evil in designing block elements with tables. By block elements I mean where it doesn't make any sense to break apart the said element in different designs. </p>&#xD;&#xA;&#xD;&#xA;<p>So, tabular data would best be presented with tables, of course. Designing major building blocks (such as a menu bar, news ticker, etc.) within their own tables should be OK as well. Just don't rely on tables for the overall page layout and you'll be fine, methinks.</p>"
5339,2,5323,"2008-08-07 21:23:56",4,NULL,"<p>The <em>idea</em> is that Designers can Design and Web Developers can implement. This is especially the case in dynamic web applications where you do not want your Designers to mess around in your Source Code.</p>&#xD;&#xA;&#xD;&#xA;<p>Now, while there are templating engines, Designers apparantly just love to go crazy and CSS allows to pull a lot more stunts than tables.</p>&#xD;&#xA;&#xD;&#xA;<p>That being said: As a developer, i abandoned CSS Layout mostly because my Design sucks anyway, so at least it can suck properly :-) But if I would ever hire a Designer, I would let him use whatever his WYSIWYG Editor spits out.</p>"
5341,2,5323,"2008-08-07 21:25:08",6,NULL,"<p>Keep your layout and your content separate allows you to redesign or make tweaks and changes to your site easily.  It may take a bit longer up front, but <strong>the longest phase of software development is maintenance</strong>.  A css friendly site with clear separation between content and design is best over the course of maintenance.</p>"
5345,2,5323,"2008-08-07 21:26:42",8,NULL,"<p>Using semantic HTML design is one of those things where you don't know what you're missing unless you make a practice of it. I've worked on several sites where the site was restyled after the fact with little or no impact to the server-side code.</p>&#xD;&#xA;&#xD;&#xA;<p>Restyling sites is a very common request, something that I've noticed more now that I'm able to say &quot;yes&quot; to instead of try to talk my way out of.</p>&#xD;&#xA;&#xD;&#xA;<p>And, once you've learned to work with the page layout system, it's usually no harder than table based layout.</p>"
5355,2,5323,"2008-08-07 21:39:07",0,NULL,"<p>:: nods at palmsey and Jon Galloway ::</p>&#xD;&#xA;&#xD;&#xA;<p>I agree with the maintainability factor. It does take me a bit longer to get my initial layouts done (since I'm still a jedi apprentice in the CSS arts) but doing a complete revamp of a 15 page web site just by updating 1 file is heaven.</p>"
5395,2,5323,"2008-08-07 22:09:54",0,NULL,"<p>Some additional reasons why this is good practice:</p>&#xD;&#xA;&#xD;&#xA;<ul>&#xD;&#xA;<li>Accessibility - the web should ideally be&#xD;&#xA;accessible by all</li>&#xD;&#xA;<li>Performance - save&#xD;&#xA;    bandwidth and load faster on mobile&#xD;&#xA;    devices (these lack bandwidth to some&#xD;&#xA;    degree and cannot layout complex&#xD;&#xA;    tables quickly). Besides loading fast is always a good thing...</li>&#xD;&#xA;</ul>"
5402,2,5323,"2008-08-07 22:16:25",6,NULL,"<p>In my experience, the only time this really adds business value is when there is a need for 100% support for accessibility. When you have users who are visually impaired and/or use screenreaders to view your site, you need to make sure that your site is compliant to accessibility standards.</p>&#xA;&#xA;<p><strike>Users that use screenreaders will tend to have their own high-contrast, large-font stylesheet (if your site doesn't supply one itself) which makes it easy for screenreaders to parse the page.</strike></p>&#xA;&#xA;<p><strike>When a screenreader reads a page and sees a table, it'll tell the user it's a table. Hence, if you use a table for layout, it gets very confusing because the user doesn't know that the content of the table is actually the article instead of some other tabular data.</strike> A menu should be a list or a collection of divs, not a table with menu items, again that's confusing. You should make sure that you use blockquotes, alt-tags title attributes, etc to make it more readable.</p>&#xA;&#xA;<p>If you make your design CSS-driven, then your entire look and feel can be stripped away and replaced with a raw view which is very readable to those users. If you have inline styles, table-based layouts, etc, then you're making it harder for those users to parse your content.</p>&#xA;&#xA;<p>While I do feel that maintenance is made easier for <em>some</em> things when your site is purely laid out with CSS, I don't think it's the case for all kinds of maintenance -- especially when you're dealing with cross-browser CSS, which can obviously be a nightmare.</p>&#xA;&#xA;<p>In short, your page should describe its make-up in a standards compliant way if you want it to be accessible to said users. If you have no need/requirement and likely won't need it in the future, then don't bother wasting too much time attempting to be a CSS purist :) Use the mixture of style and layout techniques that suits you and makes your job easier.</p>&#xA;&#xA;<p>Cheers!</p>&#xA;&#xA;<p>[EDIT - added strikethrough to wrong or misleading parts of this answer - see comments]</p>&#xA;"
5417,2,5323,"2008-08-07 22:25:25",9,NULL,"<p>In the real world, your chances of taking one design and totally reskinning it without touching the markup are pretty remote. It's fine for blogs and concocted demos like the csszengarden, but it's a bogus benefit on any site with a moderately complex design, really. Using a CMS is far more important.</p>&#xD;&#xA;&#xD;&#xA;<p>DIVs plus CSS != semantic, either. Good HTML is well worthwhile for SEO and accessibility always, whether tables or CSS are used for layout. You get really efficient, fast web designs by combining really simple tables with some good CSS. </p>&#xD;&#xA;&#xD;&#xA;<p>Table layouts can be more accessible than CSS layouts, and the reverse is also true - it depends TOTALLY on the source order of the content, and just because you avoided tables does not mean users with screen readers will automatically have a good time on your site. Layout tables are irrelevant to screen reader access provided the content makes sense when linearised, exactly the same as if you do CSS layout. Data tables are different; they are really hard to mark up properly and even then the users of screen reader software generally don't know the commands they need to use to understand the data. </p>&#xD;&#xA;&#xD;&#xA;<p>Rather than agonising over using a few layout tables, you should worry that heading tags and alt text are used properly, and that form labels are properly assigned. Then you'll have a pretty good stab at real world accessibility.</p>&#xD;&#xA;&#xD;&#xA;<p>This from several years experience running user testing for web accessibility, specialising in accessible site design, and from consulting for Cahoot, an online bank, on this topic for a year. </p>&#xD;&#xA;&#xD;&#xA;<p>So my answer to the poster is no, there is no business reason to prefer CSS over tables. It's more elegant, more satisfying and more correct, but you as the person building it and the person that has to maintain it after you are the only two people in the world who give a rat's ass whether it's CSS or tables.</p>"
5421,2,5323,"2008-08-07 22:28:52",0,NULL,"<blockquote>&#xD;&#xA;  <blockquote>&#xD;&#xA;    <p>When a screenreader reads a page and sees a table, it'll tell the user it's a table. Hence, if you use a table for layout, it gets very confusing because the user doesn't know that the content of the table is actually the article instead of some other tabular data</p>&#xD;&#xA;  </blockquote>&#xD;&#xA;</blockquote>&#xD;&#xA;&#xD;&#xA;<p>This is actually not true; screen readers like JAWS, Window Eyes and HAL ignore layout tables. They work really well at dealing with the real web.</p>"
5423,2,5323,"2008-08-07 22:29:08",6,NULL,"<p>One other thing I just remembered, you can assign a different stylesheet to a page for printing vs. display.</p>&#xD;&#xA;&#xD;&#xA;<p>In addition to your normal stylesheet definition, you can add the following tag</p>&#xD;&#xA;&#xD;&#xA;<pre><code>&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; media=&quot;print&quot; href=&quot;PrintStyle.css&quot; /&gt;&#xD;&#xA;</code></pre>&#xD;&#xA;&#xD;&#xA;<p>Which will render the document according to that style when you send it to the printer. This allows you to strip out the background images, additional header/footer information and just print the raw information without creating a separate module.</p>"
5429,2,5323,"2008-08-07 22:31:17",6,NULL,"<blockquote>&#xD;&#xA;  <blockquote>&#xD;&#xA;    <p>doing a complete revamp of a 15 page web site just by updating 1 file is heaven.</p>&#xD;&#xA;  </blockquote>&#xD;&#xA;</blockquote>&#xD;&#xA;&#xD;&#xA;<p>This is true. Unfortunately, having one CSS file used by 15,000 complex and widely differing pages is your worst nightmare come true. Change something - did it break a thousand pages? Who knows?</p>&#xD;&#xA;&#xD;&#xA;<p>CSS is a double-edged sword on big sites like ours.</p>"
5474,2,5323,"2008-08-07 23:22:58",6,NULL,"<p>If you have a public facing website, the real business case is SEO.  </p>&#xA;&#xA;<p>Accessibility is important and maintaining semantic (X)HTML <strong>is</strong> much easier than maintaining table layouts, but that #1 spot on Google will bring home the bacon.</p>&#xA;&#xA;<p>For example:  <a href=&quot;http://latimesblogs.latimes.com/readers/2008/08/colleagues-we-c.html&quot; rel=&quot;nofollow&quot;>Monthly web report: 127 million page views for July</a></p>&#xA;&#xA;<blockquote>&#xA;  <p>Monthly web report: 127 million page views for July</p>&#xA;  &#xA;  <p>...</p>&#xA;  &#xA;  <p>Latimes.com keeps getting better at SEO (search engine optimization), which means our stories are ranking higher in Google and other search engines. We are also performing better on sites like Digg.com. All that adds up to more exposure and more readership than ever before.</p>&#xA;</blockquote>&#xA;&#xA;<p>If you look at their site, they've got a pretty decent CSS layout going.  </p>&#xA;&#xA;<p>Generally, you find relatively few table layouts performing well in the SERPs these days.</p>&#xA;"
5506,2,5323,"2008-08-08 00:25:47",0,NULL,"<p>I don't think there is a business reason at all. Technical reason, maybe, even so, barely - it is a huge timesuck the world over, and then you look at it in IE and break down and weep.</p>"
5530,2,5323,"2008-08-08 01:09:44",1,NULL,"<blockquote>&#xD;&#xA;  <p>*I would let him use whatever his WYSIWYG Editor spits out <br>&#xD;&#xA;  I just threw-up a little... <br>&#xD;&#xA;  *ahh hello? You don't think the graphic designer is writing the CSS by hand do you?</p>&#xD;&#xA;</blockquote>&#xD;&#xA;&#xD;&#xA;<p>Funnily enough I have worked with a few designers and the best among them <strong><em>do</em></strong> hand-tweak their css. The guy I am thinking of actually does all of his design work as an XHTML file with a couple of CSS files and creates graphical elements on the fly as he needs them. He uses Dreamweaver but only really as a navigation tool. (I learned a lot from that guy)</p>&#xD;&#xA;&#xD;&#xA;<p>Once you've made an investment to learn purely CSS-based design and have had a little experience (found out where IE sucks [to be fair it's getting better]) it ends up being faster I've found. I worked on Content Management Systems and the application rarely had to change for the designers to come up with a radically different look.</p>"
75488,2,5323,"2008-09-16 18:31:33",19,NULL,"<p>Since this is stack**overflow**, I'll give you my <em>programmer's answer</em></p>&#xA;&#xA;semantics 101&#xA;&#xA;<p>First take a look at this code and think about what's wrong here...</p>&#xA;&#xA;<pre><code>class car {&#xA;    int wheels = 4;&#xA;    string engine;&#xA;}&#xA;&#xA;car mybike = new car();&#xA;mybike.wheels = 2;&#xA;mybike.engine = null;&#xA;</code></pre>&#xA;&#xA;<p>The problem, of course, is that a bike is not a car. The car class is an inappropriate class for the bike instance.  The code is error-free, but is semantically incorrect.  It reflects poorly on the programmer.</p>&#xA;&#xA;semantics 102&#xA;&#xA;<p>Now apply this to document markup.  If your document needs to present tabular data, then the appropriate tag would be <code>&lt;table&gt;</code>. If you place navigation into a table however, then you're misusing the intended purpose of the <code>&lt;table&gt;</code> element.  In the second case, you're not presenting tabular data -- you're (mis)using the <code>&lt;table&gt;</code> element to achieve a presentational goal.</p>&#xA;&#xA;conclusion&#xA;&#xA;<p>Whom does this hurt? No one. Who benefits if you use semantic markup?  You -- and your professional reputation.  Now go and do the right thing.</p>&#xA;"
208308,2,5323,"2008-10-16 12:20:17",1,NULL,"<p>Besides being easily updatable and compliant...</p>&#xA;&#xA;<p>I use to design all table based web sites and I was resistant at first, but little by little I moved to CSS. It did not happen overnight, but it happened and it is something you should do as well.</p>&#xA;&#xA;<p>There have been some nights I wanted to toss my computer out the window because the style I was applying to a div was not doing what I want, but you learn from those obstacles.</p>&#xA;&#xA;<p>As for a business, once you get to designing web sites by CSS down to a science, you can develop processes for each site and even use past web sites and just add a different header graphic, color, etc.</p>&#xA;&#xA;<p>Also, be sure to embed/include all reusable parts of your website: header, sub-header, footer.</p>&#xA;&#xA;<p>Once you get over the hump, it will be all down hill from there. Good luck!</p>&#xA;"
208501,2,5323,"2008-10-16 13:16:57",7,NULL,"<p>The main reason why we changed our web pages to DIV/CSS based layout was the delay in rendering table based pages. </p>&#xA;&#xA;<p>We have a public web site, with most of its users base is in countries like India, where the internet bandwidth is still an issue (its getting improved day by day, but still not on par). In such circumstances, when we used table based layout,  users had to stare at a blank page for considerably long time. Then the entire page will get displayed as a whole in a tick. By converting our pages to DIV, we managed to bring some contents to the browser almost instantly as users entered to our web site, and those contents where enough to get the users engaged till browser downloads entire contents of the page. </p>&#xA;&#xA;<p>The major flaw with table based implementation is that, the browser we will show the content of the table only after it downloads the entire html for that table. The issue will blow out when we have a main table which wraps the entire content of the page, and when we have lots of nested tables. For the 'flexible tables' (those without any fixed width), after downloading entire table tag, browser has to parse till the last row of the table to find out the width of each columns, then has to parse it again for displaying the content. Till all these happens users has to stare at a blank screen, then everything will come to screen in a tick.</p>&#xA;"
394955,2,5323,"2008-12-27 12:34:42",0,NULL,"<p>There definitely is. If you are still striving for it, you are not getting it right.</p>&#xA;&#xA;<p>DIV+CSS layout is actually much easier than table layout in terms of maintainability and productivity. Just keep practicing it before it's too early to say that.</p>&#xA;&#xA;<p>Table layout is good too it's just not meant for layouts and have exceptional drawbacks when it comes to minor tuning.</p>&#xA;"
5822,2,5821,"2008-08-08 11:59:36",161,NULL,"<p><a href=&quot;http://msdn.microsoft.com/en-us/library/aa933232%28SQL.80%29.aspx&quot;>T-SQL Reference for LIKE for SQL Server 2000</a>:</p>&#xD;&#xA;&#xD;&#xA;<blockquote>&#xD;&#xA;  <p>You can use the wildcard pattern matching characters as literal characters. To use a wildcard character as a literal character, enclose the wildcard character in brackets. The table shows several examples of using the LIKE keyword and the [ ] wildcard characters.</p>&#xD;&#xA;</blockquote>&#xD;&#xA;&#xD;&#xA;<p>For your case:</p>&#xD;&#xA;&#xD;&#xA;<pre><code>... LIKE '%[_]d'&#xD;&#xA;</code></pre>"
10415670,2,5821,"2012-05-02 14:20:40",53,NULL,"<p>Obviously @Lasse solution is right, but there's another way to solve your problem: T-SQL operator <code>LIKE</code> defines the optional <a href=&quot;http://msdn.microsoft.com/en-us/library/ms179859%28v=sql.90%29.aspx&quot;>ESCAPE</a> clause, that lets you declare a character which will escape the next character into the pattern.</p>&#xA;&#xA;<p>For your case, the following WHERE clauses are equivalent:</p>&#xA;&#xA;<pre><code>WHERE username LIKE '%[_]d';            -- @Lasse solution&#xA;WHERE username LIKE '%$_d' ESCAPE '$';&#xA;WHERE username LIKE '%^_d' ESCAPE '^';&#xA;</code></pre>&#xA;"
5923,2,5916,"2008-08-08 13:40:56",3,NULL,"<p>I use <a href=&quot;http://macromates.com/&quot; rel=&quot;nofollow&quot;>Textmate</a> (Mac only) which has Code folding and I find it really useful for folding functions, I know what my &quot;getGet&quot; function does, I don't need it taking up 10 lines of oh so valuable screen space.</p>&#xD;&#xA;&#xD;&#xA;<p>I never use it to hide a for loop, if statement or similar unless showing the code to someone else where I will hide code they have seen to avoid showing the same code twice.</p>"
5929,2,5916,"2008-08-08 13:42:09",13,NULL,"<p>This was talked about on <a href=&quot;http://www.codinghorror.com/blog/archives/001147.html&quot;>Coding Horror</a>.</p>&#xA;&#xA;<p>My personal belief is that is that they are useful, but like anything in excess can be too much. </p>&#xA;&#xA;<p>I use it to order my code blocks into :&#xA;<br>Enumerations&#xA;<br>Declarations&#xA;<br>Constructors&#xA;<br>Methods&#xA;<br>Event Handlers&#xA;<br>Properties</p>&#xA;"
5930,2,5916,"2008-08-08 13:42:57",1,NULL,"<p>I personally use #Regions all the time. I find that it helps me to keep things like properties, declarations, etc separated from each other.</p>&#xD;&#xA;&#xD;&#xA;<p>This is probably a good answer, too!</p>&#xD;&#xA;&#xD;&#xA;<p><a href=&quot;http://www.codinghorror.com/blog/archives/001147.html&quot; rel=&quot;nofollow&quot;>Coding Horror</a></p>&#xD;&#xA;&#xD;&#xA;<p>Edit: Dang, Pat beat me to this!</p>"
5953,2,5916,"2008-08-08 13:56:59",5,NULL,"<p>While I understand the problem that Jeff, et. al. have with regions, what I <em>don't</em> understand is why hitting CTRL-M,CTRL-L to expand all regions in a file is so difficult to deal with.</p>"
5954,2,5916,"2008-08-08 13:57:32",0,NULL,"<p>I prefer #regions myself, but an old coworker couldn't stand to have things hidden. I understood his point once I worked on a page with 7 #regions, at least 3 of which had been auto-generated and had the same name, but in general I think they're a useful way of splitting things up and keeping everything less cluttered.</p>"
5962,2,5916,"2008-08-08 14:01:17",3,NULL,"<p>I prefer partial classes as opposed to regions.</p>&#xD;&#xA;&#xD;&#xA;<p>Extensive use of regions by others also give me the impression that someone, somewhere, is violating the Single Responsibility Principle and is trying to do too many things with one object.</p>"
5971,2,5916,"2008-08-08 14:08:10",2,NULL,"<p>I'm not a fan of partial classes - I try to develop my classes such that each class has a very clear, single issue for which it's responsible. To that end, I don't believe that something with a clear responsibility should be split across multiple files. That's why I don't like partial classes.</p>&#xD;&#xA;&#xD;&#xA;<p>With that said, I'm on the fence about regions. For the most part, I don't use them; however, I work with code every day that includes regions - some people go really heavy on them (folding up private methods into a region and then each method folded into its own region), and some people go light on them (folding up enums, folding up attributes, etc). My general rule of thumb, as of now, is that I only put code in regions if (a) the data is likely to remain static or will not be touched very often (like enums), or (b) if there are methods that are implemented out of necessity because of subclassing or abstract method implementation, but, again, won't be touched very often.</p>"
5972,2,5916,"2008-08-08 14:08:28",8,NULL,"<p>Sometimes you might find yourself working on a team where #regions are encouraged or required. If you're like me and you can't stand messing around with folded code you can turn off outlining for C#:</p>&#xA;&#xA;<ol>&#xA;<li>Options -> Text Editor -> C# -> Advanced Tab</li>&#xA;<li>Uncheck &quot;Enter outlining mode when files open&quot;</li>&#xA;</ol>&#xA;"
5990,2,5916,"2008-08-08 14:24:51",5,NULL,"<p>I use #Region to hide ugly and useless automatically generated code, which really belongs in the automatically generated part of the partial class. But, when working with old projects or upgraded projects, you don't always have that luxury.</p>&#xD;&#xA;&#xD;&#xA;<p>As for other types of folding, I fold Functions all the time. If you name the function well, you will never have to look inside unless you're testing something or (re-)writing it.</p>"
6287,2,5916,"2008-08-08 19:26:52",3,NULL,"<P>@<A href=&quot;http://stackoverflow.com/questions/5916/how-do-you-feel-about-code-folding#5971&quot; rel=&quot;nofollow&quot;>Tom</A></P>&#xD;&#xA;<P>Partial classes are provided so that you can separate tool auto-generated code from any customisations you may need to make after the code gen has done its bit. This means your code stays intact after you re-run the codegen and doesn't get overwritten. This is a good thing. </P>"
6295,2,5916,"2008-08-08 19:30:57",0,NULL,"<p>I really don't have a problem with using #region to organize code.  Personally, I'll usually setup different regions for things like properties, event handlers, and public/private methods.</p>"
7752,2,5916,"2008-08-11 13:01:56",0,NULL,"<p>Eclipse does some of this in Java (or PHP with plugins) on its own. Allows you to fold functions and such. I tend to like it. If I know what a function does and I am not working on it, I dont need to look at it.</p>&#xA;"
7767,2,5916,"2008-08-11 13:17:40",28,NULL,"<p>9 out of 10 times, code folding means that you have failed to use the <a href=&quot;http://en.wikipedia.org/wiki/Separation_of_concerns&quot;>SoC principle</a> for what its worth.<br />&#xA;I more or less feel the same thing about partial classes. If you have a piece of code you think is too big you need to chop it up in manageable (and reusable) parts, not hide or split it up.<br />It will bite you the next time someone needs to change it, and cannot see the logic hidden in a 250 line monster of a method.<br />&#xA;<br />&#xA;Whenever you can, pull some code out of the main class, and into a helper or factory class.&#xA;<br /></p>&#xA;&#xA;<pre><code>foreach (var item in Items)&#xA;{&#xA;    //.. 100 lines of validation and data logic..&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>is not as readable as</p>&#xA;&#xA;<pre><code>foreach (var item in Items)&#xA;{&#xA;    if (ValidatorClass.Validate(item))&#xA;        RepositoryClass.Update(item);&#xA;}&#xA;</code></pre>&#xA;&#xA;<p><br />&#xA;<br />&#xA;My $0.02 anyways.</p>&#xA;"
9049,2,5916,"2008-08-12 17:00:35",2,NULL,"<p>Regions must never be used inside methods. They may be used to group methods but this must be handled with extreme caution so that the reader of the code does not go insane. There is no point in folding methods by their modifiers. But sometimes folding may increase readability. For e.g. grouping some methods that you use for working around some issues when using an external library and you won't want to visit too often may be helpful. But the coder must always seek for solutions like wrapping the library with appropriate classes in this particular example. When all else fails, use folding for improving readibility.</p>&#xA;"
9053,2,5916,"2008-08-12 17:06:11",1,NULL,"<p>I think that it's a useful tool, when used properly. In many cases, I feel that methods and enumerations and other things that are often folded should be little black boxes. Unless you must look at them for some reason, their contents don't matter and should be as hidden as possible. However, I never fold private methods, comments, or inner classes. Methods and enums are really the only things I fold.</p>&#xA;"
9063,2,5916,"2008-08-12 17:22:38",1,NULL,"<p>My approach is similar to a few others here, using regions to organize code blocks into constructors, properties, events, etc.</p>&#xA;&#xA;<p>There's an excellent set of VS.NET macros by Roland Weigelt available from his blog entry, <a href=&quot;http://weblogs.asp.net/rweigelt/archive/2003/07/06/9741.aspx&quot; rel=&quot;nofollow&quot;>Better Keyboard Support for #region ... #endregion</a>.  I've been using these for years, mapping ctrl+. to collapse the current region and ctrl++ to expand it.  Find that it works a lot better that the default VS.NET functionality which folds/unfolds everything.</p>&#xA;"
14568,2,5916,"2008-08-18 13:20:24",0,NULL,"<p>The <a href=&quot;http://www.codinghorror.com/blog/archives/001147.html&quot; rel=&quot;nofollow&quot; title=&quot;Coding Horror&quot;>Coding Horror</a> article actual got me thinking about this as well.</p>&#xA;&#xA;<p>Generally, I large classes I will put a region around the member variables, constants, and properties to reduce the amount of text I have to scroll through and leave everything else outside of a region. On forms I will generally group things into &quot;member variables, constants, and properties&quot;, form functions, and event handlers. Once again, this is more so I don't have to scroll through a lot of text when I just want to review some event handlers.</p>&#xA;"
25984,2,5916,"2008-08-25 12:55:20",0,NULL,"<p>Emacs has a folding minor mode, but I only fire it up occasionally. Mostly when I'm working on some monstrosity inherited from another physicist who evidently had less instruction or took less care about his/her coding practices. </p>&#xA;"
26003,2,5916,"2008-08-25 13:14:37",2,NULL,"<p>This is just one of those silly discussions that lead to nowhere. If you like regions, use them. If you don't, configure your editor to turn them off. There, everybody is happy.</p>&#xA;"
33023,2,5916,"2008-08-28 18:32:08",0,NULL,"<p>Using regions (or otherwise folding code) <strong>should</strong> have nothing to do with code smells (or hiding them) or any other idea of hiding code you don't want people to &quot;easily&quot; see.</p>&#xA;&#xA;<p>Regions and code folding is really all about providing a way to easily group sections of code that can be collapsed/folded/hidden to minimize the amount of extraneous &quot;noise&quot; around what you are currently working on. If you set things up correctly (meaning actually name your regions something useful, like the name of the method contained) then you can collapse everything except for the function you are currently editing and still maintain some level of context without having to actually see the other code lines.</p>&#xA;&#xA;<p>There probably should be some best practice type guidelines around these ideas, but I use regions extensively to provide a standard structure to my code files (I group events, class-wide fields, private properties/methods, public properties/methods). Each method or property also has a region, where the region name is the method/property name. If I have a bunch of overloaded methods, the region name is the full signature and then that entire group is wrapped in a region that is just the function name.</p>&#xA;"
217785,2,5916,"2008-10-20 08:34:41",1,NULL,"<p>Region folding would be fine if I didn't have to manually maintain region groupings based on features of my code that are intrinsic to the language. For example, the compiler already knows it's a constructor. The IDE's code model already knows it's a constructor. But if I want to see a view of the code where the constructors are grouped together, for some reason I have to restate the fact that these things are constructors, by physically placing them together and then putting a group around them. The same goes for any other way of slicing up a class/struct/interface. What if I change my mind and want to see the public/protected/private stuff separated out into groups first, and then grouped by member kind?</p>&#xA;&#xA;<p>Using regions to mark out public properties (for example) is as bad as entering a redundant comment that adds nothing to what is already discernable from the code itself.</p>&#xA;&#xA;<p>Anyway, to avoid having to use regions for that purpose, I wrote a free, open source Visual Studio 2008 IDE add-in called Ora. It provides a grouped view automatically, making it far less necessary to maintain physical grouping or to use regions. <a href=&quot;http://www.codeplex.com/ora&quot; rel=&quot;nofollow&quot;>You may find it useful</a>.</p>&#xA;"
296577,2,5916,"2008-11-17 19:23:12",2,NULL,"<p>I generally find that when dealing with code like Events in C# where there's about 10 lines of code that are actually just part of an event declaration (the EventArgs class the delegate declaration and the event declaration) Putting a region around them and then folding them out of the way makes it a little more readable. </p>&#xA;"
9030438,2,5916,"2012-01-27 08:00:41",0,NULL,"<p>I personally hate regions. The only code that should be in regions in my opinion is generated code.&#xA;When I open file I always start with Ctrl+M+O. This folds to method level. When you have regions you see nothing but region names.</p>&#xA;&#xA;<p>Before checking in I group methods/fields logically so that it looks ok after Ctrl+M+O.&#xA;If you need regions you have to much lines in your class. I also find that this is very common.</p>&#xA;&#xA;<h1>region ThisLooksLikeWellOrganizedCodeBecauseIUseRegions</h1>&#xA;&#xA;<p>// total garbage, no structure here</p>&#xA;&#xA;<h1>endregion</h1>&#xA;"
14829202,2,5916,"2013-02-12 09:23:15",0,NULL,"<p>Enumerations</p>&#xA;&#xA;<p>Properties</p>&#xA;&#xA;<p>.ctors</p>&#xA;&#xA;<p>Methods</p>&#xA;&#xA;<p>Event Handlers</p>&#xA;&#xA;<p>That's all I use regions for.  I had no idea you could use them inside of methods.</p>&#xA;&#xA;<p>Sounds like a terrible idea :)</p>&#xA;"
6177,2,6173,"2008-08-08 17:29:50",2,NULL,"<p>Look at the URI specification. That could help you a lot. And as far as performance goes, you can pretty much extract all the HTTP links in a modest web page. When I say modest I definitely do not mean one page all encompassing HTML manuals like that of ELisp manual. Also performance is a touchy topic. My advice would be to measure your performance and then decide if you are going to extract all the links using one single regex or with multiple simpler regex expressions.</p>&#xD;&#xA;&#xD;&#xA;<p><a href=&quot;http://gbiv.com/protocols/uri/rfc/rfc3986.html&quot; rel=&quot;nofollow&quot;>http://gbiv.com/protocols/uri/rfc/rfc3986.html</a></p>"
6179,2,6173,"2008-08-08 17:29:58",0,NULL,"<p>URL's?  As in images/scripts/css/etc.?</p>&#xA;&#xA;<blockquote>&#xA;  <p><code>%href=&quot;(.[&quot;]*)&quot;%</code></p>&#xA;</blockquote>&#xA;"
6181,2,6173,"2008-08-08 17:31:35",0,NULL,"<p>This will capture the URLs from all a tags as long as the author of the HTML used quotes:</p>&#xD;&#xA;&#xD;&#xA;<pre><code>&lt;a[^&gt;]+href=&quot;([^&quot;]+)&quot;[^&gt;]*&gt;<br></code></pre>&#xD;&#xA;&#xD;&#xA;<p>I made an example <a href=&quot;http://www.rubular.com/regexes/840&quot; rel=&quot;nofollow&quot;>here</a>.</p>"
6182,2,6173,"2008-08-08 17:32:02",1,NULL,"<p>I don't have time to try and think of a regex that probably won't work, but I wanted to comment that you should most definitely break up your regex, at least if it gets to <a href=&quot;http://www.codinghorror.com/blog/archives/000214.html&quot; rel=&quot;nofollow&quot;>this level of ugliness</a>:</p>&#xD;&#xA;&#xD;&#xA;<pre><code>(?:(?:\r\n)?[ \t])*(?:(?:(?:[^()&lt;&gt;@,;:\\&quot;.\[\] \000-\031]+(?:(?:(?:\r\n)?[ \t]&#xD;&#xA;)+|\Z|(?=[\[&quot;()&lt;&gt;@,;:\\&quot;.\[\]]))|&quot;(?:[^\&quot;\r\\]|\\.|(?:(?:\r\n)?[ \t]))*&quot;(?:(?:&#xD;&#xA;\r\n)?[ \t])*)(?:\.(?:(?:\r\n)?[ \t])*(?:[^()&lt;&gt;@,;:\\&quot;.\[\] \000-\031]+(?:(?:(&#xD;&#xA;?:\r\n)?[ \t])+|\Z|(?=[\[&quot;()&lt;&gt;@,;:\\&quot;.\[\]]))|&quot;(?:[^\&quot;\r\\]|\\.|(?:(?:\r\n)?[ &#xD;&#xA;\t]))*&quot;(?:(?:\r\n)?[ \t])*))*@(?:(?:\r\n)?[ \t])*(?:[^()&lt;&gt;@,;:\\&quot;.\[\] \000-\0&#xD;&#xA;....*SNIP*....&#xD;&#xA;*))*@(?:(?:\r\n)?[ \t])*(?:[^()&lt;&gt;@,;:\\&quot;.\[\] \000-\031]+(?:(?:(?:\r\n)?[ \t])&#xD;&#xA;+|\Z|(?=[\[&quot;()&lt;&gt;@,;:\\&quot;.\[\]]))|\[([^\[\]\r\\]|\\.)*\](?:(?:\r\n)?[ \t])*)(?:\&#xD;&#xA;.(?:(?:\r\n)?[ \t])*(?:[^()&lt;&gt;@,;:\\&quot;.\[\] \000-\031]+(?:(?:(?:\r\n)?[ \t])+|\Z&#xD;&#xA;|(?=[\[&quot;()&lt;&gt;@,;:\\&quot;.\[\]]))|\[([^\[\]\r\\]|\\.)*\](?:(?:\r\n)?[ \t])*))*\&gt;(?:(&#xD;&#xA;?:\r\n)?[ \t])*))*)?;\s*)&#xD;&#xA;</code></pre>&#xD;&#xA;&#xD;&#xA;<p>(this supposedly matches email addresses)</p>&#xD;&#xA;&#xD;&#xA;<p>Edit: I can't even fit it on one post it's so nasty....</p>"
6183,2,6173,"2008-08-08 17:32:12",10,NULL,"<p>((mailto\:|(news|(ht|f)tp(s?))\://){1}\S+)</p>&#xA;&#xA;<p>I took this from <a href=&quot;http://regexlib.com/Search.aspx?k=URL&quot; rel=&quot;nofollow&quot;>regexlib.com</a></p>&#xA;&#xA;<p>[editor's note: the {1} has no real function in this regex; <a href=&quot;http://stackoverflow.com/questions/13470/question-about-specific-regular-expression&quot; rel=&quot;nofollow&quot;>see this post</a>]</p>&#xA;"
6202,2,6173,"2008-08-08 17:52:29",1,NULL,"<p>All HTTP's and MAILTO's</p>&#xD;&#xA;&#xD;&#xA;<pre><code>([&quot;'])(mailto:|http:).*?\1<br></code></pre>&#xD;&#xA;&#xD;&#xA;<p>All links, including relative ones, that are called by href or src.</p>&#xD;&#xA;&#xD;&#xA;<pre><code>#Matches things in single or double quotes, but not the quotes themselves<br>(?&lt;=([&quot;']))((?&lt;=href=['&quot;])|(?&lt;=src=['&quot;])).*?(?=\1)<br><br>#Maches thing in either double or single quotes, including the quotes.<br>([&quot;'])((?&lt;=href=&quot;)|(?&lt;=src=&quot;)).*?\1<br></code></pre>&#xD;&#xA;&#xD;&#xA;<p>The second one will only get you links that use double quotes, however.</p>"
13446,2,6173,"2008-08-17 01:08:30",4,NULL,"<p>With <a href=&quot;http://www.codeplex.com/htmlagilitypack&quot; rel=&quot;nofollow&quot; title=&quot;Human Interface Guidelines&quot;>Html Agility Pack</a>, you can use:</p>&#xA;&#xA;<pre><code>HtmlDocument doc = new HtmlDocument();&#xA;doc.Load(&quot;file.htm&quot;);&#xA;foreach(HtmlNode link in doc.DocumentElement.SelectNodes(&quot;//a@href&quot;)&#xA;{&#xA;Response.Write(link[&quot;href&quot;].Value;&#xA;}&#xA;doc.Save(&quot;file.htm&quot;);&#xA;</code></pre>&#xA;"
13488,2,6173,"2008-08-17 03:00:34",8,NULL,"<p>from the RegexBuddy library:</p>&#xA;&#xA;<h2>URL: Find in full text</h2>&#xA;&#xA;<p>The final character class makes sure that if an URL is part of some text, punctuation such as a comma or full stop after the URL is not interpreted as part of the URL.</p>&#xA;&#xA;<blockquote>&#xA;  <p><code>\b(https?|ftp|file)://[-A-Z0-9+&amp;@#/%?=~_|!:,.;]*[-A-Z0-9+&amp;@#/%=~_|]</code></p>&#xA;</blockquote>&#xA;"
12285635,2,6173,"2012-09-05 16:14:25",0,NULL,"<p>according to <a href=&quot;http://tools.ietf.org/html/rfc3986&quot; rel=&quot;nofollow&quot;>http://tools.ietf.org/html/rfc3986</a></p>&#xA;&#xA;<p>extracting url from ANY text (not only HTML)</p>&#xA;&#xA;<pre><code>(http\\://[:/?#\\[\\]@!%$&amp;'()*+,;=a-zA-Z0-9._\\-~]+)&#xA;</code></pre>&#xA;"
7385,2,7244,"2008-08-10 22:53:06",16,NULL,"<p>Darren, that would work if the types were specific enumerations - for general enumerations to work you have to cast them to ints (or more likely uint) to do the boolean math:</p>&#xA;&#xA;<pre><code>public static bool IsSet( this Enum input, Enum matchTo )&#xA;{&#xA;    return ( Convert.ToUInt32( input ) &amp; Convert.ToUInt32( matchTo ) ) != 0;&#xA;}&#xA;</code></pre>&#xA;"
13517,2,7244,"2008-08-17 04:51:39",1,NULL,"<p>Using your original code, inside the method you can also use reflection to test that T is an enum:</p>&#xA;&#xA;<pre><code>public static class EnumExtension&#xA;{&#xA;    public static bool IsSet&lt;T&gt;( this T input, T matchTo )&#xA;    {&#xA;        if (!typeof(T).IsEnum)&#xA;        {&#xA;            throw new ArgumentException(&quot;Must be an enum&quot;, &quot;input&quot;);&#xA;        }&#xA;        return (input &amp; matchTo) != 0;&#xA;    }&#xA;}&#xA;</code></pre>&#xA;"
1188323,2,7244,"2009-07-27 14:02:01",2,NULL,"<p>The way I do it is put a struct constraint, then check that T is an enum at runtime. This doesn't eliminate the problem completely, but it does reduce it somewhat</p>&#xA;"
1409873,2,7244,"2009-09-11 09:12:34",36,NULL,"<p><strong>EDIT: This is now live in version 0.0.0.2 of UnconstrainedMelody.</strong></p>&#xA;&#xA;<p>(As requested on my <a href=&quot;http://msmvps.com/blogs/jon%5Fskeet/archive/2009/09/11/1722426.aspx&quot;>blog post about enum constraints</a>. I've included the basic facts below for the sake of a standalone answer.)</p>&#xA;&#xA;<p>The best solution is to wait for me to include it in <a href=&quot;http://code.google.com/p/unconstrained-melody/&quot;>UnconstrainedMelody</a><sup>1</sup>. This is a library which takes C# code with &quot;fake&quot; constraints such as</p>&#xA;&#xA;<pre><code>where T : struct, IEnumConstraint&#xA;</code></pre>&#xA;&#xA;<p>and turns it into</p>&#xA;&#xA;<pre><code>where T : struct, System.Enum&#xA;</code></pre>&#xA;&#xA;<p>via a postbuild step.</p>&#xA;&#xA;<p>It shouldn't be too hard to write <code>IsSet</code>... although catering for both <code>Int64</code>-based and <code>UInt64</code>-based flags could be the tricky part. (I smell some helper methods coming on, basically allowing me to treat any flags enum as if it had a base type of <code>UInt64</code>.)</p>&#xA;&#xA;<p>What would you want the behaviour to be if you called</p>&#xA;&#xA;<pre><code>tester.IsSet(MyFlags.A | MyFlags.C)&#xA;</code></pre>&#xA;&#xA;<p>? Should it check that <em>all</em> the specified flags are set? That would be my expectation.</p>&#xA;&#xA;<p>I'll try to do this on the way home tonight... I'm hoping to have a quick blitz on useful enum methods to get the library up to a usable standard quickly, then relax a bit.</p>&#xA;&#xA;<p>EDIT: I'm not sure about <code>IsSet</code> as a name, by the way. Options:</p>&#xA;&#xA;<ul>&#xA;<li>Includes</li>&#xA;<li>Contains</li>&#xA;<li>HasFlag (or HasFlags)</li>&#xA;<li>IsSet (it's certainly an option)</li>&#xA;</ul>&#xA;&#xA;<p>Thoughts welcome. I'm sure it'll be a while before anything's set in stone anyway...</p>&#xA;&#xA;<p><hr /></p>&#xA;&#xA;<p><sup>1</sup> or submit it as a patch, of course...</p>&#xA;"
1416703,2,7244,"2009-09-13 02:41:26",6,NULL,"<p>Actually, it is possible, with an ugly trick.&#xA;However, it cannot be used for extension methods.</p>&#xA;&#xA;<pre><code>public abstract class Enums&lt;Temp&gt; where Temp : class {&#xA;    public static TEnum Parse&lt;TEnum&gt;(string name) where TEnum : struct, Temp {&#xA;    	return (TEnum)Enum.Parse(typeof(TEnum), name); &#xA;    }&#xA;}&#xA;public abstract class Enums : Enums&lt;Enum&gt; { }&#xA;&#xA;Enums.IsSet&lt;DateTimeKind&gt;(&quot;Local&quot;)&#xA;</code></pre>&#xA;&#xA;<p>If you want to, you can give <code>Enums&lt;Temp&gt;</code> a private constructor and a public nested abstract inherited class with <code>Temp</code> as <code>Enum</code>, to prevent inherited versions for non-enums.</p>&#xA;"
1416806,2,7244,"2009-09-13 03:57:17",1,NULL,"<p>Here's some code that I just did up that seems to work like you want without having to do anything too crazy. It's not restricted to only enums set as Flags, but there could always be a check put in if need be.</p>&#xA;&#xA;<pre><code>public static class EnumExtensions&#xA;{&#xA;    public static bool ContainsFlag(this Enum source, Enum flag)&#xA;    {&#xA;        var sourceValue = ToUInt64(source);&#xA;        var flagValue = ToUInt64(flag);&#xA;&#xA;        return (sourceValue &amp; flagValue) == flagValue;&#xA;    }&#xA;&#xA;    public static bool ContainsAnyFlag(this Enum source, params Enum[] flags)&#xA;    {&#xA;        var sourceValue = ToUInt64(source);&#xA;&#xA;        foreach (var flag in flags)&#xA;        {&#xA;            var flagValue = ToUInt64(flag);&#xA;&#xA;            if ((sourceValue &amp; flagValue) == flagValue)&#xA;            {&#xA;                return true;&#xA;            }&#xA;        }&#xA;&#xA;        return false;&#xA;    }&#xA;&#xA;    // found in the Enum class as an internal method&#xA;    private static ulong ToUInt64(object value)&#xA;    {&#xA;        switch (Convert.GetTypeCode(value))&#xA;        {&#xA;            case TypeCode.SByte:&#xA;            case TypeCode.Int16:&#xA;            case TypeCode.Int32:&#xA;            case TypeCode.Int64:&#xA;                return (ulong)Convert.ToInt64(value, CultureInfo.InvariantCulture);&#xA;&#xA;            case TypeCode.Byte:&#xA;            case TypeCode.UInt16:&#xA;            case TypeCode.UInt32:&#xA;            case TypeCode.UInt64:&#xA;                return Convert.ToUInt64(value, CultureInfo.InvariantCulture);&#xA;        }&#xA;&#xA;        throw new InvalidOperationException(&quot;Unknown enum type.&quot;);&#xA;    }&#xA;}&#xA;</code></pre>&#xA;"
1769785,2,7244,"2009-11-20 11:08:24",1,NULL,"<p>This doesn't answer the original question, but there is now a method in .NET 4 called <a href=&quot;http://msdn.microsoft.com/en-us/library/system.enum.hasflag%28VS.100%29.aspx&quot; rel=&quot;nofollow&quot;>Enum.HasFlag</a> which does what you are trying to do in your example</p>&#xA;"
11574563,2,7244,"2012-07-20 07:11:35",5,NULL,"<p>You can achieve this using IL Weaving and <a href=&quot;https://github.com/Fody/ExtraConstraints&quot; rel=&quot;nofollow&quot;>ExtraConstraints</a></p>&#xA;&#xA;<p><strong>Allows you to write this code</strong></p>&#xA;&#xA;<pre><code>public class Sample&#xA;{&#xA;    public void MethodWithDelegateConstraint&lt;[DelegateConstraint] T&gt; ()&#xA;    {        &#xA;    }&#xA;    public void MethodWithEnumConstraint&lt;[EnumConstraint] T&gt;()&#xA;    {&#xA;    }&#xA;}&#xA;</code></pre>&#xA;&#xA;<p><strong>What gets compiled</strong></p>&#xA;&#xA;<pre><code>public class Sample&#xA;{&#xA;    public void MethodWithDelegateConstraint&lt;T&gt;() where T: Delegate&#xA;    {&#xA;    }&#xA;&#xA;    public void MethodWithEnumConstraint&lt;T&gt;() where T: struct, Enum&#xA;    {&#xA;    }&#xA;}&#xA;</code></pre>&#xA;"
7290,2,7284,"2008-08-10 18:59:06",60,NULL,"<p>From <a href=&quot;http://en.wikipedia.org/wiki/Turing_completeness&quot;>wikipedia</a>:</p>&#xA;&#xA;<blockquote>&#xA;  <p>Turing completeness, named after Alan&#xA;  Turing, is significant in that every&#xA;  plausible design for a computing&#xA;  device so far advanced can be emulated&#xA;  by a universal Turing machine — an&#xA;  observation that has become known as&#xA;  the Church-Turing thesis. Thus, a&#xA;  machine that can act as a universal&#xA;  Turing machine can, in principle,&#xA;  perform any calculation that any other&#xA;  programmable computer is capable of.&#xA;  However, this has nothing to do with&#xA;  the effort required to write a program&#xA;  for the machine, the time it may take&#xA;  for the machine to perform the&#xA;  calculation, or any abilities the&#xA;  machine may possess that are unrelated&#xA;  to computation.</p>&#xA;  &#xA;  <p>While truly Turing-complete machines&#xA;  are very likely physically impossible,&#xA;  as they require unlimited storage,&#xA;  Turing completeness is often loosely&#xA;  attributed to physical machines or&#xA;  programming languages that would be&#xA;  universal if they had unlimited&#xA;  storage. All modern computers are&#xA;  Turing-complete in this sense.</p>&#xA;</blockquote>&#xA;&#xA;<p>I don't know how you can be more non-technical than that except by saying &quot;turing complete means 'able to answer computable problem given enough time and space'&quot;.</p>&#xA;"
7320,2,7284,"2008-08-10 20:10:49",108,NULL,"<p>Here's the briefest explanation:</p>&#xA;&#xA;<p>A Turing Complete system means a system in which a program can be written that will find an answer (although with no guarantees regarding runtime or memory).</p>&#xA;&#xA;<p>So, if somebody says &quot;my new thing is Turing Complete&quot; that means in principle (although often not in practice) it could be used to solve any computation problem.</p>&#xA;&#xA;<p>Sometime's it's a joke... a guy wrote a Turing Machine simulator in vi, so it's possible to say that vi is the only computational engine ever needed in the world.</p>&#xA;"
17509,2,7284,"2008-08-20 07:23:30",2,NULL,"<p>I think the importance of the concept &quot;Turing Complete&quot; is in the the ability to identify a computing machine (not necessarily a mechanical/electrical &quot;computer&quot;) that can have its processes be deconstructed into &quot;simple&quot; instructions, composed of simpler and simpler instructions, that a Universal machine could interpret and then execute.</p>&#xA;&#xA;<p>I highly recommend The Annotated Turing</p>&#xA;&#xA;<p>@Mark i think what you are explaining is a mix between the description of the Universal Turing Machine and Turing Complete.</p>&#xA;&#xA;<p>Something that is Turing Complete, in a practical sense, would be a machine/process/computation able to be written and represented as a program, to be executed by a Universal Machine (a desktop computer).  Though it doesn't take consideration for time or storage, as mentioned by others.</p>&#xA;"
878771,2,7284,"2009-05-18 17:09:12",2,NULL,"<p>Turing Complete means that it is at least as powerful as a <a href=&quot;http://en.wikipedia.org/wiki/Turing%5Fmachine&quot; rel=&quot;nofollow&quot;>Turing Machine</a>. This means anything that can be computed by a Turing Machine can be computed by a Turing Complete system.</p>&#xA;&#xA;<p>No one has yet found a system more powerful than a Turing Machine. So, for the time being, saying a system is Turing Complete is the same as saying the system is as powerful as any known computing system.</p>&#xA;"
1522882,2,7284,"2009-10-05 23:18:20",0,NULL,"<p>As <a href=&quot;http://stackoverflow.com/questions/7284/what-is-turing-complete/878771#878771&quot;>Waylon Flinn said</a>:</p>&#xA;&#xA;<blockquote>&#xA;  <p>Turing Complete means that it is at least as powerful as a Turing Machine.</p>&#xA;</blockquote>&#xA;&#xA;<p>I believe this is incorrect, a system is Turing complete if it's exactly as powerful as the Turing Machine, i.e. every computation done by the machine can be done by the system, but also every computation done by the system can be done by the Turing machine.</p>&#xA;"
1610655,2,7284,"2009-10-22 23:45:42",16,NULL,"<p>Its often used to define &quot;real&quot; programming languages, where you can actually do most of what you want to. A better example is some languages that are not turing-complete, like SQL, XML, and JSON. </p>&#xA;&#xA;<p><a href=&quot;http://en.wikipedia.org/wiki/Turing%5Fcompleteness#Non-Turing-complete%5Flanguages&quot;>wikipedia on non-turing-complete languages</a></p>&#xA;"
8283566,2,7284,"2011-11-27 04:03:16",9,NULL,"<p>Fundamentally, Turing-completeness is one concise requirement, unbounded recursion.</p>&#xA;&#xA;<p>Not even bounded by memory.</p>&#xA;&#xA;<p>I thought of this independently, but <a href=&quot;http://lambda-the-ultimate.org/node/2846#comment-42117&quot;>here is some discussion</a> of the assertion. <a href=&quot;http://stackoverflow.com/q/8279878&quot;>My definition of LSP</a> provides more context.</p>&#xA;&#xA;<p>The other answers here don't directly define the fundamental essence of Turing-completeness.</p>&#xA;"
9883756,2,7284,"2012-03-27 05:21:47",-4,NULL,"<p>Some horrible answers here...</p>&#xA;&#xA;<p>Turing completeness in a computer literally exactly MEANS that it can map any input pattern to any output patern.</p>&#xA;&#xA;<p>For example in a game, inputs from a variety of devices, such as mice and keyboards are taken and an entirely different pattern is produced which controls the images on the screen, the sounds you hear and the things your computer sends to the rest of the internet.</p>&#xA;&#xA;<p>THATS IT!,</p>&#xA;&#xA;<p>It doesn't matter if the computer executes it programs in a partially recursive way.&#xA;It is also very much not true that a turning complete machines memory need be infinite, that's irreverent crap.</p>&#xA;&#xA;<p>The memory a machine requires is a constant related to the necessary input size and output size.</p>&#xA;&#xA;<p>In order for a machine to need infinite memory, you would first need an infinite input pattern to process (which is impossible to acquire or feed into any computer) as well as a way to read and store the infinite output result (again, never going to happen). Relating Turing completeness to memory limits in any-way just is immaterial semantics.</p>&#xA;&#xA;<p>A Turing complete machine is one that can process any information... that means, recognize any information and produce any information.</p>&#xA;&#xA;<p>Almost any well defined manipulation rule set beyond a certain complexity is Turing complete... including; sand, rocks, water, air, atoms, energy fields, Redstone, language and your mind.</p>&#xA;&#xA;<p>A Turing machine is just a simple data-manipulating machine, however it's creator Alan Turing; was the first person to realize that there is no way to build a fundamentally more powerful machine; even using mathematics formal language or modern digital electronics</p>&#xA;"
13894983,2,7284,"2012-12-15 18:33:53",0,NULL,"<p>Can a relational database input latitudes and longitudes of places and roads, and compute the shortest path between them - no.  This is one problem that shows SQL is not Turing complete.</p>&#xA;&#xA;<p>But C++ can do it, and can do any problem.  Thus it is.</p>&#xA;"
25213367,2,7284,"2014-08-08 22:50:53",1,NULL,"<p>In the simplest terms, a Turing-complete system can solve any possible computational problem.</p>&#xA;&#xA;<p>One of the key requirements is the scratchpad size be unbounded and that is possible to rewind to access prior writes to the scratchpad.</p>&#xA;&#xA;<p>Thus in practice no system is Turing-complete.</p>&#xA;&#xA;<p>Rather some systems approximate Turing-completeness by modeling unbounded memory and performing any possible computation that can fit within the system's memory.</p>&#xA;"
9035,2,9033,"2008-08-12 16:34:45",209,NULL,"<p>&quot;<a href=&quot;http://msdn.microsoft.com/en-us/library/9k7k7cf0%28VS.80%29.aspx&quot; rel=&quot;nofollow&quot;>yield</a>&quot; would come to my mind. Some of the attributes like <a href=&quot;http://msdn.microsoft.com/en-us/library/system.componentmodel.defaultvalueattribute.aspx&quot; rel=&quot;nofollow&quot;>[DefaultValue()]</a> are also among my favorites.</p>&#xA;&#xA;<p>The &quot;<a href=&quot;http://msdn.microsoft.com/en-us/library/bb383973.aspx&quot; rel=&quot;nofollow&quot;>var</a>&quot; keyword is a bit more known, but that you can use it in .NET 2.0 applications as well (as long as you <a href=&quot;http://blogs.msdn.com/msbuild/archive/2006/11/03/msbuild-orcas-and-multi-targeting.aspx&quot; rel=&quot;nofollow&quot;>use the .NET 3.5 compiler</a> and set it to output 2.0 code) does not seem to be known very well.</p>&#xA;&#xA;<p>Edit: kokos, thanks for pointing out the ?? operator, that's indeed really useful. Since it's a bit hard to google for it (as ?? is just ignored), here is the MSDN documentation page for that operator: <em><a href=&quot;http://msdn.microsoft.com/en-us/library/ms173224.aspx&quot; rel=&quot;nofollow&quot;>?? Operator (C# Reference)</a></em></p>&#xA;"
9036,2,9033,"2008-08-12 16:35:56",104,NULL,"<ol>&#xA;<li><a href=&quot;http://msdn.microsoft.com/en-us/library/ms173224.aspx&quot; rel=&quot;nofollow&quot;>??</a> - coalescing operator  </li>&#xA;<li>using (<a href=&quot;http://msdn.microsoft.com/en-us/library/yh598w02%28VS.80%29.aspx&quot; rel=&quot;nofollow&quot;>statement</a> / <a href=&quot;http://msdn.microsoft.com/en-us/library/sf0df423%28VS.71%29.aspx&quot; rel=&quot;nofollow&quot;>directive</a>) - great keyword that can be used for more than just calling Dispose  </li>&#xA;<li><a href=&quot;http://msdn.microsoft.com/en-us/library/acdd6hb7%28VS.100%29.aspx&quot; rel=&quot;nofollow&quot;>readonly</a> - should be used more  </li>&#xA;<li>netmodules - too bad there's no support in Visual Studio</li>&#xA;</ol>&#xA;"
9037,2,9033,"2008-08-12 16:37:19",28,NULL,"<p>Two of my personal favourites, which I see rarely used:</p>&#xA;&#xA;<ol>&#xA;<li>Snippets (particularly for properties, which was made even better for Visual Studio 2008)</li>&#xA;<li>The <a href=&quot;http://msdn.microsoft.com/en-us/library/system.obsoleteattribute.aspx&quot; rel=&quot;nofollow&quot;>ObsoleteAttribute</a></li>&#xA;</ol>&#xA;"
9038,2,9033,"2008-08-12 16:38:51",75,NULL,"<p>Honestly the experts by the very definition should know this stuff.  But to answer your question: <em><a href=&quot;http://msdn.microsoft.com/en-us/library/ya5y69ds.aspx&quot; rel=&quot;nofollow&quot;>Built-In Types Table (C# Reference)</a></em></p>&#xA;&#xA;<p>The compiler flagging for numbers are widely known for these:</p>&#xA;&#xA;<pre><code>Decimal = M&#xA;Float = F&#xA;Double = D&#xA;&#xA;// for example&#xA;double d = 30D;&#xA;</code></pre>&#xA;&#xA;<p>However these are more obscure:</p>&#xA;&#xA;<pre><code>Long = L&#xA;Unsigned Long = UL&#xA;Unsigned Int = U&#xA;</code></pre>&#xA;"
9041,2,9033,"2008-08-12 16:42:04",286,NULL,"<p>I didn't know the &quot;as&quot; keyword for quite a while.</p>&#xA;&#xA;<pre><code>MyClass myObject = (MyClass) obj;&#xA;</code></pre>&#xA;&#xA;<p>vs</p>&#xA;&#xA;<pre><code>MyClass myObject = obj as MyClass;&#xA;</code></pre>&#xA;&#xA;<p>The second will return null if obj isn't a MyClass, rather than throw a class cast exception.</p>&#xA;"
9042,2,9033,"2008-08-12 16:45:23",68,NULL,"<ul>&#xA;<li>TransactionScope and <a href=&quot;http://msdn.microsoft.com/en-us/library/system.transactions.dependenttransaction.aspx&quot; rel=&quot;nofollow&quot;>DependentTransaction</a> in System.Transactions is a lightweight way to use transaction processing in .NET - it's not just for <a href=&quot;http://msdn.microsoft.com/en-us/library/ms229973.aspx&quot; rel=&quot;nofollow&quot;>Database transactions either</a></li>&#xA;<li>String.IsNullOrEmpty is one that I am surprised to learn a lot of developers don't know about</li>&#xA;<li>List.ForEach - iterate through your generic list using a delegate method</li>&#xA;</ul>&#xA;&#xA;<p>There are more, but that is the three obvious ones of the top of my head...</p>&#xA;"
9048,2,9033,"2008-08-12 16:59:40",226,NULL,"<p>Attributes in general, but most of all <a href=&quot;http://msdn.microsoft.com/en-us/library/x810d419.aspx&quot; rel=&quot;nofollow&quot;>DebuggerDisplay</a>. Saves you years.</p>&#xA;"
9055,2,9033,"2008-08-12 17:07:59",198,NULL,"<p>I tend to find that most C# developers don't know about 'nullable' types. Basically, primitives that can have a null value.</p>&#xA;&#xA;<pre><code>double? num1 = null; &#xA;double num2 = num1 ?? -100;&#xA;</code></pre>&#xA;&#xA;<p>Set a nullable double, <em>num1</em>, to null, then set a regular double, <em>num2</em>, to <em>num1</em> or <em>-100</em> if <em>num1</em> was null.</p>&#xA;&#xA;<p><a href=&quot;http://msdn.microsoft.com/en-us/library/1t3y8s4s(VS.80).aspx&quot; rel=&quot;nofollow&quot;>http://msdn.microsoft.com/en-us/library/1t3y8s4s(VS.80).aspx</a></p>&#xA;&#xA;<p>one more thing about Nullable type:</p>&#xA;&#xA;<pre><code>DateTime? tmp = new DateTime();&#xA;tmp = null;&#xA;return tmp.ToString();&#xA;</code></pre>&#xA;&#xA;<p>it is return String.Empty. Check <a href=&quot;http://stackoverflow.com/questions/4547112/is-nullable-datetime-work-correct&quot;>this</a> link for more details</p>&#xA;"
9067,2,9033,"2008-08-12 17:29:29",15,NULL,"<p>I have often come across the need to have a generic parameter-object persisted into the viewstate in a base class.</p>&#xA;&#xA;<pre><code>public abstract class BaseListControl&lt;ListType,KeyType,ParameterType&gt;&#xA;                 : UserControl &#xA;                 where ListType : BaseListType&#xA;                 &amp;&amp; ParameterType : BaseParameterType, new&#xA;{&#xA;&#xA;    private const string viewStateFilterKey = &quot;FilterKey&quot;;&#xA;&#xA;    protected ParameterType Filters&#xA;    {&#xA;        get&#xA;        {&#xA;            if (ViewState[viewStateFilterKey] == null)&#xA;                ViewState[viewStateFilterKey]= new ParameterType();&#xA;&#xA;            return ViewState[viewStateFilterKey] as ParameterType;&#xA;        }&#xA;        set&#xA;        {&#xA;            ViewState[viewStateFilterKey] = value;&#xA;        }&#xA;    }&#xA;&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>Usage:</p>&#xA;&#xA;<pre><code>private void SomeEventHappened(object sender, EventArgs e)&#xA;{&#xA;    Filters.SomeValue = SomeControl.SelectedValue;&#xA;}&#xA;&#xA;private void TimeToFetchSomeData()&#xA;{&#xA;    GridView.DataSource = Repository.GetList(Filters);&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>This little trick with the &quot;where ParameterType : BaseParameterType, new&quot; is what makes it really work.</p>&#xA;&#xA;<p>With this property in my baseclass, I can automate handling of paging, setting filter values to filter a gridview, make sorting really easy, etc.</p>&#xA;&#xA;<p>I am really just saying that generics can be an enormously powerful beast in the wrong hands.</p>&#xA;"
9092,2,9033,"2008-08-12 18:03:12",103,NULL,"<p>@Ed, I'm a bit reticent about posting this as it's little more than nitpicking. However, I would point out that in your code sample:</p>&#xA;&#xA;<pre><code>MyClass c;&#xA;  if (obj is MyClass)&#xA;    c = obj as MyClass&#xA;</code></pre>&#xA;&#xA;<p>If you're going to use 'is', why follow it up with a safe cast using 'as'? If you've ascertained that obj is indeed MyClass, a bog-standard cast:</p>&#xA;&#xA;<pre><code>c = (MyClass)obj&#xA;</code></pre>&#xA;&#xA;<p>...is never going to fail.</p>&#xA;&#xA;<p>Similarly, you could just say:</p>&#xA;&#xA;<pre><code>MyClass c = obj as MyClass;&#xA;if(c != null)&#xA;{&#xA;   ...&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>I don't know enough about .NET's innards to be sure, but my instincts tell me that this would cut a maximum of two type casts operations down to a maximum of one. It's hardly likely to break the processing bank either way; personally, I think the latter form looks cleaner too.</p>&#xA;"
9099,2,9033,"2008-08-12 18:23:41",305,NULL,"<p>Everything else, plus </p>&#xA;&#xA;<p>1) implicit generics (why only on methods and not on classes?)</p>&#xA;&#xA;<pre><code>void GenericMethod&lt;T&gt;( T input ) { ... }&#xA;&#xA;//Infer type, so&#xA;GenericMethod&lt;int&gt;(23); //You don't need the &lt;&gt;.&#xA;GenericMethod(23);      //Is enough.&#xA;</code></pre>&#xA;&#xA;<p>2) simple lambdas with one parameter:</p>&#xA;&#xA;<pre><code>x =&gt; x.ToString() //simplify so many calls&#xA;</code></pre>&#xA;&#xA;<p>3) anonymous types and initialisers:</p>&#xA;&#xA;<pre><code>//Duck-typed: works with any .Add method.&#xA;var colours = new Dictionary&lt;string, string&gt; {&#xA;    { &quot;red&quot;, &quot;#ff0000&quot; },&#xA;    { &quot;green&quot;, &quot;#00ff00&quot; },&#xA;    { &quot;blue&quot;, &quot;#0000ff&quot; }&#xA;};&#xA;&#xA;int[] arrayOfInt = { 1, 2, 3, 4, 5 };&#xA;</code></pre>&#xA;&#xA;<hr>&#xA;&#xA;<p>Another one:</p>&#xA;&#xA;<p>4) Auto properties can have different scopes:</p>&#xA;&#xA;<pre><code>public int MyId { get; private set; }&#xA;</code></pre>&#xA;&#xA;<hr>&#xA;&#xA;<p>Thanks @pzycoman for reminding me:</p>&#xA;&#xA;<p>5) Namespace aliases (not that you're likely to need this particular distinction):</p>&#xA;&#xA;<pre><code>using web = System.Web.UI.WebControls;&#xA;using win = System.Windows.Forms;&#xA;&#xA;web::Control aWebControl = new web::Control();&#xA;win::Control aFormControl = new win::Control();&#xA;</code></pre>&#xA;"
9114,2,9033,"2008-08-12 18:38:16",146,NULL,"<p>Here's a useful one for regular expressions and file paths:</p>&#xA;&#xA;<pre><code>&quot;c:\\program files\\oldway&quot;&#xA;@&quot;c:\program file\newway&quot;&#xA;</code></pre>&#xA;&#xA;<p>The @ tells the compiler to ignore any escape characters in a string.</p>&#xA;"
9118,2,9033,"2008-08-12 18:40:45",6,NULL,"<p>@Brad Barker</p>&#xA;&#xA;<p>I think if you have to use nullable types, it's better to use Nullable&lt;.T> rather than the question mark notation.  It makes it eye-achingly obvious that magic is occurring.&#xA;Not sure why anyone would ever want to use Nullable&lt;.bool> though. :-)</p>&#xA;&#xA;<p>Krzysztof Cwalina (one of the authors of Framwork Design Guidlines) has a good post here:&#xA;<a href=&quot;http://blogs.msdn.com/kcwalina/archive/2008/07/16/Nullable.aspx&quot; rel=&quot;nofollow&quot; title=&quot;Virtual Workspaces&quot;><a href=&quot;http://blogs.msdn.com/kcwalina/archive/2008/07/16/Nullable.aspx&quot; rel=&quot;nofollow&quot;>http://blogs.msdn.com/kcwalina/archive/2008/07/16/Nullable.aspx</a></a></p>&#xA;&#xA;<p>And Mike Hadlow has a nice post on <a href=&quot;http://mikehadlow.blogspot.com/2006/10/nullability-voodoo.html&quot; rel=&quot;nofollow&quot;>Nullability Voodoo</a></p>&#xA;"
9125,2,9033,"2008-08-12 18:50:30",193,NULL,"<p>Here are some interesting hidden C# features, in the form of undocumented C# keywords:</p>&#xA;&#xA;<pre><code>__makeref&#xA;&#xA;__reftype&#xA;&#xA;__refvalue&#xA;&#xA;__arglist&#xA;</code></pre>&#xA;&#xA;<p>These are undocumented C# keywords (even Visual Studio recognizes them!) that were added to for a more efficient boxing/unboxing prior to generics. They work in coordination with the System.TypedReference struct.</p>&#xA;&#xA;<p>There's also __arglist, which is used for variable length parameter lists.</p>&#xA;&#xA;<p>One thing folks don't know much about is <a href=&quot;http://msdn.microsoft.com/en-us/library/ms404247.aspx&quot;>System.WeakReference</a> -- a very useful class that keeps track of an object but still allows the garbage collector to collect it.</p>&#xA;&#xA;<p>The most useful &quot;hidden&quot; feature would be the yield return keyword. It's not really hidden, but a lot of folks don't know about it. LINQ is built atop this; it allows for delay-executed queries by generating a state machine under the hood. Raymond Chen recently posted about the <a href=&quot;http://blogs.msdn.com/oldnewthing/archive/2008/08/12/8849519.aspx&quot;>internal, gritty details</a>.</p>&#xA;"
9129,2,9033,"2008-08-12 18:53:44",131,NULL,"<blockquote>&#xA;  <p>Not sure why anyone would ever want to use Nullable&lt;bool> though. :-)</p>&#xA;</blockquote>&#xA;&#xA;<p>True, False, <a href=&quot;http://thedailywtf.com/Articles/What_Is_Truth_0x3f_.aspx&quot; rel=&quot;nofollow&quot;>FileNotFound</a>?</p>&#xA;"
9181,2,9033,"2008-08-12 19:40:28",6,NULL,"<p>In no particular order:</p>&#xA;&#xA;<pre><code>Lists&lt;&gt;&#xA;Mutex&#xA;</code></pre>&#xA;&#xA;<p>The new property definitions shortcut in Framework 3.5.</p>&#xA;"
9282,2,9033,"2008-08-12 21:57:39",314,NULL,"<p><strong>Avoid checking for null event handlers</strong></p>&#xA;&#xA;<p>Adding an empty delegate to events at declaration, suppressing the need to always check the event for null before calling it is awesome. Example:</p>&#xA;&#xA;<pre><code>public delegate void MyClickHandler(object sender, string myValue);&#xA;public event MyClickHandler Click = delegate {}; // add empty delegate!&#xA;</code></pre>&#xA;&#xA;<p>Let you do this</p>&#xA;&#xA;<pre><code>public void DoSomething()&#xA;{&#xA;    Click(this, &quot;foo&quot;);&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>Instead of this</p>&#xA;&#xA;<pre><code>public void DoSomething()&#xA;{&#xA;    // Unnecessary!&#xA;    MyClickHandler click = Click;&#xA;    if (click != null) // Unnecessary! &#xA;    {&#xA;        click(this, &quot;foo&quot;);&#xA;    }&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>Please also see this <a href=&quot;http://stackoverflow.com/questions/840715/the-proper-way-of-raising-events-in-the-net-framework&quot;>related discussion</a> and this <a href=&quot;http://blogs.msdn.com/ericlippert/archive/2009/04/29/events-and-races.aspx&quot; rel=&quot;nofollow&quot;>blog post</a> by Eric Lippert on this topic (and possible downsides).</p>&#xA;"
9401,2,9033,"2008-08-13 01:53:50",752,NULL,"<p>This isn't C# per se, but I haven't seen anyone who really uses <code>System.IO.Path.Combine()</code> to the extent that they should. In fact, the whole Path class is really useful, but <strong>no one uses it!</strong></p>&#xA;&#xA;<p>I'm willing to bet that every production app has the following code, even though it shouldn't:</p>&#xA;&#xA;<pre><code>string path = dir + &quot;\\&quot; + fileName;&#xA;</code></pre>&#xA;"
9406,2,9033,"2008-08-13 02:07:26",221,NULL,"<blockquote>&#xA;  <p>The @ tells the compiler to ignore any&#xA;  escape characters in a string.</p>&#xA;</blockquote>&#xA;&#xA;<p>Just wanted to clarify this one... it doesn't tell it to ignore the escape characters, it actually tells the compiler to interpret the string as a literal.</p>&#xA;&#xA;<p>If you have </p>&#xA;&#xA;<pre><code>string s = @&quot;cat&#xA;             dog&#xA;             fish&quot;&#xA;</code></pre>&#xA;&#xA;<p>it will actually print out as (note that it even includes the whitespace used for indentation):</p>&#xA;&#xA;<pre><code>cat&#xA;             dog&#xA;             fish&#xA;</code></pre>&#xA;"
9547,2,9033,"2008-08-13 07:39:13",262,NULL,"<p>Two things I like are Automatic properties so you can collapse your code down even further:</p>&#xA;&#xA;<pre><code>private string _name;&#xA;public string Name&#xA;{&#xA;    get&#xA;    {&#xA;        return _name;&#xA;    }&#xA;    set&#xA;    {&#xA;        _name = value;&#xA;    }&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>becomes</p>&#xA;&#xA;<pre><code>public string Name { get; set;}&#xA;</code></pre>&#xA;&#xA;<p>Also object initializers:</p>&#xA;&#xA;<pre><code>Employee emp = new Employee();&#xA;emp.Name = &quot;John Smith&quot;;&#xA;emp.StartDate = DateTime.Now();&#xA;</code></pre>&#xA;&#xA;<p>becomes</p>&#xA;&#xA;<pre><code>Employee emp = new Employee {Name=&quot;John Smith&quot;, StartDate=DateTime.Now()}&#xA;</code></pre>&#xA;"
9581,2,9033,"2008-08-13 08:29:09",21,NULL,"<p>On the basis that this thread should be entitled &quot;<em>things you didn't know about C# until recently despite thinking you already knew everything</em>&quot;, my personal feature is asynchronous delegates.</p>&#xA;&#xA;<p>Until I read Jeff Richter's C#/CLR book (excellent book, everyone doing .NET should read it) I didn't know that you could call <em>any</em> delegate using <code>BeginInvoke</code> / <code>EndInvoke</code>.  I tend to do a lot of <code>ThreadPool.QueueUserWorkItem</code> calls (which I guess is much like what the delegate <code>BeginInvoke</code> is doing internally), but the addition of a standardised join/rendezvous pattern may be really useful sometimes.</p>&#xA;"
9639,2,9033,"2008-08-13 10:20:07",255,NULL,"<p>The 'default' keyword in generic types:</p>&#xA;&#xA;<pre><code>T t = default(T);&#xA;</code></pre>&#xA;&#xA;<p>results in a 'null' if T is a reference type, and 0 if it is an int, false if it is a boolean,&#xA;etcetera.</p>&#xA;"
10207,2,9033,"2008-08-13 18:47:41",13,NULL,"<p><strong>Lambda Expressions</strong></p>&#xA;&#xA;<pre><code>Func&lt;int, int, int&gt; add = (a, b) =&gt; (a + b);&#xA;</code></pre>&#xA;&#xA;<p><strong>Obscure String Formats</strong></p>&#xA;&#xA;<pre><code>Console.WriteLine(&quot;{0:D10}&quot;, 2); // 0000000002&#xA;&#xA;Dictionary&lt;string, string&gt; dict = new Dictionary&lt;string, string&gt; { &#xA;    {&quot;David&quot;, &quot;C#&quot;}, &#xA;    {&quot;Johann&quot;, &quot;Perl&quot;}, &#xA;    {&quot;Morgan&quot;, &quot;Python&quot;}&#xA;};&#xA;&#xA;Console.WriteLine( &quot;{0,10} {1, 10}&quot;, &quot;Programmer&quot;, &quot;Language&quot; );&#xA;&#xA;Console.WriteLine( &quot;-&quot;.PadRight( 21, '-' ) );&#xA;&#xA;foreach (string key in dict.Keys)&#xA;{&#xA;    Console.WriteLine( &quot;{0, 10} {1, 10}&quot;, key, dict[key] );				&#xA;}&#xA;</code></pre>&#xA;"
10886,2,9033,"2008-08-14 10:59:21",11,NULL,"<p>I love the fact that I can use LINQ to objects on plain old .NET 2.0 (i.e. without requiring .NET 3.5 to be installed everywhere). All you need is an implementation of all the query operator Extension methods - see <a href=&quot;http://www.albahari.com/nutshell/linqbridge.html&quot; rel=&quot;nofollow&quot;>LINQBridge</a></p>&#xA;"
10892,2,9033,"2008-08-14 11:07:01",7,NULL,"<p>In addition to duncansmart's reply, also extension methods can be used on Framework 2.0. Just add an <code>ExtensionAttribute</code> class under System.Runtime.CompilerServices namespace and you can use extension methods (only with C# 3.0 of course).</p>&#xA;&#xA;<pre><code>namespace System.Runtime.CompilerServices&#xA;{&#xA;    public class ExtensionAttribute : Attribute&#xA;    { &#xA;    }&#xA;}&#xA;</code></pre>&#xA;"
11738,2,9033,"2008-08-14 22:31:26",36,NULL,"<p>Being able to have enum types have values other than int (the default)</p>&#xA;&#xA;<pre><code>public enum MyEnum : long&#xA;{&#xA;    Val1 = 1,&#xA;    Val2 = 2&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>Also, the fact that you can assign any numeric value to that enum:</p>&#xA;&#xA;<pre><code>MyEnum e = (MyEnum)123;&#xA;</code></pre>&#xA;"
12137,2,9033,"2008-08-15 11:06:49",438,NULL,"<blockquote>&#xA;  <p>From <a href=&quot;http://rads.stackoverflow.com/amzn/click/0735621632&quot; rel=&quot;nofollow&quot; title=&quot;Coding Guidelines for Cocoa&quot;>CLR via C#</a>:</p>&#xA;  &#xA;  <p>When normalizing strings, it is highly&#xA;  recommended that you use&#xA;  ToUpperInvariant instead of&#xA;  ToLowerInvariant because <strong>Microsoft has&#xA;  optimized the code for performing&#xA;  uppercase comparisons</strong>.</p>&#xA;</blockquote>&#xA;&#xA;<p>I remember one time my coworker always changed strings to uppercase before comparing. I've always wondered why he does that because I feel it's more &quot;natural&quot; to convert to lowercase first. After reading the book now I know why.</p>&#xA;"
12152,2,9033,"2008-08-15 11:34:02",33,NULL,"<p>My favourite is the</p>&#xA;&#xA;<pre><code>global::&#xA;</code></pre>&#xA;&#xA;<p>keyword to escape namespace hell with some of our 3rd party code providers...</p>&#xA;&#xA;<p>Example:</p>&#xA;&#xA;<pre><code>global::System.Collections.Generic.List&lt;global::System.String&gt; myList =&#xA;    new global::System.Collections.Generic.List&lt;global::System.String&gt;();&#xA;</code></pre>&#xA;"
12316,2,9033,"2008-08-15 14:51:43",13,NULL,"<p>I didn't start to really appreciate the &quot;using&quot; blocks until recently.  They make things so much more tidy :)</p>&#xA;"
13422,2,9033,"2008-08-16 23:55:28",117,NULL,"<p>This one is not &quot;hidden&quot; so much as it is misnamed.</p>&#xA;&#xA;<p>A lot of attention is paid to the algorithms &quot;map&quot;, &quot;reduce&quot;, and &quot;filter&quot;. What most people don't realize is that .NET 3.5 added all three of these algorithms, but it gave them very SQL-ish names, based on the fact that they're part of LINQ.</p>&#xA;&#xA;<blockquote>&#xA;  <p>&quot;map&quot; => Select <br>Transforms data&#xA;  from one form into another</p>&#xA;  &#xA;  <p>&quot;reduce&quot; => Aggregate <br>Aggregates&#xA;  values into a single result</p>&#xA;  &#xA;  <p>&quot;filter&quot; => Where <br>Filters data&#xA;  based on a criteria</p>&#xA;</blockquote>&#xA;&#xA;<p>The ability to use LINQ to do inline work on collections that used to take iteration and conditionals can be incredibly valuable. It's worth learning how all the LINQ extension methods can help make your code much more compact and maintainable.</p>&#xA;"
13441,2,9033,"2008-08-17 01:01:28",153,NULL,"<p>Returning anonymous types from a method and accessing members without reflection.</p>&#xA;&#xA;<pre><code>// Useful? probably not.&#xA;private void foo()&#xA;{&#xA;    var user = AnonCast(GetUserTuple(), new { Name = default(string), Badges = default(int) });&#xA;    Console.WriteLine(&quot;Name: {0} Badges: {1}&quot;, user.Name, user.Badges);&#xA;}&#xA;&#xA;object GetUserTuple()&#xA;{&#xA;    return new { Name = &quot;dp&quot;, Badges = 5 };&#xA;}    &#xA;&#xA;// Using the magic of Type Inference...&#xA;static T AnonCast&lt;T&gt;(object obj, T t)&#xA;{&#xA;   return (T) obj;&#xA;}&#xA;</code></pre>&#xA;"
13932,2,9033,"2008-08-17 21:13:24",27,NULL,"<p>There's also the ThreadStaticAttribute to make a static field unique per thread, so you can have strongly typed thread-local storage.</p>&#xA;&#xA;<p>Even if extension methods aren't that secret (LINQ is based on them), it may not be so obvious as to how useful and more readable they can be for utility helper methods:</p>&#xA;&#xA;<pre><code>//for adding multiple elements to a collection that doesn't have AddRange&#xA;//e.g., collection.Add(item1, item2, itemN);&#xA;static void Add&lt;T&gt;(this ICollection&lt;T&gt; coll, params T[] items)&#xA; { foreach (var item in items) coll.Add(item);&#xA; }&#xA;&#xA;//like string.Format() but with custom string representation of arguments&#xA;//e.g., &quot;{0} {1} {2}&quot;.Format&lt;Custom&gt;(c=&gt;c.Name,&quot;string&quot;,new object(),new Custom())&#xA;//      result: &quot;string {System.Object} Custom1Name&quot;&#xA;static string Format&lt;T&gt;(this string format, Func&lt;T,object&gt; select, params object[] args)&#xA; { for(int i=0; i &lt; args.Length; ++i)&#xA;    { var x = args[i] as T;&#xA;      if (x != null) args[i] = select(x);&#xA;    }&#xA;   return string.Format(format, args);&#xA; }&#xA;</code></pre>&#xA;"
14036,2,9033,"2008-08-18 00:10:36",2,NULL,"<blockquote>&#xA;  <p>I think if you have to use nullable&#xA;  types, it's better to use Nullable&lt;.T>&#xA;  rather than the question mark&#xA;  notation. It makes it eye-achingly&#xA;  obvious that magic is occurring. Not&#xA;  sure why anyone would ever want to use&#xA;  Nullable&lt;.bool> though.</p>&#xA;</blockquote>&#xA;&#xA;<p>In a VB.NET Web service where the parameter might not be passed through <em>(because the partners request wasn't consistent or reliable)</em>, but had to pass validation against the proposed type <em>(Boolean for &quot;if is search request&quot;)</em>. Chalk it up to &quot;another demand by management&quot;...</p>&#xA;&#xA;<p><em>...and yes, I know some people think it's not the right way to do these things, but <strong>IsSearchRequest As Nullable(Of Boolean)</strong> saved me losing my mind that night!</em></p>&#xA;"
14088,2,9033,"2008-08-18 01:45:02",176,NULL,"<p>Using @ for variable names that are keywords.</p>&#xA;&#xA;<pre><code>var @object = new object();&#xA;var @string = &quot;&quot;;&#xA;var @if = IpsoFacto();&#xA;</code></pre>&#xA;"
14277,2,9033,"2008-08-18 07:33:18",64,NULL,"<p>Events are really delegates under the hood and any delegate object can have multiple functions attached to it  and detatched from it using the += and -= operators, respectively.</p>&#xA;&#xA;<p>Events can also be controlled with the add/remove, similar to get/set except they're invoked when += and -= are used:</p>&#xA;&#xA;<pre><code>public event EventHandler SelectiveEvent(object sender, EventArgs args) &#xA;  { add &#xA;     { if (value.Target == null) throw new Exception(&quot;No static handlers!&quot;);&#xA;       _SelectiveEvent += value;&#xA;     }&#xA;    remove&#xA;     { _SelectiveEvent -= value;&#xA;     }&#xA;  } EventHandler _SelectiveEvent;&#xA;</code></pre>&#xA;"
14723,2,9033,"2008-08-18 14:43:56",27,NULL,"<p>It's not actually a C# hidden feature, but I recently discovered the <a href=&quot;http://msdn.microsoft.com/en-us/library/system.weakreference.aspx&quot; rel=&quot;nofollow&quot;>WeakReference class</a> and was blown away by it (although this may be biased by the fact that it helped me found a solution to a <a href=&quot;http://www.juanformoso.com.ar/post/2008/07/30/Weak-References.aspx&quot; rel=&quot;nofollow&quot;>particular problem of mine</a>...)</p>&#xA;"
14926,2,9033,"2008-08-18 17:06:42",2,NULL,"<p>I must admit that i'm not sure wether this performs better or worse than the normal ASP.NET repeater onItemDatabound cast code, but anyway here's my 5 cent.</p>&#xA;&#xA;<pre><code>MyObject obj = e.Item.DataItem as MyObject;&#xA;if(obj != null)&#xA;{&#xA;  //Do work&#xA;}&#xA;</code></pre>&#xA;"
15321,2,9033,"2008-08-18 22:29:45",111,NULL,"<p>If you're trying to use curly brackets inside a String.Format expression...</p>&#xA;&#xA;<pre><code>int foo = 3;&#xA;string bar = &quot;blind mice&quot;;&#xA;String.Format(&quot;{{I am in brackets!}} {0} {1}&quot;, foo, bar);&#xA;//Outputs &quot;{I am in brackets!} 3 blind mice&quot;&#xA;</code></pre>&#xA;"
15352,2,9033,"2008-08-18 23:08:36",22,NULL,"<p>Near all the cool ones have been mentioned.  Not sure if this one's well known or not</p>&#xA;&#xA;<p>C# property/field constructor initialization:</p>&#xA;&#xA;<pre><code>var foo = new Rectangle() &#xA;{ &#xA;    Fill = new SolidColorBrush(c), &#xA;    Width = 20, &#xA;    Height = 20 &#xA;};&#xA;</code></pre>&#xA;&#xA;<p>This creates the rectangle, and sets the listed properties.</p>&#xA;&#xA;<p>I've noticed something funny - you can have a comma at the end of the properties list, without it being a syntax error.  So this is also valid:</p>&#xA;&#xA;<pre><code>var foo = new Rectangle() &#xA;{ &#xA;    Fill = new SolidColorBrush(c), &#xA;    Width = 20, &#xA;    Height = 20,&#xA;};&#xA;</code></pre>&#xA;"
15393,2,9033,"2008-08-18 23:47:06",34,NULL,"<p>Not hidden, but I think that a lot of developers are not using the HasValue and Value properties on the nullable types.</p>&#xA;&#xA;<pre><code>        int? x = null;&#xA;        int y;&#xA;        if (x.HasValue)&#xA;            y = x.Value;&#xA;</code></pre>&#xA;"
15715,2,9033,"2008-08-19 04:41:58",28,NULL,"<p>@lomaxx I also learned the other day (the same time I learned your tip) is that you can now have disparate access levels on the same property:</p>&#xA;&#xA;<pre><code>public string Name { get; private set;}&#xA;</code></pre>&#xA;&#xA;<p>That way only the class itself can set the Name property.</p>&#xA;&#xA;<pre><code>public MyClass(string name) { Name = name; }&#xA;</code></pre>&#xA;"
15765,2,9033,"2008-08-19 05:43:53",528,NULL,"<p>From <a href=&quot;http://www.west-wind.com/weblog/posts/236298.aspx&quot; rel=&quot;nofollow&quot;>Rick Strahl</a>:</p>&#xA;&#xA;<p>You can chain the ?? operator so that you can do a bunch of null comparisons.</p>&#xA;&#xA;<pre><code>string result = value1 ?? value2 ?? value3 ?? String.Empty;&#xA;</code></pre>&#xA;"
16395,2,9033,"2008-08-19 15:23:12",24,NULL,"<h1>Partial Methods</h1>&#xA;&#xA;<p><a href=&quot;http://blogs.msdn.com/charlie/archive/2007/11/11/partial-methods.aspx&quot; rel=&quot;nofollow&quot;>Charlie Calvert explains partial methods on his blog</a></p>&#xA;&#xA;<p><a href=&quot;http://weblogs.asp.net/scottcate/archive/2008/06/18/teched-orlando-compiler-tricks.aspx&quot; rel=&quot;nofollow&quot;>Scott Cate has a nice partial method demo here</a></p>&#xA;&#xA;<ol>&#xA;<li>Points of extensibility in Code Generated class (LINQ to SQL, EF)</li>&#xA;<li>Does not get compiled into the dll if it is not implemented (check it out with .NET Reflector)</li>&#xA;</ol>&#xA;"
16450,2,9033,"2008-08-19 15:54:53",98,NULL,"<p>Maybe not an advanced technique, but one I see all the time that drives me crazy:</p>&#xA;&#xA;<pre><code>if (x == 1)&#xA;{&#xA;   x = 2;&#xA;}&#xA;else&#xA;{&#xA;   x = 3;&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>can be condensed to:</p>&#xA;&#xA;<pre><code>x = (x==1) ? 2 : 3;&#xA;</code></pre>&#xA;"
16482,2,9033,"2008-08-19 16:07:50",9,NULL,"<p>Preprocessor Directives can be nifty if you want different behavior between Debug and Release modes.</p>&#xA;&#xA;<p><a href=&quot;http://msdn.microsoft.com/en-us/library/ed8yd1ha.aspx&quot; rel=&quot;nofollow&quot;><a href=&quot;http://msdn.microsoft.com/en-us/library/ed8yd1ha.aspx&quot; rel=&quot;nofollow&quot;>http://msdn.microsoft.com/en-us/library/ed8yd1ha.aspx</a></a></p>&#xA;"
18158,2,9033,"2008-08-20 15:00:30",19,NULL,"<p>I see a lot of people replicate the functionality of <code>Nullable&lt;T&gt;.GetValueOrDefault(T)</code>.</p>&#xA;"
18619,2,9033,"2008-08-20 19:17:16",7,NULL,"<p>You type &quot;prop&quot; and then press [TAB] twice, it generates useful code for your properties and can speed your typing.</p>&#xA;&#xA;<p>I know this works in VS 2005 (I use it) but I don´t know in previous versions.</p>&#xA;"
21752,2,9033,"2008-08-22 03:55:52",15,NULL,"<p>How about the <a href=&quot;http://msdn.microsoft.com/en-us/library/system.flagsattribute.aspx&quot;>FlagsAttribute</a> on an enumeration? It allows you to perform bitwise operations... took me forever to find out how to do bitwise operations in .NET nicely.</p>&#xA;"
24914,2,9033,"2008-08-24 07:52:20",8,NULL,"<p>I'm pretty sure everyone is familiar with operator overloading, but maybe some aren't.</p>&#xA;&#xA;<pre><code>class myClass&#xA;{&#xA;    private string myClassValue = &quot;&quot;;&#xA;&#xA;    public myClass(string myString)&#xA;    {&#xA;        myClassValue = myString;&#xA;    }&#xA;&#xA;    public override string ToString()&#xA;    {&#xA;        return myClassValue;&#xA;    }&#xA;&#xA;    public static myClass operator &lt;&lt;(myClass mc, int shiftLen)&#xA;    {&#xA;        string newString = &quot;&quot;;&#xA;        for (int i = shiftLen; i &lt; mc.myClassValue.Length; i++)&#xA;            newString += mc.myClassValue[i].ToString();&#xA;        mc.myClassValue = newString.ToString();&#xA;        return mc;&#xA;    }&#xA;&#xA;    public static myClass operator &gt;&gt;(myClass mc, int shiftLen)&#xA;    {&#xA;        char[] newString = new char[shiftLen + mc.myClassValue.Length];&#xA;&#xA;        for (int i = shiftLen; i &lt; mc.myClassValue.Length; i++)&#xA;            newString[i] += mc.myClassValue[i - shiftLen];&#xA;&#xA;        mc.myClassValue = new string(newString);&#xA;        return mc;&#xA;    }&#xA;&#xA;    public static myClass operator +(myClass mc, string args)&#xA;    {&#xA;        if (args.Trim().Length &gt; 1)&#xA;            mc.myClassValue += args;&#xA;        return mc;&#xA;    }&#xA;&#xA;    public static myClass operator -(myClass mc, string args)&#xA;    {&#xA;        if (args.Trim().Length &gt; 1)&#xA;        {&#xA;            Regex rgx = new Regex(args);&#xA;            mc.myClassValue = rgx.Replace(mc.myClassValue, &quot;&quot;);&#xA;        }&#xA;        return mc;&#xA;    }&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>I think it's pretty cool to be able to shift a string left and right using &lt;&lt; and >> or to remove a set of strings that follow a regular expression pattern using -=</p>&#xA;&#xA;<pre><code>myClass tmpClass = new myClass(&quot;  HelloWorld123&quot;);&#xA;tmpClass -= @&quot;World&quot;;&#xA;tmpClass &lt;&lt;= 2;&#xA;Console.WriteLine(tmpClass);&#xA;</code></pre>&#xA;"
25393,2,9033,"2008-08-24 22:10:23",4,NULL,"<p>One interesting thing I've learned is that different parts of the framework and C# language were written at different times, hence inconsistencies. For example, the framework itself violates many FxCop rules because the rules weren't all in place when the framework was written.</p>&#xA;&#xA;<p>Also, the using statement was intended for delinieating &quot;scopes&quot; and not specifically for disposing resources. It was written after the lock statement. Eric Gunnerson <a href=&quot;http://haacked.com/archive/2004/05/27/DifficultiesOfLanguageDesign.aspx&quot; rel=&quot;nofollow&quot;>once mentioned</a> something along the lines of that if the using statement came first, they might have not needed to write the lock statement (though who knows, maybe they would have anyways), because the using statement might have been sufficient.</p>&#xA;"
26096,2,9033,"2008-08-25 14:21:57",5,NULL,"<p>@lainMH,</p>&#xA;&#xA;<p>Nullable booleans are useful when retrieving values from a database that are nullable and when putting values back in. Sometimes you want to know the field has not been set.</p>&#xA;"
26192,2,9033,"2008-08-25 15:09:19",6,NULL,"<p>In reading the book on development of the .NET framework.  A good piece of advice is not to use bool to turn stuff on or off, but rather use ENums.</p>&#xA;&#xA;<p>With ENums you give yourself some expandability without having to rewrite any code to add a new feature to a function.</p>&#xA;"
27941,2,9033,"2008-08-26 12:54:41",25,NULL,"<p>The C# ?? null coalescing operator - </p>&#xA;&#xA;<p>Not really hidden, but rarely used. Probably because a lot of developers run a mile when they see the conditional ? operator, so they run two when they see this one. Used:</p>&#xA;&#xA;<pre><code>string mystring = foo ?? &quot;foo was null&quot;&#xA;</code></pre>&#xA;&#xA;<p>rather than</p>&#xA;&#xA;<pre><code>string mystring;&#xA;if (foo==null)&#xA;    mystring = &quot;foo was null&quot;;&#xA;else&#xA;    mystring = foo;&#xA;</code></pre>&#xA;"
28811,2,9033,"2008-08-26 18:34:44",585,NULL,"<p><strong>lambdas and type inferrence</strong> are underrated. <strong>Lambdas can have multiple statements</strong> and they <strong>double as a compatible delegate object</strong> automatically (just make sure the signature match) as in:</p>&#xA;&#xA;<pre><code>Console.CancelKeyPress +=&#xA;    (sender, e) =&gt; {&#xA;        Console.WriteLine(&quot;CTRL+C detected!\n&quot;);&#xA;        e.Cancel = true;&#xA;    };&#xA;</code></pre>&#xA;&#xA;<p>Note that I don't have a <code>new CancellationEventHandler</code> nor do I have to specify types of <code>sender</code> and <code>e</code>, they're inferable from the event. Which is why this is less cumbersome to writing the whole <code>delegate (blah blah)</code> which also requires you to specify types of parameters.</p>&#xA;&#xA;<p><strong>Lambdas don't need to return anything</strong> and type inference is extremely powerful in context like this.</p>&#xA;&#xA;<p>And BTW, you can always return <strong>Lambdas that make Lambdas</strong> in the functional programming sense. For example, here's a lambda that makes a lambda that handles a Button.Click event:</p>&#xA;&#xA;<pre><code>Func&lt;int, int, EventHandler&gt; makeHandler =&#xA;    (dx, dy) =&gt; (sender, e) =&gt; {&#xA;        var btn = (Button) sender;&#xA;        btn.Top += dy;&#xA;        btn.Left += dx;&#xA;    };&#xA;&#xA;btnUp.Click += makeHandler(0, -1);&#xA;btnDown.Click += makeHandler(0, 1);&#xA;btnLeft.Click += makeHandler(-1, 0);&#xA;btnRight.Click += makeHandler(1, 0);&#xA;</code></pre>&#xA;&#xA;<p>Note the chaining: <code>(dx, dy) =&gt; (sender, e) =&gt;</code></p>&#xA;&#xA;<p>Now that's why I'm happy to have taken the functional programming class :-)</p>&#xA;&#xA;<p>Other than the pointers in C, I think it's the other fundamental thing you should learn :-)</p>&#xA;"
28830,2,9033,"2008-08-26 18:51:13",5,NULL,"<p>Reflection Emit and Expression trees come to mind...</p>&#xA;&#xA;<p>Don't miss Jeffrey Richter's CLR via C# and Jon Skeet's <img src=&quot;http://www.manning.com/skeet/skeet_cover150.jpg&quot; alt=&quot;alt text&quot; /></p>&#xA;&#xA;<p>See here for some resources:</p>&#xA;&#xA;<p><a href=&quot;http://www.codeproject.com/KB/trace/releasemodebreakpoint.aspx&quot;>http://www.codeproject.com/KB/trace/releasemodebreakpoint.aspx</a></p>&#xA;&#xA;<p><a href=&quot;http://www.codeproject.com/KB/dotnet/Creating_Dynamic_Types.aspx&quot;>http://www.codeproject.com/KB/dotnet/Creating_Dynamic_Types.aspx</a></p>&#xA;&#xA;<p><a href=&quot;http://www.codeproject.com/KB/cs/lambdaexpressions.aspx&quot;>http://www.codeproject.com/KB/cs/lambdaexpressions.aspx</a></p>&#xA;"
29081,2,9033,"2008-08-26 22:19:02",25,NULL,"<p>The <em>#if DEBUG</em> pre-processor directive. It is Useful for&#xA;testing and debugging (though I usually prefer to go the&#xA;unit testing route).</p>&#xA;&#xA;<pre><code>string customerName = null;&#xA;#if DEBUG&#xA;  customerName = &quot;Bob&quot;&#xA;#endif&#xA;</code></pre>&#xA;&#xA;<p>It will only execute code block if Visual Studio is set to&#xA;compile in 'Debug' mode. Otherwise the code block will be&#xA;ignored by the compiler (and grayed out in Visual Studio).</p>&#xA;"
31293,2,9033,"2008-08-27 21:05:42",20,NULL,"<p>I'm late to this party, so my first choices are already taken.  But I didn't see anyone mention this gem yet:</p>&#xA;&#xA;<p><a href=&quot;http://msdn.microsoft.com/en-us/concurrency/default.aspx&quot; rel=&quot;nofollow&quot;>Parallel Extensions to the .NET Framework</a></p>&#xA;&#xA;<p>It has things like replace with Parallel.For or foreach with Parallel.ForEach</p>&#xA;&#xA;<hr>&#xA;&#xA;<p>Parallel Sample :<br>&#xA;In your opinion, how many CLR object can be created in one second?&#xA;<img src=&quot;http://i.stack.imgur.com/nqJ2u.png&quot; alt=&quot;enter image description here&quot;>&#xA;<br>See fallowing example :</p>&#xA;&#xA;<pre><code>using System;&#xA;using System.Collections.Generic;&#xA;using System.Diagnostics;&#xA;using System.Threading;&#xA;using System.Threading.Tasks;&#xA;&#xA;namespace ObjectInitSpeedTest&#xA;{&#xA;   class Program&#xA;   {&#xA;       //Note: don't forget to build it in Release mode.&#xA;       static void Main()&#xA;       {&#xA;           normalSpeedTest();           &#xA;           parallelSpeedTest();&#xA;&#xA;           Console.ForegroundColor = ConsoleColor.White;&#xA;           Console.WriteLine(&quot;Press a key ...&quot;);&#xA;           Console.ReadKey();&#xA;       }&#xA;&#xA;       private static void parallelSpeedTest()&#xA;       {&#xA;           Console.ForegroundColor = ConsoleColor.Yellow;&#xA;           Console.WriteLine(&quot;parallelSpeedTest&quot;);&#xA;&#xA;           long totalObjectsCreated = 0;&#xA;           long totalElapsedTime = 0;&#xA;&#xA;           var tasks = new List&lt;Task&gt;();&#xA;           var processorCount = Environment.ProcessorCount;&#xA;&#xA;           Console.WriteLine(&quot;Running on {0} cores&quot;, processorCount);&#xA;&#xA;           for (var t = 0; t &lt; processorCount; t++)&#xA;           {&#xA;               tasks.Add(Task.Factory.StartNew(&#xA;               () =&gt;&#xA;               {&#xA;                   const int reps = 1000000000;&#xA;                   var sp = Stopwatch.StartNew();&#xA;                   for (var j = 0; j &lt; reps; ++j)&#xA;                   {&#xA;                       new object();&#xA;                   }&#xA;                   sp.Stop();&#xA;&#xA;                   Interlocked.Add(ref totalObjectsCreated, reps);&#xA;                   Interlocked.Add(ref totalElapsedTime, sp.ElapsedMilliseconds);&#xA;               }&#xA;               ));&#xA;           }&#xA;&#xA;           // let's complete all the tasks&#xA;           Task.WaitAll(tasks.ToArray());&#xA;&#xA;           Console.WriteLine(&quot;Created {0:N} objects in 1 sec\n&quot;, (totalObjectsCreated / (totalElapsedTime / processorCount)) * 1000);&#xA;       }&#xA;&#xA;       private static void normalSpeedTest()&#xA;       {&#xA;           Console.ForegroundColor = ConsoleColor.Green;&#xA;           Console.WriteLine(&quot;normalSpeedTest&quot;);&#xA;&#xA;           const int reps = 1000000000;&#xA;           var sp = Stopwatch.StartNew();&#xA;           sp.Start();&#xA;           for (var j = 0; j &lt; reps; ++j)&#xA;           {&#xA;               new object();&#xA;           }&#xA;           sp.Stop();&#xA;&#xA;           Console.WriteLine(&quot;Created {0:N} objects in 1 sec\n&quot;, (reps / sp.ElapsedMilliseconds) * 1000);&#xA;       }&#xA;   }&#xA;}&#xA;</code></pre>&#xA;"
32148,2,9033,"2008-08-28 12:55:58",24,NULL,"<p><a href=&quot;http://msdn.microsoft.com/en-us/library/6x6y6z4d.aspx&quot; rel=&quot;nofollow&quot;>true</a> and <a href=&quot;http://msdn.microsoft.com/en-us/library/6292hy1k.aspx&quot; rel=&quot;nofollow&quot;>false</a> operators are really weird.</p>&#xA;&#xA;<p>More comprehensive example can be found <a href=&quot;http://www.java2s.com/Tutorial/CSharp/0160__Operator-Overload/truefalseoperatorforComplex.htm&quot; rel=&quot;nofollow&quot;>here</a>.</p>&#xA;&#xA;<p><em>Edit: There is related SO question <a href=&quot;http://stackoverflow.com/questions/33265/whats-the-false-operator-in-c-good-for&quot;>What’s the false operator in C# good for?</a></em></p>&#xA;"
32706,2,9033,"2008-08-28 16:17:16",17,NULL,"<p>I love using the @ character for SQL queries. It keeps the sql nice and formatted and without having to surround each line with a string delimiter.</p>&#xA;&#xA;<pre><code>string sql = @&quot;SELECT firstname, lastname, email&#xA;               FROM users&#xA;               WHERE username = @username AND password = @password&quot;;&#xA;</code></pre>&#xA;"
33271,2,9033,"2008-08-28 20:07:42",6,NULL,"<p>Thought about <strong>@dp AnonCast</strong> and decided to try it out a bit. Here's what I come up with that might be useful to some:</p>&#xA;&#xA;<pre><code>// using the concepts of dp's AnonCast&#xA;static Func&lt;T&gt; TypeCurry&lt;T&gt;(Func&lt;object&gt; f, T type)&#xA;{&#xA;    return () =&gt; (T)f();&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>And here's how it might be used:</p>&#xA;&#xA;<pre><code>static void Main(string[] args)&#xA;{&#xA;&#xA;    var getRandomObjectX = TypeCurry(GetRandomObject,&#xA;        new { Name = default(string), Badges = default(int) });&#xA;&#xA;    do {&#xA;&#xA;        var obj = getRandomObjectX();&#xA;&#xA;        Console.WriteLine(&quot;Name : {0} Badges : {1}&quot;,&#xA;            obj.Name,&#xA;            obj.Badges);&#xA;&#xA;    } while (Console.ReadKey().Key != ConsoleKey.Escape);&#xA;&#xA;}&#xA;&#xA;static Random r = new Random();&#xA;static object GetRandomObject()&#xA;{&#xA;    return new {&#xA;        Name = Guid.NewGuid().ToString().Substring(0, 4),&#xA;        Badges = r.Next(0, 100)&#xA;    };&#xA;}&#xA;</code></pre>&#xA;"
33384,2,9033,"2008-08-28 20:59:59",75,NULL,"<p>I like looking up stuff in a list like:-</p>&#xA;&#xA;<pre><code>bool basketContainsFruit(string fruit) {&#xA;  return new[] { &quot;apple&quot;, &quot;orange&quot;, &quot;banana&quot;, &quot;pear&quot; }.Contains(fruit);&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>Rather than:-</p>&#xA;&#xA;<pre><code>bool basketContainsFruit(string fruit) {&#xA;  return fruit == &quot;apple&quot; || fruit == &quot;orange&quot; || fruit == &quot;banana&quot; ||&#xA;    fruit == &quot;pear&quot;;&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>Doesn't come up that much in practice, but the idea of matching items against the subject of the search can be really quite useful + succinct.</p>&#xA;"
33474,2,9033,"2008-08-28 21:46:35",40,NULL,"<p>A couple other attributes from the <a href=&quot;http://msdn.microsoft.com/en-us/library/system.diagnostics.aspx&quot; rel=&quot;nofollow&quot;>System.Diagnostics</a> namespace are quite helpful.</p>&#xA;&#xA;<p><a href=&quot;http://msdn.microsoft.com/en-us/library/system.diagnostics.debuggerbrowsableattribute.aspx&quot; rel=&quot;nofollow&quot;>DebuggerBrowsable</a> will let you hide variables from the debugger window (we use it for all private backing variables of exposed properties).  Along with that, <a href=&quot;http://msdn.microsoft.com/en-us/library/system.diagnostics.debuggerstepthroughattribute.aspx&quot; rel=&quot;nofollow&quot;>DebuggerStepThrough</a> makes the debugger step over that code, very useful for dumb properties (probably should be converted to auto-properties if you can take a dependency to the C# 3.0 compiler).  As an example</p>&#xA;&#xA;<pre><code>[DebuggerBrowsable(DebuggerBrowsableState.Never)]&#xA;private string nickName;&#xA;public string NickName    {&#xA;    [DebuggerStepThrough]&#xA;    get { return nickName; }&#xA;    [DebuggerStepThrough]&#xA;    set { this.nickName = value; }&#xA;}&#xA;</code></pre>&#xA;"
35342,2,9033,"2008-08-29 21:28:19",14,NULL,"<p><a href=&quot;http://msdn.microsoft.com/en-us/library/aa664622%28VS.71%29.aspx&quot;>ConditionalAttribute</a></p>&#xA;&#xA;<p>Allows you to tell the compiler to omit the call to the method marked with the attribute under certain conditions (#define).</p>&#xA;&#xA;<p>The fact that the method call is omitted also means that its parameters are not evaluated. This is very handy and it's what allows you to call expensive validation functions in Debug.Assert() and not worry about them slowing down your release build. </p>&#xA;"
37285,2,9033,"2008-09-01 00:03:42",115,NULL,"<pre><code>Environment.NewLine&#xA;</code></pre>&#xA;&#xA;<p>for system independent newlines.</p>&#xA;"
37467,2,9033,"2008-09-01 05:03:21",28,NULL,"<p><strong>Nesting Using Statements</strong></p>&#xA;&#xA;<p>Usually we do it like this:</p>&#xA;&#xA;<pre><code>StringBuilder sb = new StringBuilder();&#xA;using (StringWriter sw = new StringWriter()) {&#xA;    using (IndentedTextWriter itw = new IndentedTextWriter(sw)) {&#xA;        ... &#xA;    }&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>But we can do it this way:</p>&#xA;&#xA;<pre><code>StringBuilder sb = new StringBuilder();&#xA;using (StringWriter sw = new StringWriter())&#xA;using (IndentedTextWriter itw = new IndentedTextWriter(sw)) {&#xA;    ... &#xA;}&#xA;</code></pre>&#xA;"
37926,2,9033,"2008-09-01 13:21:11",17,NULL,"<p>The <a href=&quot;http://msdn.microsoft.com/en-us/library/ms173212.aspx&quot; rel=&quot;nofollow&quot;>extern alias</a> keyword to reference two versions of assemblies that have the same fully-qualified type names.</p>&#xA;"
38703,2,9033,"2008-09-02 02:10:07",2,NULL,"<p>PreviousPage property:</p>&#xA;&#xA;<p>&quot;The System.Web.UI.Page representing the page that transferred control to the current page.&quot;</p>&#xA;&#xA;<p>It is very useful.</p>&#xA;"
41872,2,9033,"2008-09-03 15:03:21",4,NULL,"<p>TryParse method for each primitive type is great when validating user input.</p>&#xA;&#xA;<pre><code>double doubleValue&#xA;if (!Double.TryParse(myDataRow(&quot;myColumn&quot;), out doubleValue))&#xA;{&#xA;    // set validation error&#xA;}&#xA;</code></pre>&#xA;"
44782,2,9033,"2008-09-04 21:06:30",44,NULL,"<p><strong>Foreach uses Duck Typing</strong></p>&#xA;&#xA;<p>Paraphrasing, or shamelessly stealing from <a href=&quot;http://blogs.msdn.com/kcwalina/archive/2007/07/18/DuckNotation.aspx&quot; rel=&quot;nofollow&quot;>Krzysztof Cwalinas blog</a> on this. More interesting trivia than anything.</p>&#xA;&#xA;<p>For your object to support foreach, you <em>don't</em> have to implement <em>IEnumerable</em>. I.e. this is not a constraint and it isn't checked by the compiler. What's checked is that</p>&#xA;&#xA;<ul>&#xA;<li>Your object provide a public method <em>GetEnumerator</em> that&#xA;<ul>&#xA;<li>takes no parameters</li>&#xA;<li>return a type that has two members&#xA;<ol>&#xA;<li>a parameterless <em>method MoveNext</em> that <em>returns a boolean</em></li>&#xA;<li>a <em>property Current</em> with a getter that <em>returns an Object</em></li>&#xA;</ol></li>&#xA;</ul></li>&#xA;</ul>&#xA;&#xA;<p>For example,  </p>&#xA;&#xA;<pre><code>class Foo&#xA;{&#xA;    public Bar GetEnumerator() { return new Bar(); }&#xA;&#xA;    public struct Bar&#xA;    {&#xA;        public bool MoveNext()&#xA;        {&#xA;            return false;&#xA;        }&#xA;&#xA;        public object Current&#xA;        {&#xA;            get { return null; }&#xA;        }&#xA;    }&#xA;}&#xA;&#xA;// the following complies just fine:&#xA;Foo f = new Foo();&#xA;foreach (object o in f)&#xA;{&#xA;    Console.WriteLine(&quot;Krzysztof Cwalina's da man!&quot;);&#xA;}&#xA;</code></pre>&#xA;"
45398,2,9033,"2008-09-05 07:49:27",24,NULL,"<p>There are some really hidden keywords and features in C# related to the TypedReference undocumented class. The following keywords are undocumented:</p>&#xA;&#xA;<ul>&#xA;<li><code>__makeref</code></li>&#xA;<li><code>__reftype</code></li>&#xA;<li><code>__refvalue</code></li>&#xA;<li><code>__arglist</code></li>&#xA;</ul>&#xA;&#xA;<p>Examples of use:</p>&#xA;&#xA;<pre><code>// Create a typed reference&#xA;int i = 1;&#xA;TypedReference tr1 = __makeref(i);&#xA;// Get the type of a typed reference&#xA;Type t = __reftype(tr1);&#xA;// Get the value of a typed referece&#xA;int j = __refvalue(tr1, int); &#xA;// Create a method that accepts and arbitrary number of typed references&#xA;void SomeMethod(__arglist) { ...&#xA;// Call the method&#xA;int x = 1;&#xA;string y = &quot;Foo&quot;;&#xA;Object o = new Object();&#xA;SomeMethod(__arglist(x,y,o));&#xA;// And finally iterate over method parameters&#xA;void SomeMethod(__arglist) {&#xA;    ArgIterator ai = new ArgIterator(__arglist);&#xA;while(ai.GetRemainingCount() &gt;0)&#xA;{&#xA;      TypedReference tr = ai.GetNextArg();&#xA;      Console.WriteLine(TypedReference.ToObject(tr));&#xA;}}&#xA;</code></pre>&#xA;"
45454,2,9033,"2008-09-05 09:14:05",2,NULL,"<p>@<a href=&quot;http://stackoverflow.com/questions/9033?#9092&quot; rel=&quot;nofollow&quot;>Robbie Rocketpants</a></p>&#xA;&#xA;<blockquote>&#xA;  <p>&quot;but my instincts tell me that this&#xA;  would cut a maximum of two type casts&#xA;  operations down to a maximum of one.&quot;</p>&#xA;</blockquote>&#xA;&#xA;<p>If you do the cast as you were suggesting in example 1 (using is &amp; as), it results in 2 calls to the &quot;is&quot; operator. Because when you do &quot;c = obj as MyClass&quot;, first it calls &quot;is&quot; behind the scenes, then if it fails that it simply returns null.</p>&#xA;&#xA;<p>If you do the cast as you were suggesting in example 2,</p>&#xA;&#xA;<pre><code>c = (MyClass)obj&#xA;</code></pre>&#xA;&#xA;<p>Then this actually performs the &quot;is&quot; operation again, then if it fails that check,it throws an exception (InvalidCastException).</p>&#xA;&#xA;<p>So, if you wanted to do a lightweight dynamic cast, it's best to do the 3rd example you provided:</p>&#xA;&#xA;<pre><code>MyClass c;&#xA;if (obj is MyClass)&#xA;{&#xA;    c = obj as MyClass&#xA;}&#xA;&#xA;if (c != null)&#xA;{&#xA;}&#xA;</code></pre>&#xA;&#xA;<p><strong>vs</strong></p>&#xA;&#xA;<pre><code>MyClass c = obj as MyClass;&#xA;&#xA;if (c != null)&#xA;{&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>You can see which is quicker, more consise and clearer.</p>&#xA;"
45873,2,9033,"2008-09-05 13:54:30",47,NULL,"<p>@David in Dakota:</p>&#xA;&#xA;<pre><code>Console.WriteLine( &quot;-&quot;.PadRight( 21, '-' ) );&#xA;</code></pre>&#xA;&#xA;<p>I used to do this, until I discovered that the String class has a constructor that allows you to do the same thing in a cleaner way:</p>&#xA;&#xA;<pre><code>new String('-',22);&#xA;</code></pre>&#xA;"
46157,2,9033,"2008-09-05 16:10:21",73,NULL,"<p><strong><a href=&quot;http://msdn.microsoft.com/en-us/library/system.runtime.compilerservices.internalsvisibletoattribute.aspx&quot; rel=&quot;nofollow&quot;>InternalsVisibleTo</a></strong> attribute is one that is not that well known, but can come in increadibly handy in certain circumstances. It basically allows another assembly to be able to access &quot;internal&quot; elements of the defining assembly.</p>&#xA;"
46290,2,9033,"2008-09-05 16:53:07",36,NULL,"<p>I just found out about this one today -- and I've been working with C# for 5 years!</p>&#xA;&#xA;<p>It's the <a href=&quot;http://msdn.microsoft.com/en-us/library/ms173212%28VS.80%29.aspx&quot; rel=&quot;nofollow&quot;>namespace alias qualifier</a>:</p>&#xA;&#xA;<pre><code>extern alias YourAliasHere;&#xA;</code></pre>&#xA;&#xA;<p>You can use it to load multiple versions of the same type. This can be useful in maintenance or upgrade scenarios where you have an updated version of your type that won't work in some old code, but you need to upgrade it to the new version. <a href=&quot;http://blogs.msdn.com/abhinaba/archive/2005/11/30/498278.aspx&quot; rel=&quot;nofollow&quot;>Slap on a namespace alias qualifier</a>, and the compiler will let you have both types in your code.</p>&#xA;"
49607,2,9033,"2008-09-08 12:49:18",30,NULL,"<p>I like the keyword <em>continue</em>.</p>&#xA;&#xA;<p>If you hit a condition in a loop and don't want to do anything but advance the loop just stick in &quot;continue;&quot;.</p>&#xA;&#xA;<p>E.g.:</p>&#xA;&#xA;<pre><code>foreach(object o in ACollection)&#xA;{&#xA;  if(NotInterested)&#xA;     continue;&#xA;}&#xA;</code></pre>&#xA;"
50891,2,9033,"2008-09-08 22:49:48",8,NULL,"<p>Not a C# specific thing, but I am a ternary operations junkie.</p>&#xA;&#xA;<p>Instead of </p>&#xA;&#xA;<pre><code>if (boolean Condition)&#xA;{&#xA;    //Do Function&#xA;}&#xA;else&#xA;{&#xA;    //Do something else&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>you can use a succinct</p>&#xA;&#xA;<pre><code>booleanCondtion ? true operation : false operation;&#xA;</code></pre>&#xA;&#xA;<p>e.g.</p>&#xA;&#xA;<p>Instead of</p>&#xA;&#xA;<pre><code>int value = param;&#xA;if (doubleValue)&#xA;{&#xA;    value *= 2;&#xA;}&#xA;else&#xA;{&#xA;    value *= 3;&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>you can type</p>&#xA;&#xA;<pre><code>int value = param * (tripleValue ? 3 : 2);&#xA;</code></pre>&#xA;&#xA;<p>It does help write succinct code, but nesting the damn things can be nasty, and they can be used for evil, but I love the little suckers nonetheless</p>&#xA;"
51171,2,9033,"2008-09-09 03:30:49",2,NULL,"<p>Saw a mention of List.ForEach above; 2.0 introduced a bevy of predicate-based collection operations - Find, FindAll, Exists, etc.  Coupled with anonymous delegates you can almost achieve the simplicity of 3.5's lambda expressions.</p>&#xA;"
51966,2,9033,"2008-09-09 14:04:46",45,NULL,"<p>A couple of things I like:</p>&#xA;&#xA;<p>-If you create an interface similar to</p>&#xA;&#xA;<pre><code> public interface SomeObject&lt;T&gt; where T : SomeObject&lt;T&gt;, new()&#xA;</code></pre>&#xA;&#xA;<p>you force anything that inherits from this interface to &#xA;contain a parameterless constructor. It is very useful for a &#xA;couple of things I've run across.</p>&#xA;&#xA;<p>-Using anonymous types to create a useful object on the fly:</p>&#xA;&#xA;<pre><code>var myAwesomeObject = new {Name=&quot;Foo&quot;, Size=10};&#xA;</code></pre>&#xA;&#xA;<p>-Finally, many Java developers are familiar with syntax like:</p>&#xA;&#xA;<pre><code>public synchronized void MySynchronizedMethod(){}&#xA;</code></pre>&#xA;&#xA;<p>However, in C# this is not valid syntax.  The workaround is a method attribute:</p>&#xA;&#xA;<pre><code> [MethodImpl(MethodImplOptions.Synchronized)]&#xA; public void MySynchronizedMethod(){}&#xA;</code></pre>&#xA;"
52998,2,9033,"2008-09-09 21:52:00",220,NULL,"<p>I think one of the most under-appreciated and lesser-known features of C# (.NET 3.5) are <a href=&quot;http://msdn.microsoft.com/en-us/library/bb397951.aspx&quot; rel=&quot;nofollow&quot;>Expression Trees</a>, <strong>especially</strong> when combined with Generics and Lambdas. This is an approach to API creation that newer libraries like NInject and Moq are using.</p>&#xA;&#xA;<p>For example, let's say that I want to register a method with an API and that API needs to get the method name</p>&#xA;&#xA;<p>Given this class:</p>&#xA;&#xA;<pre><code>public class MyClass&#xA;{&#xA;     public void SomeMethod() { /* Do Something */ }&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>Before, it was very common to see developers do this with strings and types (or something else largely string-based):</p>&#xA;&#xA;<pre><code>RegisterMethod(typeof(MyClass), &quot;SomeMethod&quot;);&#xA;</code></pre>&#xA;&#xA;<p>Well, that sucks because of the lack of strong-typing. What if I rename &quot;SomeMethod&quot;? Now, in 3.5 however, I can do this in a strongly-typed fashion:</p>&#xA;&#xA;<pre><code>RegisterMethod&lt;MyClass&gt;(cl =&gt; cl.SomeMethod());&#xA;</code></pre>&#xA;&#xA;<p>In which the RegisterMethod class uses <code>Expression&lt;Action&lt;T&gt;&gt;</code> like this:</p>&#xA;&#xA;<pre><code>void RegisterMethod&lt;T&gt;(Expression&lt;Action&lt;T&gt;&gt; action) where T : class&#xA;{&#xA;    var expression = (action.Body as MethodCallExpression);&#xA;&#xA;    if (expression != null)&#xA;    {&#xA;        // TODO: Register method&#xA;        Console.WriteLine(expression.Method.Name);&#xA;    }&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>This is one big reason that I'm in love with Lambdas and Expression Trees right now.</p>&#xA;"
58945,2,9033,"2008-09-12 13:25:56",409,NULL,"<p>My favorite trick is using the <a href=&quot;http://en.wikipedia.org/wiki/%3F%3F_Operator&quot; rel=&quot;nofollow&quot;>null coalesce operator</a> and parentheses to automagically instantiate collections for me.</p>&#xA;&#xA;<pre><code>private IList&lt;Foo&gt; _foo;&#xA;&#xA;public IList&lt;Foo&gt; ListOfFoo &#xA;    { get { return _foo ?? (_foo = new List&lt;Foo&gt;()); } }&#xA;</code></pre>&#xA;"
59691,2,9033,"2008-09-12 18:24:24",46,NULL,"<p>The <a href=&quot;http://msdn.microsoft.com/en-us/library/x13ttww7.aspx&quot; rel=&quot;nofollow&quot;>volatile</a> keyword to tell the compiler that a field can be modified by multiple threads concurrently.</p>&#xA;"
63661,2,9033,"2008-09-15 14:58:27",55,NULL,"<p>I couldn't see this looking above - one that I didn't realise you could do until recently is to call one constructor from another:</p>&#xA;&#xA;<pre><code>class Example&#xA;{&#xA;    public Example(int value1)&#xA;        : this(value1, &quot;Default Value&quot;)&#xA;    {&#xA;    }&#xA;&#xA;    public Example(int value1, string value2)&#xA;    {&#xA;        m_Value1 = value1;&#xA;        m_value2 = value2;&#xA;    }&#xA;&#xA;    int m_Value1;&#xA;    string m_value2;&#xA;}&#xA;</code></pre>&#xA;"
72518,2,9033,"2008-09-16 13:56:08",11,NULL,"<ol>&#xA;<li><p>I can't comment yet, but note that by default Visual Studio 2008 automatically steps over properties, so the DebuggerStepThrough attribute is no longer needed in that case.</p></li>&#xA;<li><p>Also, I haven't noticed anyone showing how to declare a parameter-less lambda (useful for implementing Action&lt;>)</p>&#xA;&#xA;<p><code>() => DoSomething(x);</code></p></li>&#xA;</ol>&#xA;&#xA;<p>You should also read up on closures - I'm not clever enough to explain them properly. But basically it means that the compiler does clever stuff so that the x in that line of code will still work even if it goes 'out of scope' after creating the lambda.</p>&#xA;&#xA;<ol>&#xA;<li><p>I also discovered recently that you can pretend to ignore a lambda parameter:</p>&#xA;&#xA;<p><code>(e, _) => DoSomething(e)</code></p></li>&#xA;</ol>&#xA;&#xA;<p>It's not really ignoring it, it's just that _ is a valid identifier. So you couldn't ignore both of the parameters like that, but I think it is a kind of neat way to indicate that we don't care about that parameter (typically the EventArgs which is <code>.Empty</code>).</p>&#xA;"
73097,2,9033,"2008-09-16 14:43:44",5,NULL,"<p><a href=&quot;http://msdn.microsoft.com/en-us/library/system.runtime.remoting.proxies.realproxy.aspx&quot; rel=&quot;nofollow&quot;>System.Runtime.Remoting.Proxies.RealProxy</a></p>&#xA;&#xA;<p>It enables Aspect Oriented Programming in C#, and you can also do a lot of other fancy stuff with it.</p>&#xA;"
74482,2,9033,"2008-09-16 16:53:37",455,NULL,"<p>Aliased generics:</p>&#xA;&#xA;<pre><code>using ASimpleName = Dictionary&lt;string, Dictionary&lt;string, List&lt;string&gt;&gt;&gt;;&#xA;</code></pre>&#xA;&#xA;<p>It allows you to use <code>ASimpleName</code>, instead of <code>Dictionary&lt;string, Dictionary&lt;string, List&lt;string&gt;&gt;&gt;</code>.</p>&#xA;&#xA;<p>Use it when you would use the same generic big long complex thing in a lot of places.</p>&#xA;"
87276,2,9033,"2008-09-17 20:28:37",6,NULL,"<p><strong>new modifier</strong></p>&#xA;&#xA;<p>Usage of the &quot;new&quot; modifier in C# is not exactly hidden but it's not often seen. The new modifier comes in handy when you need to &quot;hide&quot; base class members and not always override them. This means when you cast the derived class as the base class then the &quot;hidden&quot; method becomes visible and is called instead of the same method in the derived class.</p>&#xA;&#xA;<p>It is easier to see in code:</p>&#xA;&#xA;<pre><code>public class BaseFoo&#xA;{&#xA;    virtual public void DoSomething()&#xA;    {&#xA;        Console.WriteLine(&quot;Foo&quot;);&#xA;    }&#xA;}&#xA;&#xA;public class DerivedFoo : BaseFoo&#xA;{&#xA;    public new void DoSomething()&#xA;    {&#xA;        Console.WriteLine(&quot;Bar&quot;);&#xA;    }&#xA;}&#xA;&#xA;public class DerivedBar : BaseFoo&#xA;{&#xA;    public override void DoSomething()&#xA;    {&#xA;        Console.WriteLine(&quot;FooBar&quot;);&#xA;    }&#xA;}&#xA;&#xA;class Program&#xA;{&#xA;    static void Main(string[] args)&#xA;    {&#xA;        BaseFoo derivedBarAsBaseFoo = new DerivedBar();&#xA;        BaseFoo derivedFooAsBaseFoo = new DerivedFoo();&#xA;&#xA;        DerivedFoo derivedFoo = new DerivedFoo();&#xA;&#xA;        derivedFooAsBaseFoo.DoSomething(); //Prints &quot;Foo&quot; when you might expect &quot;Bar&quot;&#xA;        derivedBarAsBaseFoo.DoSomething(); //Prints &quot;FooBar&quot;&#xA;&#xA;        derivedFoo.DoSomething(); //Prints &quot;Bar&quot;&#xA;    }&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>[Ed: Do I get extra points for puns? Sorry, couldn't be helped.]</p>&#xA;"
89505,2,9033,"2008-09-18 02:33:51",61,NULL,"<p>Don't forget about <strong><a href=&quot;http://msdn.microsoft.com/en-us/library/13940fs2%28VS.71%29.aspx&quot; rel=&quot;nofollow&quot;>goto</a></strong>.</p>&#xA;"
90432,2,9033,"2008-09-18 06:08:16",12,NULL,"<p>Falling through <code>switch</code>-<code>case</code>s can be achieved by having no code in a <code>case</code> (see <code>case 0</code>), or using the special <code>goto case</code> (see <code>case 1</code>) or <code>goto default</code> (see <code>case 2</code>) forms:</p>&#xA;&#xA;<pre><code>switch (/*...*/) {&#xA;    case 0: // shares the exact same code as case 1&#xA;    case 1:&#xA;        // do something&#xA;        goto case 2;&#xA;    case 2:&#xA;        // do something else&#xA;        goto default;&#xA;    default:&#xA;        // do something entirely different&#xA;        break;&#xA;}&#xA;</code></pre>&#xA;"
99844,2,9033,"2008-09-19 05:18:36",4,NULL,"<p>The #region <em>{string}</em> and #endregion pair is very neat for grouping code (outlining).</p>&#xA;&#xA;<pre><code>#region Using statements&#xA;using System;&#xA;using System.IO;&#xA;using ....;&#xA;using ....;&#xA;#endregion&#xA;</code></pre>&#xA;&#xA;<p>The code block can be compressed to a single describing line of text. Works inside functions aswell. </p>&#xA;"
100321,2,9033,"2008-09-19 07:48:12",42,NULL,"<p>Static constructors.</p>&#xA;&#xA;<p>Instances:</p>&#xA;&#xA;<pre><code>public class Example&#xA;{&#xA;    static Example()&#xA;    {&#xA;        // Code to execute during type initialization&#xA;    }&#xA;&#xA;    public Example()&#xA;    {&#xA;        // Code to execute during object initialization&#xA;    }&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>Static classes:</p>&#xA;&#xA;<pre><code>public static class Example&#xA;{&#xA;    static Example()&#xA;    {&#xA;        // Code to execute during type initialization&#xA;    }&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>MSDN <a href=&quot;http://msdn.microsoft.com/en-us/library/k9x6w0hc.aspx&quot; rel=&quot;nofollow&quot;>says</a>:</p>&#xA;&#xA;<blockquote>&#xA;  <p>A static constructor is used to initialize any static data, or to perform a particular action that needs performed once only. It is called automatically before the first instance is created or any static members are referenced.</p>&#xA;</blockquote>&#xA;&#xA;<p>For example:</p>&#xA;&#xA;<pre><code>public class MyWebService&#xA;{&#xA;    public static DateTime StartTime;&#xA;&#xA;    static MyWebService()&#xA;    {&#xA;        MyWebService.StartTime = DateTime.Now;&#xA;    }&#xA;&#xA;    public TimeSpan Uptime&#xA;    {&#xA;        get { return DateTime.Now - MyWebService.StartTime; }&#xA;    }&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>But, you could also just as easily have done:</p>&#xA;&#xA;<pre><code>public class MyWebService&#xA;{&#xA;    public static DateTime StartTime = DateTime.Now;&#xA;&#xA;    public TimeSpan Uptime&#xA;    {&#xA;        get { return DateTime.Now - MyWebService.StartTime; }&#xA;    }&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>So you'll be hard-pressed to find any instance when you actually need to use a static constructor.</p>&#xA;&#xA;<p>MSDN offers useful notes on static constructors:</p>&#xA;&#xA;<blockquote>&#xA;  <ul>&#xA;  <li><p>A static constructor does not take access modifiers or have parameters.</p></li>&#xA;  <li><p>A static constructor is called automatically to initialize the class &#xA;  before the first instance is created<br>&#xA;  or any static members are referenced.</p></li>&#xA;  <li><p>A static constructor cannot be called directly.</p></li>&#xA;  <li><p>The user has no control on when the static constructor is executed in the &#xA;  program.</p></li>&#xA;  <li><p>A typical use of static constructors is when the class is&#xA;  using a log file and the&#xA;  constructor is used to write<br>&#xA;  entries to this file.</p></li>&#xA;  <li><p>Static constructors are also useful when creating wrapper classes for<br>&#xA;  unmanaged code, when the constructor<br>&#xA;  can call the LoadLibrary method.</p></li>&#xA;  <li><p>If a static constructor throws an exception, the runtime will not<br>&#xA;  invoke it a second time, and the type &#xA;  will remain uninitialized for the<br>&#xA;  lifetime of the application domain in &#xA;  which your program is running.</p></li>&#xA;  </ul>&#xA;</blockquote>&#xA;&#xA;<p>The most important note is that if an error occurs in the static constructor, a <code>TypeIntializationException</code> is thrown and you cannot drill down to the offending line of code. Instead, you have to examine the <code>TypeInitializationException</code>'s <code>InnerException</code> member, which is the specific cause.</p>&#xA;"
102358,2,9033,"2008-09-19 14:39:17",2,NULL,"<p>Some concurrency utilities in the BCL might qualify as hidden features.</p>&#xA;&#xA;<p>Things like System.Threading.Monitor are used internally by the lock keyword; clearly in C# the lock keyword is preferrable, but sometimes it pays to know how things are done at a lower level; I had to lock in C++/CLI, so I encased a block of code with calls to Monitor.Enter() and Monitor.Exit().</p>&#xA;"
103235,2,9033,"2008-09-19 15:59:09",6,NULL,"<p>Literals can be used as variables of that type.&#xA;eg.</p>&#xA;&#xA;<pre><code>Console.WriteLine(5.ToString());&#xA;Console.WriteLine(5M.GetType());   // Returns &quot;System.Decimal&quot;&#xA;Console.WriteLine(&quot;This is a string!!!&quot;.Replace(&quot;!!&quot;, &quot;!&quot;));&#xA;</code></pre>&#xA;&#xA;<p>Just a bit of trivia...</p>&#xA;&#xA;<p>There's quite a few things people haven't mentioned, but they have mostly to do with unsafe constructs.  Here's one that can be used by &quot;regular&quot; code though:</p>&#xA;&#xA;<p>The checked/unchecked keywords:</p>&#xA;&#xA;<pre><code>public static int UncheckedAddition(int a, int b)&#xA;{&#xA;    unchecked { return a + b; }&#xA;}&#xA;&#xA;public static int CheckedAddition(int a, int b)&#xA;{&#xA;    checked { return a + b; } // or &quot;return checked(a + b)&quot;;&#xA;}&#xA;&#xA;public static void Main() &#xA;{&#xA;    Console.WriteLine(&quot;Unchecked: &quot; + UncheckedAddition(Int32.MaxValue, + 1));  // &quot;Wraps around&quot;&#xA;    Console.WriteLine(&quot;Checked: &quot; + CheckedAddition(Int32.MaxValue, + 1));  // Throws an Overflow exception&#xA;    Console.ReadLine();&#xA;}&#xA;</code></pre>&#xA;"
103449,2,9033,"2008-09-19 16:26:29",2,NULL,"<p>Before lambda comes into play, it's anonymous delegate. That could be used for blanket code similar to Ruby's blockgiven. I haven't tested how lambda works though because I want to stick with .NET 2.0 so far.</p>&#xA;&#xA;<p>For example when you want to make sure you remember to close your HTML tags:</p>&#xA;&#xA;<pre><code>MyHtmlWriter writer=new MyHtmlWriter();&#xA;writer.writeTag(&quot;html&quot;, &#xA;  delegate ()&#xA;  { &#xA;    writer.writeTag(&quot;head&quot;, &#xA;       delegate() &#xA;       { &#xA;           writer.writeTag(&quot;title&quot;...);&#xA;       }&#xA;    )&#xA;  })&#xA;</code></pre>&#xA;&#xA;<p>I am sure if lambda is an option, that could yield much cleaner code :)</p>&#xA;"
104738,2,9033,"2008-09-19 19:20:31",1,NULL,"<p>If 3rd-party extensions are allowed, then <a href=&quot;http://www.google.co.il/url?sa=t&amp;source=web&amp;ct=res&amp;cd=1&amp;url=http%3A%2F%2Fwww.itu.dk%2Fresearch%2Fc5%2F&amp;ei=H_vTSPmZGZyw0gTK4t2VDQ&amp;usg=AFQjCNEd1FXV-4rROqtPwZ_jDwmW1w5pFA&amp;sig2=ILE99mEc76cQ6g-iRnPgbQ&quot; rel=&quot;nofollow&quot;>C5</a> and <a href=&quot;http://www.google.co.il/url?sa=t&amp;source=web&amp;ct=res&amp;cd=2&amp;url=http%3A%2F%2Fmsdn.microsoft.com%2Fen-us%2Flibrary%2Fbb648752.aspx&amp;ei=N_vTSPzrComE0QSvwemcDQ&amp;usg=AFQjCNFxZGL9m_QDWlvlkRNOpiLSG_q8bA&amp;sig2=NGJmUpq-jE6kawcvaWWGYQ&quot; rel=&quot;nofollow&quot;>Microsoft CCR</a> (see <a href=&quot;http://www.lnbogen.com/MicrosoftCCRCleanWayToWriteParallelCodeInNet.aspx&quot; rel=&quot;nofollow&quot;>this blog post</a> for a quick introduction) are a must-know.</p>&#xA;&#xA;<p>C5 complements .Net's somewhat lacking collections library (not Set???), and CCR makes concurrent programming easier (I hear it's due to be merged with Parallel Extensions).</p>&#xA;"
105042,2,9033,"2008-09-19 20:02:05",67,NULL,"<p>Dictionary.TryGetValue(K key, out V value)</p>&#xA;&#xA;<p>Works as a check and a get in one. Rather than;</p>&#xA;&#xA;<pre><code>if(dictionary.ContainsKey(key)) &#xA;{&#xA;    value = dictionary[key];&#xA;    ...&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>you can just do;</p>&#xA;&#xA;<pre><code>if(dictionary.TryGetValue(key, out value)) &#xA;{ ... }&#xA;</code></pre>&#xA;&#xA;<p>and the value has been set.</p>&#xA;"
106750,2,9033,"2008-09-20 01:50:14",4,NULL,"<p>I think a lot of people know about pointers in C but are not sure if it works in C#. You can use pointers in C# in an unsafe context:</p>&#xA;&#xA;<pre><code>static void Main()&#xA;{&#xA;    int i;&#xA;    unsafe&#xA;    {               &#xA;        // pointer pi has the address of variable i&#xA;        int* pi = &amp;i; &#xA;        // pointer ppi has the address of variable pi&#xA;        int** ppi = &amp;pi;&#xA;        // ppi(addess of pi) -&gt; pi(addess of i) -&gt; i(0)&#xA;        i = 0;&#xA;        // dereference the pi, i.e. *pi is i&#xA;        Console.WriteLine(&quot;i = {0}&quot;, *pi); // output: i = 0&#xA;        // since *pi is i, equivalent to i++&#xA;        (*pi)++;&#xA;        Console.WriteLine(&quot;i = {0}&quot;, *pi); // output: i = 1&#xA;        // since *ppi is pi, one more dereference  *pi is i &#xA;        // equivalent to i += 2&#xA;        **ppi += 2;&#xA;        Console.WriteLine(&quot;i = {0}&quot;, *pi);// output: i = 3&#xA;    }&#xA;    Console.ReadLine();&#xA;}&#xA;</code></pre>&#xA;"
119648,2,9033,"2008-09-23 07:45:27",1,NULL,"<p>Some ?? weirdness  :)</p>&#xA;&#xA;<pre><code>Delegate target =&#xA;  (target0 = target as CallTargetWithContext0) ??&#xA;  (target1 = target as CallTargetWithContext1) ??&#xA;  (target2 = target as CallTargetWithContext2) ??&#xA;  (target3 = target as CallTargetWithContext3) ??&#xA;  (target4 = target as CallTargetWithContext4) ??&#xA;  (target5 = target as CallTargetWithContext5) ??&#xA;  ((Delegate)(targetN = target as CallTargetWithContextN));&#xA;</code></pre>&#xA;&#xA;<p>Interesting to note the last cast that is needed for some reason. Bug or by design?</p>&#xA;"
121405,2,9033,"2008-09-23 14:36:03",9,NULL,"<pre><code>System.Diagnostics.Debug.Assert (false);&#xA;</code></pre>&#xA;&#xA;<p>will trigger a popup and allow you to attach a debugger to a running .NET process during execution. Very useful for those times when for some reason you can't directly debug an ASP.NET application.</p>&#xA;"
121470,2,9033,"2008-09-23 14:44:29",11,NULL,"<p>There are operators for performing <a href=&quot;http://msdn.microsoft.com/en-us/library/z5z9kes2.aspx&quot; rel=&quot;nofollow&quot;><code>implicit</code></a> and <a href=&quot;http://msdn.microsoft.com/en-us/library/xhbhezf4.aspx&quot; rel=&quot;nofollow&quot;><code>explicit</code></a> user-defined type conversion between the declared class and one or more arbitrary classes. The <code>implicit</code> operator effectively allows the simulation of overloading the assignement operator, which is possible in languages such as C++ but not C#.</p>&#xA;&#xA;<p>It doesn't seem to be a feature one comes across very often, but it is in fact used in the <a href=&quot;http://en.wikipedia.org/wiki/Language%5FIntegrated%5FQuery#LINQ%5Fto%5FXML&quot; rel=&quot;nofollow&quot;>LINQ to XML</a> (<code>System.Xml.Linq</code>) library, where you can implicitly convert strings to <code>XName</code> objects. Example:</p>&#xA;&#xA;<pre><code>XName tagName = &quot;x:Name&quot;;&#xA;</code></pre>&#xA;&#xA;<p>I discovered this feature in this <a href=&quot;http://www.codeproject.com/KB/architecture/smip.aspx&quot; rel=&quot;nofollow&quot;>article</a> about how to simulate multiple inheritance in C#.</p>&#xA;"
123701,2,9033,"2008-09-23 20:39:01",185,NULL,"<p><strong>Unions (the C++ shared memory kind) in pure, safe C#</strong></p>&#xA;&#xA;<p>Without resorting to unsafe mode and pointers, you can have class members share memory space in a class/struct.  Given the following class:</p>&#xA;&#xA;<pre><code>[StructLayout(LayoutKind.Explicit)]&#xA;public class A&#xA;{&#xA;    [FieldOffset(0)]&#xA;    public byte One;&#xA;&#xA;    [FieldOffset(1)]&#xA;    public byte Two;&#xA;&#xA;    [FieldOffset(2)]&#xA;    public byte Three;&#xA;&#xA;    [FieldOffset(3)]&#xA;    public byte Four;&#xA;&#xA;    [FieldOffset(0)]&#xA;    public int Int32;&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>You can modify the values of the byte fields by manipulating the Int32 field and vice-versa.  For example, this program:</p>&#xA;&#xA;<pre><code>    static void Main(string[] args)&#xA;    {&#xA;        A a = new A { Int32 = int.MaxValue };&#xA;&#xA;        Console.WriteLine(a.Int32);&#xA;        Console.WriteLine(&quot;{0:X} {1:X} {2:X} {3:X}&quot;, a.One, a.Two, a.Three, a.Four);&#xA;&#xA;        a.Four = 0;&#xA;        a.Three = 0;&#xA;        Console.WriteLine(a.Int32);&#xA;    }&#xA;</code></pre>&#xA;&#xA;<p>Outputs this:</p>&#xA;&#xA;<pre><code>2147483647&#xA;FF FF FF 7F&#xA;65535&#xA;</code></pre>&#xA;&#xA;<p>just add&#xA;using System.Runtime.InteropServices;</p>&#xA;"
140221,2,9033,"2008-09-26 15:28:12",48,NULL,"<p>A few hidden features I've come across:</p>&#xA;&#xA;<ul>&#xA;<li><code>stackalloc</code> which lets you allocate arrays on the stack</li>&#xA;<li>Anonymous methods with no explicit parameter list, which are implicitly convertible to any delegate type with non-out/ref parameters (very handy for events, as noted in an earlier comment)</li>&#xA;<li>A lot of people aren't aware of what events really are (an add/remove pair of methods, like get/set for properties); field-like events in C# really declare both a variable <em>and</em> an event</li>&#xA;<li>The <code>==</code> and <code>!=</code> operators can be overloaded to return types other than <code>bool</code>. Strange but true.</li>&#xA;<li>The query expression translation in C# 3 is really &quot;simple&quot; in some ways - which means you can get it to do some <a href=&quot;http://msmvps.com/blogs/jon_skeet/archive/2008/02/29/odd-query-expressions.aspx&quot; rel=&quot;nofollow&quot;>very odd things</a>.</li>&#xA;<li>Nullable types have special boxing behaviour: a null value gets boxed to a null reference, and you can unbox from null to the nullable type too.</li>&#xA;</ul>&#xA;"
149509,2,9033,"2008-09-29 16:34:13",14,NULL,"<p>One feature that I only learned about here on Stack Overflow was the ability to set an attribute on the return parameter. </p>&#xA;&#xA;<pre><code>[AttributeUsage( AttributeTargets.ReturnValue )]&#xA;public class CuriosityAttribute:Attribute&#xA;{&#xA;}&#xA;&#xA;public class Bar&#xA;{&#xA;    [return: Curiosity]&#xA;    public Bar ReturnANewBar()&#xA;    {&#xA;        return new Bar();&#xA;    }&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>This was truly a hidden feature for me :-)</p>&#xA;"
157242,2,9033,"2008-10-01 11:51:30",9,NULL,"<p>String interning. This is one that I haven't seen come up in this discussion yet. It's a little obscure, but in certain conditions it can be useful.</p>&#xA;&#xA;<p>The CLR keeps a table of references to literal strings (and programmatically interned strings). If you use the same string in several places in your code it will be stored once in the table. This can ease the amount of memory required for allocating strings.</p>&#xA;&#xA;<p>You can test if a string is interned by using <a href=&quot;http://msdn.microsoft.com/en-us/library/system.string.isinterned.aspx&quot; rel=&quot;nofollow&quot;>String.IsInterned(string)</a> and you can intern a string using <a href=&quot;http://msdn.microsoft.com/en-us/library/system.string.intern.aspx&quot; rel=&quot;nofollow&quot;>String.Intern(string)</a>.</p>&#xA;&#xA;<p><strong>Note:</strong> The CLR can hold a reference to an interned string after application or even AppDomain end. See the MSDN documentation for details.</p>&#xA;"
165795,2,9033,"2008-10-03 05:34:23",45,NULL,"<p>The params keyword, i.e.</p>&#xA;&#xA;<pre><code>public void DoSomething(params string[] theStrings)&#xA;{&#xA;  foreach(string s in theStrings)&#xA;  {&#xA;    // Something with the Strings…&#xA;  }&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>Called like</p>&#xA;&#xA;<pre><code>DoSomething(“The”, “cat”, “sat”, “on”, “the” ,”mat”);&#xA;</code></pre>&#xA;"
165845,2,9033,"2008-10-03 05:57:05",14,NULL,"<p>Labeling my endregions...</p>&#xA;&#xA;<pre><code>#region stuff1&#xA; #region stuff1a&#xA; //...&#xA; #endregion stuff1a&#xA;#endregion stuff1&#xA;</code></pre>&#xA;"
176231,2,9033,"2008-10-06 21:16:09",6,NULL,"<p>Instead of using int.TryParse() or Convert.ToInt32(), I like having a static integer parsing function that returns null when it can't parse.  Then I can use ?? and the ternary operator together to more clearly ensure my declaration and initialization are all done on one line in a easy-to-understand way.   </p>&#xA;&#xA;<pre><code>public static class Parser {&#xA;    public static int? ParseInt(string s) {&#xA;        int result;&#xA;        bool parsed = int.TryParse(s, out result);&#xA;        if (parsed) return result;&#xA;        else return null;&#xA;    }&#xA;    // ...&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>This is also good to avoid duplicating the left side of an assignment, but even better to avoid duplicating long calls on the right side of an assignment, such as a database calls in the following example.  Instead of ugly if-then trees (which I run into often):</p>&#xA;&#xA;<pre><code>int x = 0;&#xA;YourDatabaseResultSet data = new YourDatabaseResultSet();&#xA;if (cond1)&#xA;    if (int.TryParse(x_input, x)){&#xA;        data = YourDatabaseAccessMethod(&quot;my_proc_name&quot;, 2, x);&#xA;    }&#xA;    else{&#xA;        x = -1;&#xA;        // do something to report &quot;Can't Parse&quot;    &#xA;    }&#xA;}&#xA;else {&#xA;    x = y;&#xA;    data = YourDatabaseAccessMethod(&quot;my_proc_name&quot;, &#xA;       new SqlParameter(&quot;@param1&quot;, 2),&#xA;       new SqlParameter(&quot;@param2&quot;, x));&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>You can do:</p>&#xA;&#xA;<pre><code>int x = cond1 ? (Parser.ParseInt(x_input) ?? -1) : y;&#xA;if (x &gt;= 0)  data = YourDatabaseAccessMethod(&quot;my_proc_name&quot;, &#xA;    new SqlParameter(&quot;@param1&quot;, 2),&#xA;    new SqlParameter(&quot;@param2&quot;, x));&#xA;</code></pre>&#xA;&#xA;<p>Much cleaner and easier to understand</p>&#xA;"
181714,2,9033,"2008-10-08 07:45:04",26,NULL,"<p>The <a href=&quot;http://msdn.microsoft.com/en-us/library/system.environment.userinteractive.aspx&quot; rel=&quot;nofollow&quot;>Environment.UserInteractive</a> property. </p>&#xA;&#xA;<blockquote>&#xA;  <p>The UserInteractive property reports&#xA;  false for a Windows process or a&#xA;  service like IIS that runs without a&#xA;  user interface. If this property is&#xA;  false, do not display modal dialogs or&#xA;  message boxes because there is no&#xA;  graphical user interface for the user&#xA;  to interact with.</p>&#xA;</blockquote>&#xA;"
189100,2,9033,"2008-10-09 20:37:13",3,NULL,"<p>ContextBoundObject</p>&#xA;&#xA;<p>Not so much a C# thing as a .NET thing. It's another way of achieving DI although it can be hardwork. And you have to inherit from it which can be off putting.</p>&#xA;&#xA;<p><a href=&quot;http://msdn.microsoft.com/en-us/library/system.contextboundobject.aspx&quot; rel=&quot;nofollow&quot;>http://msdn.microsoft.com/en-us/library/system.contextboundobject.aspx</a></p>&#xA;&#xA;<p>I've used it to add logging when I decorate a class/method with a custom logging attribute.</p>&#xA;"
192127,2,9033,"2008-10-10 16:22:41",28,NULL,"<p>Full access to the call stack:</p>&#xA;&#xA;<pre><code>public static void Main()&#xA;{&#xA;  StackTrace stackTrace = new StackTrace();           // get call stack&#xA;  StackFrame[] stackFrames = stackTrace.GetFrames();  // get method calls (frames)&#xA;&#xA;  // write call stack method names&#xA;  foreach (StackFrame stackFrame in stackFrames)&#xA;  {&#xA;    Console.WriteLine(stackFrame.GetMethod().Name);   // write method name&#xA;  }&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>So, if you'll take the first one - you know what function you are in. If you're creating a helper tracing function - take one before the last one - you'll know your caller.</p>&#xA;"
195097,2,9033,"2008-10-12 04:26:32",5,NULL,"<p>I find this technique interesting while working with linqxml:</p>&#xA;&#xA;<pre><code>public bool GetFooSetting(XElement ndef){&#xA;   return (bool?)ndef.Element(&quot;MyBoolSettingValue&quot;) ?? true;&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>as opposed to:</p>&#xA;&#xA;<pre><code>public bool GetFooSetting(XElement ndef){&#xA;   return ndef.Element(&quot;MyBoolSettingValue&quot;) != null ? bool.Parse(ndef.Element(&quot;MyBoolSettingValue&quot;) ) : true;&#xA;}&#xA;</code></pre>&#xA;"
199247,2,9033,"2008-10-13 22:25:52",168,NULL,"<p>If you want to exit your program without calling any finally blocks or finalizers use <a href=&quot;http://msdn.microsoft.com/en-us/library/ms131100.aspx&quot; rel=&quot;nofollow&quot;>FailFast</a>:</p>&#xA;&#xA;<pre><code>Environment.FailFast()&#xA;</code></pre>&#xA;"
199257,2,9033,"2008-10-13 22:29:10",3,NULL,"<pre><code>double dSqrd = Math.Pow(d,2.0);&#xA;</code></pre>&#xA;&#xA;<p>is more accurate than </p>&#xA;&#xA;<pre><code>double dSqrd = d * d; // Here we can lose precision&#xA;</code></pre>&#xA;"
199269,2,9033,"2008-10-13 22:32:10",8,NULL,"<p>You can switch on string!</p>&#xA;&#xA;<pre><code>switch(name)&#xA;{&#xA;  case &quot;Dave&quot;:&#xA;    return true;&#xA;  case &quot;Bob&quot;:&#xA;    return false;&#xA;  default:&#xA;    throw new ApplicationException();&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>Very handy! and a lot cleaner than a bunch of if-else statements</p>&#xA;"
212905,2,9033,"2008-10-17 16:41:52",80,NULL,"<p>Just learned, anonymous types can infer property names from the variable name:</p>&#xA;&#xA;<pre><code>string hello = &quot;world&quot;;&#xA;var o = new { hello };&#xA;Console.WriteLine(o.hello);&#xA;</code></pre>&#xA;"
214951,2,9033,"2008-10-18 11:54:29",57,NULL,"<p>More of a runtime feature, but I recently learned that there are two garbage collectors. The workstation gc and the server gc. Workstation is the default on client versions of windows, but server is much faster on multicore machines.</p>&#xA;&#xA;<pre><code>&#xA;&lt;configuration&gt;&#xA;   &lt;runtime&gt;&#xA;      &lt;gcServer enabled=&quot;true&quot;/&gt;&#xA;   &lt;/runtime&gt;&#xA;&lt;/configuration&gt;&#xA;</code></pre>&#xA;&#xA;<p>Be careful. The server gc requires more memory.</p>&#xA;"
223087,2,9033,"2008-10-21 19:08:37",4,NULL,"<p>This may be pretty basic to database application developers, but it took me a while to realize that null is not the same as DBNull.value.  </p>&#xA;&#xA;<p>You have to use DBNull.value when you want to see if a value from a database record is null.</p>&#xA;"
236173,2,9033,"2008-10-25 09:53:31",7,NULL,"<h2>Object.ReferenceEquals Method</h2>&#xA;&#xA;<p>Determines whether the specified Object instances are the same instance.</p>&#xA;&#xA;<p><strong>Parameters:</strong></p>&#xA;&#xA;<ul>&#xA;<li>objA: System.Object - The first Object to compare. </li>&#xA;<li>objB: System.Object - The second Object to compare. </li>&#xA;</ul>&#xA;&#xA;<p><strong>Example:</strong></p>&#xA;&#xA;<pre><code> object o = null;&#xA; object p = null;&#xA; object q = new Object();&#xA;&#xA; Console.WriteLine(Object.ReferenceEquals(o, p));&#xA; p = q;&#xA; Console.WriteLine(Object.ReferenceEquals(p, q));&#xA; Console.WriteLine(Object.ReferenceEquals(o, p));&#xA;</code></pre>&#xA;&#xA;<p><strong>Difference to &quot;==&quot; and &quot;.Equals&quot;:</strong></p>&#xA;&#xA;<p>Basically, Equals() tests of object A has the same content as object B.</p>&#xA;&#xA;<p>The method System.Object.ReferenceEquals() always compares references.&#xA;Although a class can provide its own behavior for the equality operator&#xA;(below), that re-defined operator isn't invoked if the operator is called&#xA;via a reference to System.Object. </p>&#xA;&#xA;<p>For strings there isn't really a difference, because both == and Equals have been overriden to compare the content of the string.</p>&#xA;&#xA;<p>See also <a href=&quot;http://stackoverflow.com/questions/73713/how-do-i-check-for-nulls-in-an-operator-overload-without-infinite-recursion#73732&quot;>this answer</a> to another question (&quot;How do I check for nulls in an ‘==’ operator overload without infinite recursion?&quot;).</p>&#xA;"
238462,2,9033,"2008-10-26 19:04:33",142,NULL,"<p>Mixins. Basically, if you want to add a feature to several classes, but cannot use one base class for all of them, get each class to implement an interface (with no members). Then, write an extension method <strong>for the interface</strong>, i.e.</p>&#xA;&#xA;<pre><code>public static DeepCopy(this IPrototype p) { ... }&#xA;</code></pre>&#xA;&#xA;<p>Of course, some clarity is sacrificed. But it works!</p>&#xA;"
256013,2,9033,"2008-11-01 19:48:28",3,NULL,"<p>ThreadStaticAttribute is a favorite of mine.  Also, NonSerializableAttribute is useful.  (Can you tell I do a lot of server stuff using remoting?)</p>&#xA;"
259028,2,9033,"2008-11-03 15:42:24",4,NULL,"<p>Just learned the joys of <code>[UnmanagedFunctionPointerAttribute(CallingConvention.CDecl)]</code> from trying to interface with an unmanaged C++ function library that defined callbacks without __stdcall.</p>&#xA;"
259134,2,9033,"2008-11-03 16:16:08",5,NULL,"<p>I didn't discover - for almost a year - that Strongly Typed DataRows contain an Is[ColumnName]Null() method.</p>&#xA;&#xA;<p>For example:</p>&#xA;&#xA;<pre><code>Units.UnitsDataTable dataTable = new Units.UnitsDataTable();&#xA;&#xA;foreach (Units.UnitsRow row in dataTable.Rows)&#xA;{&#xA;    if (row.IsPrimaryKeyNull())&#xA;        //....&#xA;&#xA;    if (row.IsForeignKeyNull())&#xA;        //....&#xA;}&#xA;</code></pre>&#xA;"
263868,2,9033,"2008-11-04 23:24:03",6,NULL,"<p>Math.Max and Min to check boundaries:&#xA;I 've seen this in a lot of code:</p>&#xA;&#xA;<pre><code>if (x &lt; lowerBoundary) &#xA;{&#xA;   x = lowerBoundary;&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>I find this smaller, cleaner and more readable:</p>&#xA;&#xA;<pre><code>x = Math.Max(x, lowerBoundary);&#xA;</code></pre>&#xA;&#xA;<p>Or you can also use a ternary operator:</p>&#xA;&#xA;<pre><code>x = ( x &lt; lowerBoundary) ? lowerBoundary : x;&#xA;</code></pre>&#xA;"
263883,2,9033,"2008-11-04 23:30:41",12,NULL,"<p>Something I missed for a long time:&#xA;you can compare strings with </p>&#xA;&#xA;<pre><code>&quot;string&quot;.equals(&quot;String&quot;, StringComparison.InvariantCultureIgnoreCase)&#xA;</code></pre>&#xA;&#xA;<p>instead of doing: </p>&#xA;&#xA;<pre><code>&quot;string&quot;.ToLower() == &quot;String&quot;.ToLower();&#xA;</code></pre>&#xA;"
270430,2,9033,"2008-11-06 21:47:47",6,NULL,"<p>Mixins are a nice feature. Basically, mixins let you have concrete code for an interface instead of a class. Then, just implement the interface in a bunch of classes, and you automatically get mixin functionality. For example, to mix in deep copying into several classes, define an interface</p>&#xA;&#xA;<pre><code>internal interface IPrototype&lt;T&gt; { }&#xA;</code></pre>&#xA;&#xA;<p>Add functionality for this interface</p>&#xA;&#xA;<pre><code>internal static class Prototype&#xA;{&#xA;  public static T DeepCopy&lt;T&gt;(this IPrototype&lt;T&gt; target)&#xA;  {&#xA;    T copy;&#xA;    using (var stream = new MemoryStream())&#xA;    {&#xA;      var formatter = new BinaryFormatter();&#xA;      formatter.Serialize(stream, (T)target);&#xA;      stream.Seek(0, SeekOrigin.Begin);&#xA;      copy = (T) formatter.Deserialize(stream);&#xA;      stream.Close();&#xA;    }&#xA;    return copy;&#xA;  }&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>Then implement interface in any type to get a mixin.</p>&#xA;"
292258,2,9033,"2008-11-15 07:14:26",3,NULL,"<p>ViewState getters can be one-liners.</p>&#xA;&#xA;<p><strong>Using a default value:</strong></p>&#xA;&#xA;<pre><code>public string Caption&#xA;{&#xA;    get { return (string) (ViewState[&quot;Caption&quot;] ?? &quot;Foo&quot;); }&#xA;    set { ViewState[&quot;Caption&quot;] = value; }&#xA;}&#xA;&#xA;public int Index&#xA;{&#xA;    get { return (int) (ViewState[&quot;Index&quot;] ?? 0); }&#xA;    set { ViewState[&quot;Index&quot;] = value; }&#xA;}&#xA;</code></pre>&#xA;&#xA;<p><strong>Using null as the default:</strong></p>&#xA;&#xA;<pre><code>public string Caption&#xA;{&#xA;    get { return (string) ViewState[&quot;Caption&quot;]; }&#xA;    set { ViewState[&quot;Caption&quot;] = value; }&#xA;}&#xA;&#xA;public int? Index&#xA;{&#xA;    get { return (int?) ViewState[&quot;Index&quot;]; }&#xA;    set { ViewState[&quot;Index&quot;] = value; }&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>This works for anything backed by a dictionary.</p>&#xA;"
295174,2,9033,"2008-11-17 09:28:42",7,NULL,"<p>Regarding <code>foreach</code>: It does not use 'duck typing', as duck typing IMO refers to a runtime check. It uses <em>structural type checking</em> (as opposed to nominal) at compile time to check for the required method in the type.</p>&#xA;"
298424,2,9033,"2008-11-18 10:54:31",1,NULL,"<p><a href=&quot;http://stackoverflow.com/questions/169276/is-the-region-directive-really-useful-in-net#287438&quot;>Here is a TIP</a> of how you can use #Region directive to document your code.</p>&#xA;"
299153,2,9033,"2008-11-18 15:52:16",6,NULL,"<p>(I just used this one) Set a field null and return it without an intermediate variable:</p>&#xA;&#xA;<pre><code>try&#xA;{&#xA;    return _field;&#xA;}&#xA;finally&#xA;{&#xA;    _field = null;&#xA;}&#xA;</code></pre>&#xA;"
299173,2,9033,"2008-11-18 15:56:03",7,NULL,"<p><a href=&quot;http://msdn.microsoft.com/en-us/library/aa664591(VS.71).aspx&quot; rel=&quot;nofollow&quot;>Explicit interface member implementation</a>, wherein an interface member is implemented, but hidden unless the instance is cast to the interface type. </p>&#xA;"
299236,2,9033,"2008-11-18 16:16:26",27,NULL,"<p>On-demand field initialization in one line:</p>&#xA;&#xA;<pre><code>public StringBuilder Builder&#xA;{&#xA;    get { return _builder ?? (_builder = new StringBuilder()); }&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>I'm not sure how I feel about C# supporting assignment expressions, but hey, it's there :-)</p>&#xA;"
300100,2,9033,"2008-11-18 20:51:08",21,NULL,"<p>Several people have mentioned <em>using</em> blocks, but I think they are much more useful than people have realised.   Think of them as the poor man's AOP tool.  I have a host of simple objects that capture state in the constructor and then restore it in the <em>Dispose()</em> method.  That allows me to wrap a piece of functionality in a <em>using</em> block and be sure that the state is restored at the end.  For example:</p>&#xA;&#xA;<pre><code>using(new CursorState(this, BusyCursor));&#xA;{&#xA;    // Do stuff&#xA;}&#xA;</code></pre>&#xA;&#xA;<p><em>CursorState</em> captures the current cursor being used by form, then sets the form to use the cursor supplied.  At the end it restores the original cursor.  I do loads of things like this, for example capturing the selections and current row on a grid before refreshing and so on.</p>&#xA;"
302484,2,9033,"2008-11-19 16:28:25",15,NULL,"<p>You can use any Unicode character in C# names, for example:</p>&#xA;&#xA;<pre><code>public class MyClass&#xA;{&#xA;    public string Hårføner()&#xA;    {&#xA;        return &quot;Yes, it works!&quot;;&#xA;    }&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>You can even use Unicode escapes. This one is equivalent to the above:</p>&#xA;&#xA;<pre><code>public class MyClass&#xA;{&#xA;    public string H\u00e5rføner()&#xA;    {&#xA;        return &quot;Yes, it (still) works!&quot;;&#xA;    }&#xA;}&#xA;</code></pre>&#xA;"
302602,2,9033,"2008-11-19 16:58:38",13,NULL,"<p>What about using this:</p>&#xA;&#xA;<pre><code>#if DEBUG&#xA;            Console.Write(&quot;Debugging&quot;);&#xA;#else&#xA;            Console.Write(&quot;Final&quot;);&#xA;#endif&#xA;</code></pre>&#xA;&#xA;<p>When you have your solution compiled with DEBUG defined it will output &quot;Debugging&quot;.</p>&#xA;&#xA;<p>If your compile is set to Release it will write &quot;Final&quot;.</p>&#xA;"
312756,2,9033,"2008-11-23 17:45:14",4,NULL,"<p><strong>Framework Feature</strong></p>&#xA;&#xA;<p>I don't know but I was quite suprised about <a href=&quot;http://msdn.microsoft.com/de-de/library/system.windows.forms.visualstyles.visualstylerenderer(VS.85).aspx&quot; rel=&quot;nofollow&quot;>VisualStyleRenderer</a> and the whole <a href=&quot;http://msdn.microsoft.com/de-de/library/system.windows.forms.visualstyles(VS.85).aspx&quot; rel=&quot;nofollow&quot;>System.Windows.Forms.VisualStyles-Namespace</a>. Pretty cool!</p>&#xA;"
314065,2,9033,"2008-11-24 12:51:58",9,NULL,"<p><code>IEnumerable</code>'s <code>SelectMany</code>, which flattens a list of lists into a single list. Let's say I have a list of <code>Orders</code>, and each <code>Order</code> has a list of <code>LineItems</code> on that order.</p>&#xA;&#xA;<p>I want to know the total number of <code>LineItems</code> sold... </p>&#xA;&#xA;<pre><code>int totalItems = Orders.Select(o =&gt; o.LineItems).SelectMany(i =&gt; i).Sum();&#xA;</code></pre>&#xA;"
319182,2,9033,"2008-11-25 22:53:41",7,NULL,"<p>This isn't a C# specific type, but I just found the ISurrogateSelector and ISerializationSurrogate interfaces --</p>&#xA;&#xA;<p><a href=&quot;http://msdn.microsoft.com/en-us/library/system.runtime.serialization.isurrogateselector.aspx&quot; rel=&quot;nofollow&quot;>http://msdn.microsoft.com/en-us/library/system.runtime.serialization.isurrogateselector.aspx</a></p>&#xA;&#xA;<p><a href=&quot;http://msdn.microsoft.com/en-us/library/system.runtime.serialization.isurrogateselector.aspx&quot; rel=&quot;nofollow&quot;>http://msdn.microsoft.com/en-us/library/system.runtime.serialization.isurrogateselector.aspx</a></p>&#xA;&#xA;<p>Using these in conjunction with the BinaryFormatter allows for non-serializable objects to be serialized via the implementation of a surrogate class.  The surrogate pattern is well-understood in computer science, particularly when dealing with the problem of serialization.  I think that this implementation is just tucked away as a parameter of the constructor to BinaryFormatter, and that's too bad.</p>&#xA;&#xA;<p>Still - VERY hidden. :)</p>&#xA;"
336237,2,9033,"2008-12-03 04:45:35",11,NULL,"<p>The delegate syntax have evolved over successive versions of C#, but I still find them difficult to remember. Fortunately the <code>Action&lt;&gt;</code> and <code>Func&lt;&gt;</code> delegates are easy to remember.</p>&#xA;&#xA;<p>For example:</p>&#xA;&#xA;<ul>&#xA;<li><code>Action&lt;int&gt;</code> is a delegate method that takes a single int argument and returns void.</li>&#xA;<li><code>Func&lt;int&gt;</code>  is a delegate method that takes no arguments and returns an int.</li>&#xA;<li><code>Func&lt;int, bool&gt;</code> is a delegate method that takes a single int argument and returns a bool.</li>&#xA;</ul>&#xA;&#xA;<p>These features were introduced in version 3.5 of the .NET framework.</p>&#xA;"
355991,2,9033,"2008-12-10 13:11:49",55,NULL,"<p>Other underused operators are <code>checked</code> and <code>unchecked</code>:</p>&#xA;&#xA;<pre><code>short x = 32767;   // 32767 is the max value for short&#xA;short y = 32767;&#xA;int z1 =  checked((short)(x + y));   //will throw an OverflowException&#xA;int z2 =  unchecked((short)(x + y)); // will return -2&#xA;int z3 =  (short)(x + y);            // will return -2&#xA;</code></pre>&#xA;"
365801,2,9033,"2008-12-13 21:53:01",10,NULL,"<p>To call the base class constructor just put base() inline with the constructor.<br />&#xA;To call the base class method you can just put base.MethodName() inside the derived class method</p>&#xA;&#xA;<pre><code>class ClassA &#xA;{&#xA;  public ClassA(int a)&#xA;  {&#xA;    //Do something&#xA;  }&#xA;&#xA;  public void Method1()&#xA;  {&#xA;     //Do Something&#xA;  }&#xA;}&#xA;&#xA;class ClassB : ClassA&#xA;{&#xA;  public ClassB(int a) : base(a) // calling the base class constructor&#xA;  {&#xA;    //Do something&#xA;  }&#xA;&#xA;  public void Method2()&#xA;  {&#xA;    base.Method1();               // calling the base class method&#xA;  }&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>Of course you can call the methods of the base class by just saying <code>base.MethodName()</code></p>&#xA;"
368625,2,9033,"2008-12-15 15:03:09",7,NULL,"<p><strong>dynamic keyword in C# 4.0</strong></p>&#xA;&#xA;<p>You can use dynamic keyword, if you want your method calls to be resolved only at the runtime. </p>&#xA;&#xA;<pre><code>dynamic invoker=new DynamicInvoker();&#xA;dynamic result1=invoker.MyMethod1();&#xA;dynamic result2=invoker.MyMethod2();&#xA;</code></pre>&#xA;&#xA;<p>Here I'm implementing a dynamic invoker.</p>&#xA;&#xA;<pre><code>public class DynamicInvoker : IDynamicObject&#xA;    {&#xA;        public MetaObject GetMetaObject&#xA;              (System.Linq.Expressions.Expression parameter)&#xA;        {&#xA;            return new DynamicReaderDispatch (parameter);&#xA;        }&#xA;    }&#xA;&#xA;    public class DynamicDispatcher : MetaObject&#xA;    {&#xA;        public DynamicDispatcher (Expression parameter) &#xA;                   : base(parameter, Restrictions.Empty){ }&#xA;&#xA;        public override MetaObject Call(CallAction action, MetaObject[] args)&#xA;        {&#xA;            //You'll get MyMethod1 and MyMethod2 here (and what ever you call)&#xA;            Console.WriteLine(&quot;Logic to invoke Method '{0}'&quot;, action.Name);&#xA;            return this; //Return a meta object&#xA;        }&#xA;    }&#xA;</code></pre>&#xA;"
370561,2,9033,"2008-12-16 06:07:31",16,NULL,"<p>Ability to use LINQ Expressions to perform strongly-typed reflection:</p>&#xA;&#xA;<pre><code>static void Main(string[] args)&#xA;{&#xA;  var domain = &quot;matrix&quot;;&#xA;  Check(() =&gt; domain);&#xA;  Console.ReadLine();&#xA;}&#xA;&#xA;static void Check&lt;T&gt;(Expression&lt;Func&lt;T&gt;&gt; expr)&#xA;{&#xA;  var body = ((MemberExpression)expr.Body);&#xA;  Console.WriteLine(&quot;Name is: {0}&quot;, body.Member.Name);&#xA;  Console.WriteLine(&quot;Value is: {0}&quot;, ((FieldInfo)body.Member)&#xA;   .GetValue(((ConstantExpression)body.Expression).Value));&#xA;}&#xA;&#xA;// output:&#xA;// Name is: 'domain'&#xA;// Value is: 'matrix'&#xA;</code></pre>&#xA;&#xA;<p>More details are available at <a href=&quot;http://rabdullin.com/journal/2008/12/13/how-to-find-out-variable-or-parameter-name-in-c.html&quot; rel=&quot;nofollow&quot;>How to Find Out Variable or Parameter Name in C#?</a></p>&#xA;"
372964,2,9033,"2008-12-16 22:16:59",6,NULL,"<p>This isn't a C# specific feature but it is an addon that I find very useful.  It is called the Resource Refactoring Tool.  It allows you to right click on a literal string and extract it into a resource file.  It will search the code and find any other literal strings that match and replace it with the same resource from the Resx file.</p>&#xA;&#xA;<p><a href=&quot;http://www.codeplex.com/ResourceRefactoring&quot; rel=&quot;nofollow&quot;>http://www.codeplex.com/ResourceRefactoring</a></p>&#xA;"
388760,2,9033,"2008-12-23 12:27:08",10,NULL,"<p>TrueForAll Method of <code>List&lt;T&gt;</code> :</p>&#xA;&#xA;<pre><code>List&lt;int&gt; s = new List&lt;int&gt; { 6, 1, 2 };&#xA;&#xA;bool a = s.TrueForAll(p =&gt; p &gt; 0);&#xA;</code></pre>&#xA;"
391966,2,9033,"2008-12-24 18:10:37",38,NULL,"<h2>Closures</h2>&#xA;&#xA;<p>Since anonymous delegates were added to 2.0, we have been able to develop closures. They are rarely used by programmers but provide great benefits such as immediate code reuse. Consider this piece of code:</p>&#xA;&#xA;<pre><code>bool changed = false;&#xA;&#xA;if (model.Prop1 != prop1)&#xA;{&#xA;    changed = true;&#xA;    model.Prop1 = prop1;&#xA;}&#xA;if (model.Prop2 != prop2)&#xA;{&#xA;    changed = true;&#xA;    model.Prop2 = prop2;&#xA;}&#xA;// ... etc. &#xA;</code></pre>&#xA;&#xA;<p>Note that the if-statements above perform similar pieces of code with the exception of one line of code, i.e. setting different properties. This can be shortened with the following, where the varying line of code is entered as a parameter to an <code>Action</code> object, appropriately named <code>setAndTagChanged</code>:</p>&#xA;&#xA;<pre><code>bool changed = false;&#xA;Action&lt;Action&gt; setAndTagChanged = (action) =&gt; &#xA;{ &#xA;    changed = true; &#xA;    action(); &#xA;};&#xA;&#xA;if (model.Prop1 != prop1) setAndTagChanged(() =&gt; model.Prop1 = prop1);&#xA;if (model.Prop2 != prop2) setAndTagChanged(() =&gt; model.Prop2 = prop2);&#xA;</code></pre>&#xA;&#xA;<p>In the second case, the closure allows you to scope the <code>change</code> variable in your lambda, which is a concise way to approach this problem.</p>&#xA;&#xA;<p>An alternate way is to use another unused feature, the &quot;or equal&quot; binary assignment operator. The following code shows how:</p>&#xA;&#xA;<pre><code>private bool conditionalSet(bool condition, Action action)&#xA;{&#xA;    if (condition) action();&#xA;    return condition;&#xA;}&#xA;&#xA;// ...&#xA;&#xA;bool changed = false;&#xA;changed |= conditionalSet(model.Prop1 == prop1, () =&gt; model.Prop1 = prop1);&#xA;changed |= conditionalSet(model.Prop2 == prop2, () =&gt; model.Prop2 = prop2);&#xA;</code></pre>&#xA;"
405088,2,9033,"2009-01-01 16:10:01",19,NULL,"<p><strong>C# 3.0's LINQ query comprehensions are full-blown monadic comprehensions</strong> <em>a la</em> Haskell (in fact they were designed by one of Haskell's designers). They will work for any generic type that follows the &quot;LINQ pattern&quot; and allows you to write in a pure monadic functional style, which means that all of your variables are immutable (as if the only variables you used were <code>IDisposable</code>s and <code>IEnumerable</code>s in <em>using</em> and <em>foreach</em> statements). This is helpful for keeping variable declarations close to where they're used and making sure that all side-effects are explicitly declared, if there are any at all.</p>&#xA;&#xA;<pre><code> interface IFoo&lt;T&gt;&#xA;  { T Bar {get;}&#xA;  }&#xA;&#xA; class MyFoo&lt;T&gt; : IFoo&lt;T&gt; &#xA;  { public MyFoo(T t) {Bar = t;}&#xA;    public T Bar {get; private set;} &#xA;  }&#xA;&#xA; static class Foo &#xA;  { public static IFoo&lt;T&gt; ToFoo&lt;T&gt;(this T t) {return new MyFoo&lt;T&gt;(t);}&#xA;&#xA;    public static void Do&lt;T&gt;(this T t, Action&lt;T&gt; a) { a(t);}&#xA;&#xA;    public static IFoo&lt;U&gt; Select&lt;T,U&gt;(this IFoo&lt;T&gt; foo, Func&lt;T,U&gt; f) &#xA;     { return f(foo.Bar).ToFoo();&#xA;     }&#xA;  }&#xA;&#xA; /* ... */&#xA;&#xA; using (var file = File.OpenRead(&quot;objc.h&quot;))&#xA; { var x = from f in file.ToFoo()&#xA;           let s = new Scanner(f)&#xA;           let p = new Parser {scanner = s}&#xA;           select p.Parse();&#xA;&#xA;   x.Do(p =&gt; &#xA;    { /* drop into imperative code to handle file &#xA;         in Foo monad if necessary */      &#xA;    });&#xA;&#xA; }&#xA;</code></pre>&#xA;"
407325,2,9033,"2009-01-02 16:26:33",38,NULL,"<p>I'd say using certain system classes for extension methods is very handy, for example System.Enum, you can do something like below...</p>&#xA;&#xA;<pre><code>[Flags]&#xA;public enum ErrorTypes : int {&#xA;    None = 0,&#xA;    MissingPassword = 1,&#xA;    MissingUsername = 2,&#xA;    PasswordIncorrect = 4&#xA;}&#xA;&#xA;public static class EnumExtensions {&#xA;&#xA;    public static T Append&lt;T&gt; (this System.Enum type, T value) where T : struct&#xA;    {&#xA;        return (T)(ValueType)(((int)(ValueType) type | (int)(ValueType) value));&#xA;    }&#xA;&#xA;    public static T Remove&lt;T&gt; (this System.Enum type, T value) where T : struct&#xA;    {&#xA;        return (T)(ValueType)(((int)(ValueType)type &amp; ~(int)(ValueType)value));&#xA;    }&#xA;&#xA;    public static bool Has&lt;T&gt; (this System.Enum type, T value) where T : struct&#xA;    {&#xA;        return (((int)(ValueType)type &amp; (int)(ValueType)value) == (int)(ValueType)value);&#xA;    }&#xA;&#xA;}&#xA;&#xA;...&#xA;&#xA;//used like the following...&#xA;&#xA;ErrorTypes error = ErrorTypes.None;&#xA;error = error.Append(ErrorTypes.MissingUsername);&#xA;error = error.Append(ErrorTypes.MissingPassword);&#xA;error = error.Remove(ErrorTypes.MissingUsername);&#xA;&#xA;//then you can check using other methods&#xA;if (error.Has(ErrorTypes.MissingUsername)) {&#xA;    ...&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>This is just an example of course - the methods could use a little more work...</p>&#xA;"
475559,2,9033,"2009-01-24 05:22:17",7,NULL,"<p>You can have generic methods in a non-generic class.</p>&#xA;"
498292,2,9033,"2009-01-31 04:50:20",7,NULL,"<p>Cool trick to emulate functional &quot;wildcard&quot; arguments (like '_' in Haskell) when using lambdas:</p>&#xA;&#xA;<pre><code>(_, b, __) =&gt; b.DoStuff();  // only interested in b here&#xA;</code></pre>&#xA;"
593134,2,9033,"2009-02-27 00:45:20",6,NULL,"<p>Method groups aren't well known.</p>&#xA;&#xA;<p>Given:</p>&#xA;&#xA;<pre><code>Func&lt;Func&lt;int,int&gt;,int,int&gt; myFunc1 = (i, j) =&gt; i(j);&#xA;Func&lt;int, int&gt; myFunc2 = i =&gt; i + 2;&#xA;</code></pre>&#xA;&#xA;<p>You can do this:</p>&#xA;&#xA;<pre><code>var x = myFunc1(myFunc2, 1);&#xA;</code></pre>&#xA;&#xA;<p>instead of this:</p>&#xA;&#xA;<pre><code>var x = myFunc1(z =&gt; myFunc2(z), 1);&#xA;</code></pre>&#xA;"
618582,2,9033,"2009-03-06 11:49:20",12,NULL,"<p>You can use generics to check (compile time) if a method argument implements two interfaces:</p>&#xA;&#xA;<pre><code>interface IPropA &#xA;{&#xA;    string PropA { get; set; } &#xA;}&#xA;&#xA;interface IPropB &#xA;{&#xA;    string PropB { get; set; }&#xA;}&#xA;&#xA;class TestClass &#xA;{&#xA;    void DoSomething&lt;T&gt;(T t) where T : IPropA, IPropB &#xA;    {&#xA;        MessageBox.Show(t.PropA);&#xA;        MessageBox.Show(t.PropB);&#xA;    }&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>Same with an argument that is inherited from a base class and an interface. </p>&#xA;"
637760,2,9033,"2009-03-12 08:46:23",5,NULL,"<p>Is constructor chain already cited?</p>&#xA;&#xA;<pre><code>namespace constructorChain {&#xA;    using System;&#xA;&#xA;    public class Class1 {&#xA;        public string x;&#xA;        public string y;&#xA;&#xA;        public Class1() {&#xA;            x = &quot;class1&quot;;&#xA;            y = &quot;&quot;;&#xA;        }&#xA;&#xA;        public Class1(string y)&#xA;            : this() {&#xA;            this.y = y;&#xA;        }&#xA;    }&#xA;&#xA;    public class Class2 : Class1 {&#xA;        public Class2(int y)&#xA;            : base(y.ToString()) {&#xA;&#xA;        }&#xA;    }&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>...</p>&#xA;&#xA;<pre><code>        constructorChain.Class1 c1 = new constructorChain.Class1();&#xA;        constructorChain.Class1 c12 = new constructorChain.Class1(&quot;Hello, Constructor!&quot;);&#xA;        constructorChain.Class2 c2 = new constructorChain.Class2(10);&#xA;        Console.WriteLine(&quot;{0}:{1}&quot;, c1.x, c1.y);&#xA;        Console.WriteLine(&quot;{0}:{1}&quot;, c12.x, c12.y);&#xA;        Console.WriteLine(&quot;{0}:{1}&quot;, c2.x, c2.y);&#xA;&#xA;        Console.ReadLine();&#xA;</code></pre>&#xA;"
699973,2,9033,"2009-03-31 04:18:58",1,NULL,"<p>Not hidden, but pretty neat. I find this a more succinct substitute for a simple if-then-else that just assigns a value based on a condition.</p>&#xA;&#xA;<pre><code>string result = &#xA;              i &lt; 2 ?               //question&#xA;              &quot;less than 2&quot; :       //answer&#xA;              i &lt; 5 ?               //question&#xA;             &quot;less than 5&quot;:         //answer   &#xA;              i &lt; 10 ?              //question&#xA;              &quot;less than 10&quot;:       //answer&#xA;              &quot;something else&quot;;     //default answer&#xA;</code></pre>&#xA;"
707480,2,9033,"2009-04-01 21:50:42",7,NULL,"<p>Here's one I discovered recently which has been useful:</p>&#xA;&#xA;<pre><code>Microsoft.VisualBasic.Logging.FileLogTraceListener&#xA;</code></pre>&#xA;&#xA;<p><a href=&quot;http://msdn.microsoft.com/en-us/library/microsoft.visualbasic.logging.filelogtracelistener.aspx&quot; rel=&quot;nofollow&quot;>MSDN Link</a></p>&#xA;&#xA;<p>This is a TraceListener implementation which has a lot of features, such as automatic log file roll over, which I previously would use a custom logging framework for.  The nice thing is that it is a core part of .NET and is integrated with the Trace framework, so its easy to pick up and use immediately.</p>&#xA;&#xA;<p>This is &quot;hidden&quot; because its in the Microsoft.VisualBasic assembly... but you can use it from C# as well.</p>&#xA;"
709198,2,9033,"2009-04-02 10:35:24",9,NULL,"<p>Working with enums.</p>&#xA;&#xA;<p>Convert a string to an Enum:</p>&#xA;&#xA;<pre><code>enum MyEnum&#xA;{&#xA;    FirstValue,&#xA;    SecondValue,&#xA;    ThirdValue&#xA;}&#xA;&#xA;string enumValueString = &quot;FirstValue&quot;;&#xA;MyEnum val = (MyEnum)Enum.Parse(typeof(MyEnum), enumValueString, true)&#xA;</code></pre>&#xA;&#xA;<ul>&#xA;<li>I use this to load the value of CacheItemPriority in my ASP.NET applications from a settings table in a database so that I can control caching (along with other settings) dynamically without taking the application down.</li>&#xA;</ul>&#xA;&#xA;<p>When comparing variables of type enum, you don't have to cast to int:</p>&#xA;&#xA;<pre><code>MyEnum val = MyEnum.SecondValue;&#xA;if (val &lt; MyEnum.ThirdValue)&#xA;{&#xA;    // Do something&#xA;}&#xA;</code></pre>&#xA;"
710507,2,9033,"2009-04-02 16:30:33",9,NULL,"<p>I quite enjoy implicit generic parameters on functions. For example, if you have:</p>&#xA;&#xA;<pre><code>public void DoStuff&lt;T&gt;(T value);&#xA;</code></pre>&#xA;&#xA;<p>Instead of calling it like this:</p>&#xA;&#xA;<pre><code>DoStuff&lt;int&gt;(5);&#xA;</code></pre>&#xA;&#xA;<p>You can:</p>&#xA;&#xA;<pre><code>DoStuff(5);&#xA;</code></pre>&#xA;&#xA;<p>And it'll work out the generic type from the parameter's type. </p>&#xA;&#xA;<ul>&#xA;<li>This doesn't work if you're calling the method through reflection.</li>&#xA;<li>I remember having some weird problems on Mono.</li>&#xA;</ul>&#xA;"
749846,2,9033,"2009-04-15 00:23:53",94,NULL,"<p>Many people don't realize that they can compare strings using: OrdinalIgnoreCase instead of having to do someString.ToUpper().  This removes the additional string allocation overhead.</p>&#xA;&#xA;<pre><code>if( myString.ToUpper() == theirString.ToUpper() ){ ... }&#xA;</code></pre>&#xA;&#xA;<p>becomes</p>&#xA;&#xA;<pre><code>if( myString.Equals( theirString, StringComparison.OrdinalIgnoreCase ) ){ ... }&#xA;</code></pre>&#xA;"
759323,2,9033,"2009-04-17 07:09:13",18,NULL,"<p>My favorite attribute: <a href=&quot;http://msdn.microsoft.com/en-us/library/system.runtime.compilerservices.internalsvisibletoattribute.aspx&quot; rel=&quot;nofollow&quot;>InternalsVisibleTo</a></p>&#xA;&#xA;<p>At assembly level you can declare that another assembly can see your internals. For testing purposes this is absolutely wonderful. </p>&#xA;&#xA;<p>Stick this in your AssemblyInfo.cs or equivalent and your test assembly get full access to all the internal stuff that requires testing.</p>&#xA;&#xA;<pre><code>[assembly: InternalsVisibleTo(&quot;MyLibrary.Test, PublicKey=0024...5c042cb&quot;)]&#xA;</code></pre>&#xA;&#xA;<p>As you can see, the test assembly must have <a href=&quot;http://msdn.microsoft.com/en-us/library/xc31ft41.aspx&quot; rel=&quot;nofollow&quot;>a strong name</a> to gain the trust of the assembly under test.</p>&#xA;&#xA;<p>Available in .Net Framework 2.0+, Compact Framework 2.0+ and XNA Framework 1.0+.</p>&#xA;"
781561,2,9033,"2009-04-23 12:57:49",5,NULL,"<blockquote>&#xA;  <p><strong>FIXED</strong> / Power of Pointers in C# - This topic is too big, but I will just outline simple things.</p>&#xA;</blockquote>&#xA;&#xA;<p>In C we had facility of loading structure like...</p>&#xA;&#xA;<pre><code>struct cType{&#xA;   char type[4];&#xA;   int  size;&#xA;   char name[50];&#xA;   char email[100];&#xA;}&#xA;&#xA;cType myType;&#xA;fread(file, &amp;mType, sizeof(mType));&#xA;</code></pre>&#xA;&#xA;<p>We can use fixed keyword in &quot;unsafe&quot; method to read byte array aligned structure.</p>&#xA;&#xA;<pre><code>[Layout(LayoutKind.Sequential, Pack=1)]&#xA;public unsafe class CType{&#xA;    public fixed byte type[4];&#xA;    public int size;&#xA;    public fixed byte name[50];&#xA;    public fixed byte email[100];&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>Method 1 (Reading from regular stream in to byte buffer and mapping byte array to individual bytes of struct)</p>&#xA;&#xA;<pre><code>CType mType = new CType();&#xA;byte[] buffer = new byte[Marshal.SizeOf(CType)];&#xA;stream.Read(buffer,0,buffer.Length);&#xA;// you can map your buffer back to your struct...&#xA;fixed(CType* sp = &amp;mType)&#xA;{&#xA;    byte* bsp = (byte*) sp;&#xA;    fixed(byte* bp = &amp;buffer)&#xA;    {&#xA;         for(int i=0;i&lt;buffer.Length;i++)&#xA;         {&#xA;             (*bsp) = (*bp);&#xA;             bsp++;bp++;&#xA;         }&#xA;    }&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>Method 2, you can map Win32 User32.dll's ReadFile to directly read bytes...</p>&#xA;&#xA;<pre><code>CType mType = new CType();&#xA;fixed(CType* p = &amp;mType)&#xA;{&#xA;    User32.ReadFile(fileHandle, (byte*) p, Marshal.SizeOf(mType),0);&#xA;}&#xA;</code></pre>&#xA;"
791096,2,9033,"2009-04-26 16:11:10",7,NULL,"<p>The usage of the default keyword in generic code to return the default value for a type.</p>&#xA;&#xA;<pre><code>public class GenericList&lt;T&gt;&#xA;{&#xA;    private class Node&#xA;    {&#xA;        //...&#xA;&#xA;        public Node Next;&#xA;        public T Data;&#xA;    }&#xA;&#xA;    private Node head;&#xA;&#xA;    //...&#xA;&#xA;    public T GetNext()&#xA;    {&#xA;        T temp = default(T);&#xA;&#xA;        Node current = head;&#xA;        if (current != null)&#xA;        {&#xA;            temp = current.Data;&#xA;            current = current.Next;&#xA;        }&#xA;        return temp;&#xA;    }&#xA;}&#xA;</code></pre>&#xA;&#xA;<p><a href=&quot;http://stackoverflow.com/questions/367378/returning-a-default-value-c&quot;>Another example here</a></p>&#xA;"
794343,2,9033,"2009-04-27 16:46:52",4,NULL,"<p>The InternalsVisibleToAttribute specifies that types that are ordinarily visible only within the current assembly are visible to another assembly. <a href=&quot;http://msdn.microsoft.com/en-us/library/system.runtime.compilerservices.internalsvisibletoattribute.aspx&quot; rel=&quot;nofollow&quot; title=&quot;InternalsVisibleToAttribute class&quot;>Article on msdn</a></p>&#xA;"
821718,2,9033,"2009-05-04 19:57:09",8,NULL,"<p>Instead of doing something cheesy like this:</p>&#xA;&#xA;<pre><code>Console.WriteLine(&quot;{0} item(s) found.&quot;, count);&#xA;</code></pre>&#xA;&#xA;<p>I use the following inline trick:</p>&#xA;&#xA;<pre><code>Console.WriteLine(&quot;{0} item{1} found.&quot;, count, count==1 ? &quot;&quot; : &quot;s&quot;);&#xA;</code></pre>&#xA;&#xA;<p>This will display &quot;item&quot; when there's one item or &quot;items&quot; when there are more (or less) than 1. Not much effort for a little bit of professionalism.</p>&#xA;"
840445,2,9033,"2009-05-08 15:35:04",10,NULL,"<p>One thing not many people know about are some of the C#-introduced preprocessor directives.  You can use <code>#error This is an error.</code> to generate a compiler error and <code>#warning This is a warning.</code></p>&#xA;&#xA;<p>I usually use these when I'm developing with a top-down approach as a &quot;todo&quot; list.  I'll <code>#error Implement this function</code>, or <code>#warning Eventually implement this corner case</code> as a reminder.</p>&#xA;"
840998,2,9033,"2009-05-08 17:43:22",2,NULL,"<p>In dealing with interop between C++ and C#, many people don't realize that C++/CLI is a great option.</p>&#xA;&#xA;<p>Say you have a C++ DLL and a C# DLL which depends on the C++ DLL.  Often, the easiest technique is to compile some (or all) modules of the C++ DLL with the /clr switch. To have the C# call the C++ DLL is to write managed C++ wrapper classes in the C++ DLL.  The C++/CLI classes can call the native C++ code much more seamlessly than C#, because the C++ compiler will automatically generate P/invokes for you, has a library specifically for interop, plus language features for interop like <a href=&quot;http://msdn.microsoft.com/en-us/library/1dz8byfh%28VS.80%29.aspx&quot; rel=&quot;nofollow&quot;>pin_ptr</a>.  And it allows managed and native code to coexist within the same binary.</p>&#xA;&#xA;<p>On the C# side, you just call into the DLL as you would any other .NET binary.</p>&#xA;"
841140,2,9033,"2009-05-08 18:21:06",6,NULL,"<p>I am so so late to this question, but I wanted to add a few that I don't think have been covered. These aren't C#-specific, but I think they're worthy of mention for any C# developer.</p>&#xA;&#xA;<p><a href=&quot;http://msdn.microsoft.com/en-us/library/system.componentmodel.ambientvalueattribute.aspx&quot; rel=&quot;nofollow&quot;><h3>AmbientValueAttribute</h3></a>&#xA;This is similar to <code>DefaultValueAttribute</code>, but instead of providing the value that a property defaults to, it provides the value that a property uses to decide whether to request its value from somewhere else. For example, for many controls in WinForms, their <code>ForeColor</code> and <code>BackColor</code> properties have an <code>AmbientValue</code> of <code>Color.Empty</code> so that they know to get their colors from their parent control.</p>&#xA;&#xA;<p><a href=&quot;http://msdn.microsoft.com/en-us/library/system.io.isolatedstorage.isolatedstoragesettings%28VS.95%29.aspx&quot; rel=&quot;nofollow&quot;><h3>IsolatedStorageSettings</h3></a>&#xA;This is a Silverlight one. The framework handily includes this sealed class for providing settings persistence at both the per-application and per-site level.</p>&#xA;&#xA;<h3>Flag interaction with extension methods</h3>&#xA;&#xA;<p>Using extension methods, flag enumeration use can be a lot more readable.</p>&#xA;&#xA;<pre><code>    public static bool Contains(&#xA;          this MyEnumType enumValue,&#xA;          MyEnumType flagValue)&#xA;    {&#xA;        return ((enumValue &amp; flagValue) == flagValue);&#xA;    }&#xA;&#xA;    public static bool ContainsAny(&#xA;          this MyEnumType enumValue,&#xA;          MyEnumType flagValue)&#xA;    {&#xA;        return ((enumValue &amp; flagValue) &gt; 0);&#xA;    }&#xA;</code></pre>&#xA;&#xA;<p>This makes checks for flag values nice and easy to read and write. Of course, it would be nicer if we could use generics and enforce T to be an enum, but that isn't allowed. Perhaps <code>dynamic</code> will make this easier.</p>&#xA;"
862323,2,9033,"2009-05-14 09:05:38",7,NULL,"<p>The built-in (2.0) MethodInvoker delegate is useful when you want to Invoke/BeginInvoke inline code.  This avoids needing to create an actual delegate and separate method.</p>&#xA;&#xA;<pre><code>    void FileMessageEvent(object sender, MessageEventArgs e)&#xA;    {&#xA;&#xA;        if (this.InvokeRequired == true)&#xA;        {&#xA;            this.BeginInvoke((MethodInvoker)delegate { &#xA;                     lblMessage.Text=e.Message; &#xA;                     Application.DoEvents(); &#xA;                 }&#xA;            ); &#xA;&#xA;        }&#xA;    }&#xA;</code></pre>&#xA;&#xA;<p>Resolves the error:  &quot;Cannot convert anonymous method to type 'System.Delegate' because it is not a delegate type&quot;.</p>&#xA;"
874167,2,9033,"2009-05-17 08:41:55",6,NULL,"<p>I find it incredible what type of trouble the compiler goes through to sugar code the use of <strong>Outer Variables</strong>:</p>&#xA;&#xA;<pre><code>string output = &quot;helo world!&quot;;&#xA;Action action = () =&gt; Console.WriteLine(output);&#xA;output = &quot;hello!&quot;;&#xA;action();&#xA;</code></pre>&#xA;&#xA;<p>This actually prints <code>hello!</code>. Why? Because the compiler creates a nested class for the delegate, with public fields for all <em>outer variables</em> and inserts setting-code before every single call to the delegate :) Here is above code 'reflectored':</p>&#xA;&#xA;<pre><code>Action action;&#xA;&lt;&gt;c__DisplayClass1 CS$&lt;&gt;8__locals2;&#xA;CS$&lt;&gt;8__locals2 = new &lt;&gt;c__DisplayClass1();&#xA;CS$&lt;&gt;8__locals2.output = &quot;helo world!&quot;;&#xA;action = new Action(CS$&lt;&gt;8__locals2.&lt;Main&gt;b__0);&#xA;CS$&lt;&gt;8__locals2.output = &quot;hello!&quot;;&#xA;action();&#xA;</code></pre>&#xA;&#xA;<p>Pretty cool I think.</p>&#xA;"
882100,2,9033,"2009-05-19 11:00:34",6,NULL,"<p>I couldn't figure out what use some of the functions in the <code>Convert</code> class had (such as Convert.ToDouble(int), Convert.ToInt(double)) until I combined them with <code>Array.ConvertAll</code>:</p>&#xA;&#xA;<pre><code>int[] someArrayYouHaveAsInt;&#xA;double[] copyOfArrayAsDouble = Array.ConvertAll&lt;int, double&gt;(&#xA;                                someArrayYouHaveAsInt,&#xA;                                new Converter&lt;int,double&gt;(Convert.ToDouble));&#xA;</code></pre>&#xA;&#xA;<p>Which avoids the resource allocation issues that arise from defining an inline delegate/closure (and slightly more readable):</p>&#xA;&#xA;<pre><code>int[] someArrayYouHaveAsInt;&#xA;double[] copyOfArrayAsDouble = Array.ConvertAll&lt;int, double&gt;(&#xA;                                someArrayYouHaveAsInt,&#xA;                                new Converter&lt;int,double&gt;(&#xA;                                  delegate(int i) { return (double)i; }&#xA;                                ));&#xA;</code></pre>&#xA;"
883586,2,9033,"2009-05-19 15:52:52",7,NULL,"<p>Array initialization without specifying the array element type:</p>&#xA;&#xA;<pre><code>var pets = new[] { &quot;Cat&quot;, &quot;Dog&quot;, &quot;Bird&quot; };&#xA;</code></pre>&#xA;"
899593,2,9033,"2009-05-22 19:28:27",3,NULL,"<p>Well... <strong><em>Don't use it</em></strong>, but a lot of people don't know C# supports the evil goto:)</p>&#xA;&#xA;<pre><code>static void Example()&#xA;{&#xA;    int i = 0;&#xA;top:&#xA;    Console.WriteLine(i.ToString());&#xA;    if (i == 0)&#xA;    {&#xA;        i++;&#xA;        goto top;&#xA;    }&#xA;}&#xA;</code></pre>&#xA;"
912833,2,9033,"2009-05-26 21:23:25",6,NULL,"<p>Having just learned the meaning of invariance, covariance and contravariance, I discovered the <a href=&quot;http://msdn.microsoft.com/en-us/library/dd469484%28VS.100%29.aspx&quot; rel=&quot;nofollow&quot;>in</a> and <a href=&quot;http://msdn.microsoft.com/en-us/library/dd469487%28VS.100%29.aspx&quot; rel=&quot;nofollow&quot;>out</a> generic modifiers that will be included in .NET 4.0. They seem obscure enough that most programmers would not know about them.</p>&#xA;&#xA;<p>There's an <a href=&quot;http://visualstudiomagazine.com/articles/2009/05/01/generic-covariance-and-contravariance-in-c-40.aspx&quot; rel=&quot;nofollow&quot;>article</a> at Visual Studio Magazine which discusses these keywords and how they will be used.</p>&#xA;"
938302,2,9033,"2009-06-02 07:20:56",20,NULL,"<p><a href=&quot;http://msdn.microsoft.com/en-us/library/b3787ac0.aspx&quot; rel=&quot;nofollow&quot;>Atrribute Targets</a></p>&#xA;&#xA;<p>Everyone has seen one. Basically, when you see this:</p>&#xA;&#xA;<pre><code>[assembly: ComVisible(false)]&#xA;</code></pre>&#xA;&#xA;<p>The &quot;assembly:&quot; portion of that attribute is the target. In this case, the attribute is applied to the assembly, but there are others:</p>&#xA;&#xA;<pre><code>[return: SomeAttr]&#xA;int Method3() { return 0; }&#xA;</code></pre>&#xA;&#xA;<p>In this sample the attribute is applied to the return value. </p>&#xA;"
945247,2,9033,"2009-06-03 14:53:50",1,NULL,"<p>If you want to prevent the garbage collector from running the finalizer of an object, just use <code>GC.SuppressFinalize(object);</code>. In a similar vein, <code>GC.KeepAlive(object);</code> will prevent the garbage collector from collecting that object by referencing it. Not very commonly used, at least in my experience, but nice to know just in  case.</p>&#xA;"
945300,2,9033,"2009-06-03 15:03:23",7,NULL,"<p>Properties to display when viewing components Properties in design view:</p>&#xA;&#xA;<pre><code>private double _Zoom = 1;&#xA;&#xA;[Category(&quot;View&quot;)]&#xA;[Description(&quot;The Current Zoom Level&quot;)]&#xA;public double Zoom&#xA;{&#xA;get { return _Zoom;}&#xA;set { _Zoom = value;}&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>Makes things a lot easier for other users of your component libraries.</p>&#xA;"
945458,2,9033,"2009-06-03 15:37:50",2,NULL,"<p>Relection is so powerfull when used carefully. I used it in an e-mail templating system. The template manager would be passed an object and the html templates would have embedded fields that referred to Properties that could be retrieved off the passed object using reflection. Worked out very nicely.</p>&#xA;"
949309,2,9033,"2009-06-04 08:41:49",3,NULL,"<p>Definitely the Func&lt;> types when used with statement lambdas in .NET 3.5. These allow customizable functions, and can be a great aid in offering user customizable objects without subclassing them or resorting to some limited system like keeping track of a variable that lists what button or key the user wants to monitor. Also, they can be called just like regular methods and can be assigned like variables. The only downside that I can think of is that you're limited to 5 arguments! Although by that point you might want to consider a different solution...&#xA;Edit: Providing some examples.</p>&#xA;&#xA;<pre><code>...&#xA;public Func&lt;InputHelper, float&gt; _horizontalCameraMovement = (InputHelper input) =&gt; &#xA;{&#xA;    return (input.LeftStickPosition.X * _moveRate) * _zoom;&#xA;}&#xA;public Func&lt;InputHelper, float&gt; _verticalCameraMovement = (InputHelper input) =&gt; &#xA;{&#xA;    return (-input.LeftStickPosition.Y * _moveRate) * _zoom;&#xA;}&#xA;...&#xA;public void Update(InputHelper input)&#xA;{&#xA;    ...&#xA;    position += new Vector2(_horizontalCameraMovement(input), _verticalCameraMovement(input));&#xA;    ...&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>In this example, you can write a function that does arbitrary calculation and returns a float that will determine the amount that the camera moves by. Not the best code but it gets the point across.</p>&#xA;&#xA;<pre><code>private int foo;&#xA;public int FooProperty {&#xA;    get&#xA;    {&#xA;        if (_onFooGotten() == true)&#xA;            return _foo;&#xA;    }&#xA;    set&#xA;    {&#xA;        if (onFooSet() == true)&#xA;            _foo = value;&#xA;    }&#xA;}&#xA;...&#xA;public Func&lt;bool&gt; _onFooGotten = () =&gt; &#xA;{&#xA;    //do whatever...&#xA;    return true;&#xA;}&#xA;public Func&lt;bool&gt; _onFooSet = () =&gt;&#xA;{&#xA;    //do whatever...&#xA;    return true;&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>This isn't the best example (as I haven't really explored this use yet) but it shows an example of using a lambda function for a quick event raiser without the hassle of delegates.&#xA;Edit: thought of another one. Nullables! The closest thing C# has to optional parameters.</p>&#xA;"
957443,2,9033,"2009-06-05 18:43:55",13,NULL,"<p>FlagsAttribute, a small but <a href=&quot;http://msdn.microsoft.com/en-us/library/system.flagsattribute.aspx&quot; rel=&quot;nofollow&quot;>nice feature</a> when using enum to make a bitmasks:</p>&#xA;&#xA;<pre><code>[Flags]&#xA;public enum ConfigOptions&#xA;{&#xA;    None    = 0,&#xA;    A       = 1 &lt;&lt; 0,&#xA;    B       = 1 &lt;&lt; 1,&#xA;    Both    = A | B&#xA;}&#xA;&#xA;Console.WriteLine( ConfigOptions.A.ToString() );&#xA;Console.WriteLine( ConfigOptions.Both.ToString() );&#xA;// Will print:&#xA;// A&#xA;// A, B&#xA;</code></pre>&#xA;"
958103,2,9033,"2009-06-05 20:56:00",4,NULL,"<p>If you have the search textbox in your Visual Studio toolbar, you can type &quot;>of Program.cs&quot; to open the file Program.cs</p>&#xA;"
961401,2,9033,"2009-06-07 07:26:09",6,NULL,"<p>The data type can be defined for an enumeration:</p>&#xA;&#xA;<pre><code>enum EnumName : [byte, char, int16, int32, int64, uint16, uint32, uint64]&#xA;{&#xA;    A = 1,&#xA;    B = 2&#xA;}&#xA;</code></pre>&#xA;"
993118,2,9033,"2009-06-14 16:11:17",4,NULL,"<p>A few from me - make of them what you will.</p>&#xA;&#xA;<p>The attribute:</p>&#xA;&#xA;<pre><code>[assembly::InternalsVisibleTo(&quot;SomeAssembly&quot;)]&#xA;</code></pre>&#xA;&#xA;<p>Allows you to expose out the internal methods/properties or data from your assembly to another assembly called 'SomeAssembly'. All protected/private stuff remains hidden.</p>&#xA;&#xA;<p><hr /></p>&#xA;&#xA;<p>Static constructors ( otherwise called 'Type Constructor' )</p>&#xA;&#xA;<pre><code>public MyClass&#xA;{&#xA;  public static MyClass()&#xA;  {&#xA;     // type init goes here&#xA;  }&#xA;  ......&#xA;}&#xA;</code></pre>&#xA;&#xA;<p><hr /></p>&#xA;&#xA;<p>The keyword <code>internal</code>. So useful in so many ways.</p>&#xA;"
993271,2,9033,"2009-06-14 17:31:47",7,NULL,"<h2>Advanced Debugging</h2>&#xA;&#xA;<h3>Display</h3>&#xA;&#xA;<p>The already mentioned attributes DebuggerDisplay and DebuggerBrowsable control the visibility of elements and the textual value displayed. Simply overriding ToString() will cause the debugger to use the output of that method. </p>&#xA;&#xA;<p>If you want more complex output you can use/create a <a href=&quot;http://msdn.microsoft.com/en-us/library/zayyhzts.aspx&quot; rel=&quot;nofollow&quot;>Debugger Visualizer</a>, several examples &#xA;are available <a href=&quot;http://www.dotnetpowered.com/DebuggerVisualizers.aspx&quot; rel=&quot;nofollow&quot;>here</a>.</p>&#xA;&#xA;<h3>Son Of Strike</h3>&#xA;&#xA;<p>Microsoft provide a debugger extension known as <a href=&quot;http://msdn.microsoft.com/en-us/library/bb190764%28vs.80%29.aspx&quot; rel=&quot;nofollow&quot;>SOS</a>. This is an extremely powerful (though often confusing) extension which is an excellent way to diagnose 'leaks', more accurately unwanted references to objects no longer required.</p>&#xA;&#xA;<h3>Symbol Server for framework source</h3>&#xA;&#xA;<p>Following these <a href=&quot;http://blogs.msdn.com/sburke/archive/2008/01/16/configuring-visual-studio-to-debug-net-framework-source-code.aspx&quot; rel=&quot;nofollow&quot;>instructions</a> will allow you to step through the source of some parts of the framework.</p>&#xA;&#xA;<h3>Changes in 2010</h3>&#xA;&#xA;<p>Several enhancements and new features exist in Visual Studio 2010:  </p>&#xA;&#xA;<ul>&#xA;<li><a href=&quot;http://www.danielmoth.com/Blog/2009/05/parallel-tasks-new-visual-studio-2010.html&quot; rel=&quot;nofollow&quot;>Debugging Parallel Tasks</a>  </li>&#xA;<li><a href=&quot;http://www.danielmoth.com/Blog/2009/05/parallel-stacks-another-new-vs2010.html&quot; rel=&quot;nofollow&quot;>Parallel Stacks</a> allow viewing multiple threads call stacks at the same time.  </li>&#xA;<li><a href=&quot;http://channel9.msdn.com/posts/VisualStudio/Historical-Debugger-and-Test-Impact-Analysis-in-Visual-Studio-Team-System-2010/&quot; rel=&quot;nofollow&quot;>Historical Debugging</a> lets you see events and non-local variables back in time (so long as you enable the collection in advance). Potentially a significant change to how you debug things.</li>&#xA;</ul>&#xA;"
1002816,2,9033,"2009-06-16 17:14:07",55,NULL,"<p><strong>Use &quot;throw;&quot; instead of &quot;throw ex;&quot; to preserve stack trace</strong></p>&#xA;&#xA;<p>If re-throwing an exception without adding additional information, use &quot;throw&quot; instead of &quot;throw ex&quot;. An empty &quot;throw&quot; statement in a catch block will emit specific IL that re-throws the exception while preserving the original stack trace. &quot;throw ex&quot; loses the stack trace to the original source of the exception.</p>&#xA;"
1003232,2,9033,"2009-06-16 18:38:22",4,NULL,"<p>Ability to create instance of the type based on the generic parameter like this</p>&#xA;&#xA;<p>new T();</p>&#xA;"
1010679,2,9033,"2009-06-18 03:44:34",6,NULL,"<p>The Yield keyword is often overlooked when it has a lot of power. I blogged about it awhile ago and discussed benefits (differed processing) and happens under the hood of yield to help give a stronger understanding.</p>&#xA;&#xA;<p><a href=&quot;http://jxs.me/2010/05/14/using-yield-in-c/&quot; rel=&quot;nofollow&quot;>Using Yield in C#</a></p>&#xA;"
1016037,2,9033,"2009-06-19 01:59:32",7,NULL,"<p>You can create delegates from extension methods as if they were regular methods, currying the <code>this</code> parameter.  For example, </p>&#xA;&#xA;<pre><code>static class FunnyExtension {&#xA;	public static string Double(this string str) { return str + str; }&#xA;	public static int Double(this int num) { return num + num; }&#xA;}&#xA;&#xA;&#xA;Func&lt;string&gt; aaMaker = &quot;a&quot;.Double;&#xA;Func&lt;string, string&gt; doubler = FunnyExtension.Double;&#xA;&#xA;Console.WriteLine(aaMaker());		//Prints &quot;aa&quot;&#xA;Console.WriteLine(doubler(&quot;b&quot;));	//Prints &quot;bb&quot;&#xA;</code></pre>&#xA;&#xA;<p>Note that this won't work on extension methods that extend &#xA;a value type; see <a href=&quot;http://stackoverflow.com/questions/1016033/extension-methods-defined-on-value-types-cannot-be-used-to-create-delegates-why&quot;>this question</a>.</p>&#xA;"
1017882,2,9033,"2009-06-19 13:08:29",10,NULL,"<p>Not sure if this one got mentioned yet but the ThreadStatic attribute is a realy useful one. This makes a static field static just for the current thread.</p>&#xA;&#xA;<pre><code>[ThreadStatic]&#xA;private static int _ThreadStaticInteger;&#xA;</code></pre>&#xA;&#xA;<p>You should not include an initializer because it only get executed once for the entire application, you're better off making the field nullable and checking if the value is null before you use it.</p>&#xA;&#xA;<p>And one more thing for ASP.NET applications threads are reused so if you modify the value it could end up being used for another page request.</p>&#xA;&#xA;<p>Still I have found this useful on several occasions. For example in creating a custom transaction class that:</p>&#xA;&#xA;<pre><code>using (DbTransaction tran = new DbTransaction())&#xA;{&#xA;    DoQuery(&quot;...&quot;);&#xA;    DoQuery(&quot;...&quot;);    &#xA;}&#xA;</code></pre>&#xA;&#xA;<p>The DbTransaction constructor sets a ThreadStatic field to its self and resets it to null in the dispose method. DoQuery checks the static field and if != null uses the current transaction if not it defaults to something else. We avoid having to pass the transaction to each method plus it makes it easy to wrap other methods that were not originaly meant to be used with transaction inside a transaction ...</p>&#xA;&#xA;<p>Just one use :)</p>&#xA;"
1026941,2,9033,"2009-06-22 12:29:49",4,NULL,"<p>Marketing events as non-serializable:</p>&#xA;&#xA;<pre><code>[field:NonSerializable]&#xA;public event SomeDelegate SomeEvent;&#xA;</code></pre>&#xA;"
1049977,2,9033,"2009-06-26 16:13:07",15,NULL,"<p>You can add and remove delegates with less typing.</p>&#xA;&#xA;<p>Usual way:</p>&#xA;&#xA;<pre><code>handler += new EventHandler(func);&#xA;</code></pre>&#xA;&#xA;<p>Less typing way:</p>&#xA;&#xA;<pre><code>handler += func;&#xA;</code></pre>&#xA;"
1062556,2,9033,"2009-06-30 08:55:58",10,NULL,"<p>The <code>Or</code> assignment operator is quite nice. You can write this:</p>&#xA;&#xA;<pre><code>x |= y&#xA;</code></pre>&#xA;&#xA;<p>instead of this:</p>&#xA;&#xA;<pre><code>x = x | y&#xA;</code></pre>&#xA;&#xA;<p>This is often practical if you have to a variable or property (<code>x</code> in the example) that starts out as <code>false</code> but you want to change it to the value of some other boolean variable/property <em>only when</em> that other value is <code>true</code>.</p>&#xA;"
1071983,2,9033,"2009-07-02 00:34:17",11,NULL,"<p>Extension methods can be called on <code>null</code>; this will not cause a <code>NullReferenceException</code> to be thrown.</p>&#xA;&#xA;<p>Example application: you can define an alternative for <code>ToString()</code> called <code>ToStringOrEmpty()</code> which will return the empty string when called on <code>null</code>.</p>&#xA;"
1114418,2,9033,"2009-07-11 19:01:10",32,NULL,"<p>I've read through all seven pages, and I'm missing these:</p>&#xA;&#xA;<p><strong>String.Join</strong></p>&#xA;&#xA;<p>I've seen a lot of for-loops to convert a list of items to a string with separators. It's always a pain to make sure you doin't start with a separator and don't end with a separator. A built-in method makes this easier:</p>&#xA;&#xA;<pre><code>String.Join(&quot;,&quot;, new String[] { &quot;a&quot;, &quot;b&quot;, &quot;c&quot;});&#xA;</code></pre>&#xA;&#xA;<p><strong>TODO in comment</strong></p>&#xA;&#xA;<p>Not really a C# feature, more of a Visual Studio feature. When you start your comment with TODO, it's added to your Visual Studio Task List (View -> Task List. Comments)</p>&#xA;&#xA;<pre><code>// TODO: Implement this!&#xA;throw new NotImplementedException();&#xA;</code></pre>&#xA;&#xA;<p><strong>Extension methods meets Generics</strong></p>&#xA;&#xA;<p>You can combine extension methods with Generics, when you think of the tip earlier in this topic, you can add extensions to specific interfaces</p>&#xA;&#xA;<pre><code>public static void Process&lt;T&gt;(this T item) where T:ITest,ITest2 {}&#xA;</code></pre>&#xA;&#xA;<p><strong>Enumerable.Range</strong></p>&#xA;&#xA;<p>Just want a list of integers?</p>&#xA;&#xA;<pre><code>Enumerable.Range(0, 15)&#xA;</code></pre>&#xA;&#xA;<p>I'll try to think of some more...</p>&#xA;"
1118859,2,9033,"2009-07-13 11:05:00",6,NULL,"<p>Pointers in C#. </p>&#xA;&#xA;<p>They can be used to do in-place string manipulation. This is an unsafe feature so the unsafe keyword is used to mark the region of unsafe code. Also note how the fixed keyword is used to indicate that the memory pointed to is pinned and cannot be moved by the GC. This is essential a pointers point to memory addresses and the GC can move the memory to different address otherwise resulting in an invalid pointer.</p>&#xA;&#xA;<pre><code>	string str = &quot;some string&quot;;&#xA;	Console.WriteLine(str);&#xA;	unsafe&#xA;	{&#xA;		fixed(char *s = str)&#xA;		{&#xA;			char *c = s;&#xA;			while(*c != '\0')&#xA;			{&#xA;				*c = Char.ToUpper(*c++);					&#xA;			}&#xA;		}&#xA;	}&#xA;	Console.WriteLine(str);&#xA;</code></pre>&#xA;&#xA;<p>I wouldn't ever do it but just for the sake of this question to demonstrate this feature.</p>&#xA;"
1135505,2,9033,"2009-07-16 05:16:29",5,NULL,"<p>I like to use the <em>using</em> directive to rename some classes for easy reading like this:</p>&#xA;&#xA;<pre><code>// defines a descriptive name for a complexed data type&#xA;using MyDomainClassList = System.Collections.Generic.List&lt;&#xA;  MyProjectNameSpace.MyDomainClass&gt;;&#xA;&#xA;....&#xA;&#xA;&#xA;MyDomainClassList myList = new MyDomainClassList();&#xA;/* instead of &#xA;List&lt;MyDomainClass&gt; myList = new List&lt;MyDomainClass&gt;();&#xA;*/&#xA;</code></pre>&#xA;&#xA;<p>This is also very handy for code maintenance. If you need to change the class name, there is only one place you need to change. Another example:</p>&#xA;&#xA;<pre><code>using FloatValue  = float; // you only need to change it once to decimal, double...&#xA;&#xA;....&#xA;FloatValue val1;&#xA;...&#xA;</code></pre>&#xA;"
1143637,2,9033,"2009-07-17 14:29:23",1,NULL,"<p><a href=&quot;http://code.msdn.microsoft.com/ExceptionFilterInjct&quot; rel=&quot;nofollow&quot;>Exception Filters</a>. So &quot;hidden&quot; you <em>can't</em> even use them (at least from C#) without a post-compilation patch ;) </p>&#xA;"
1161934,2,9033,"2009-07-21 21:46:12",4,NULL,"<p>How about <a href=&quot;http://msdn.microsoft.com/en-us/library/bb397951.aspx&quot; rel=&quot;nofollow&quot;>Expression Trees</a>? They are the heart of LINQ and allow for defered execution:</p>&#xA;&#xA;<p>Taken from <a href=&quot;http://www.davidhayden.com/blog/dave/archive/2006/12/18/ExpressionTrees.aspx&quot; rel=&quot;nofollow&quot;>David Hayden's blog</a>:</p>&#xA;&#xA;<p>In C# 3.0, you can define a delegate as follows using a lambda expression:</p>&#xA;&#xA;<pre><code>Func&lt;int,int&gt; f = x =&gt; x + 1;&#xA;</code></pre>&#xA;&#xA;<p>This delegate is compiled into executable code in your application and can be called as such:</p>&#xA;&#xA;<pre><code>var three = f(2); // 2 + 1&#xA;</code></pre>&#xA;&#xA;<p>The code works as you would expect. Nothing fancy here.</p>&#xA;&#xA;<p><strong>Expression Trees</strong></p>&#xA;&#xA;<p>When you define the delegate as an Expression Tree by using System.Query.Expression:</p>&#xA;&#xA;<pre><code>Expression&lt;Func&lt;int,int&gt;&gt; expression = x =&gt; x + 1;&#xA;</code></pre>&#xA;&#xA;<p>The delegate is no longer compiled into executable code, but compiled as data that can be converted and compiled into the original delegate.</p>&#xA;&#xA;<p>To actually use the delegate represented as an Expression Tree in your application, you would have to compile and invoke it in your application:</p>&#xA;&#xA;<pre><code>var originalDelegate = expression.Compile();&#xA;&#xA;var three = originalDelegate.Invoke(2);&#xA;</code></pre>&#xA;"
1162648,2,9033,"2009-07-22 01:42:46",7,NULL,"<pre><code>[field: NonSerialized]&#xA;public event EventHandler Event;&#xA;</code></pre>&#xA;&#xA;<p>This way, the event listener is not serialized.</p>&#xA;&#xA;<p>Just [NonSerialized] does not work, because NonSerializedAttribute can only be applied to fields.</p>&#xA;"
1173935,2,9033,"2009-07-23 19:26:08",3,NULL,"<p>If you are trying to create a comma delimited string from a list of items:</p>&#xA;&#xA;<pre><code>string[] itemList = { &quot;Example 1&quot;, &quot;Example 2&quot;, &quot;Example 3&quot; };&#xA;CommaDelimitedStringCollection commaStr = new CommaDelimitedStringCollection();&#xA;commaStr.AddRange(itemList);&#xA;//outputs Example 1,Example 2,Example 3&#xA;</code></pre>&#xA;&#xA;<p>Look <a href=&quot;http://blog.crowe.co.nz/archive/2007/08/25/c---How-to-create-a-comma-seperated-string-from.aspx&quot; rel=&quot;nofollow&quot;>here</a> for another example.</p>&#xA;"
1185988,2,9033,"2009-07-27 00:43:32",5,NULL,"<p>Zero parameter Lambdas</p>&#xA;&#xA;<pre><code>()=&gt;Console.ReadLine()&#xA;</code></pre>&#xA;"
1204390,2,9033,"2009-07-30 03:57:06",5,NULL,"<p>I didn't see this:</p>&#xA;&#xA;<pre><code>for (;;);&#xA;</code></pre>&#xA;&#xA;<p>The same as</p>&#xA;&#xA;<pre><code>while (true) ;&#xA;</code></pre>&#xA;"
1204441,2,9033,"2009-07-30 04:23:58",13,NULL,"<p>I'm becoming a big fan of extension methods since they can add much wanted functionality to existing code or code you can't edit. One of my favorites I add in to everything I do now is for string.IsNullOrEmpty()</p>&#xA;&#xA;<pre><code>public static class Strings&#xA;{&#xA;    public static bool IsNullOrEmpty(this string value)&#xA;    {&#xA;        return string.IsNullOrEmpty(value);&#xA;    }&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>This lets you shorten your code a bit like this</p>&#xA;&#xA;<pre><code>var input = Console.ReadLine();&#xA;if (input.IsNullOrEmpty())&#xA;{&#xA;    Console.WriteLine(&quot;try again&quot;);&#xA;}&#xA;</code></pre>&#xA;"
1231428,2,9033,"2009-08-05 05:57:55",66,NULL,"<p><a href=&quot;http://msdn.microsoft.com/en-us/library/0c899ak8.aspx#SectionSeparator&quot;>Conditional string.Format</a>:</p>&#xA;&#xA;<p>Applies different formatting to a number depending on whether the number is positive, negative, or zero.</p>&#xA;&#xA;<pre><code>string s = string.Format(&quot;{0:positive;negative;zero}&quot;, i);&#xA;</code></pre>&#xA;&#xA;<p>e.g.</p>&#xA;&#xA;<pre><code>string format = &quot;000;-#;(0)&quot;;&#xA;&#xA;string pos = 1.ToString(format);     // 001&#xA;string neg = (-1).ToString(format);  // -1&#xA;string zer = 0.ToString(format);     // (0)&#xA;</code></pre>&#xA;"
1234502,2,9033,"2009-08-05 17:01:19",4,NULL,"<p>A lot of this is explained already, in <a href=&quot;http://www.ecma-international.org/publications/standards/Ecma-334.htm&quot; rel=&quot;nofollow&quot;>the standard</a>. It's a good read for any beginner as well as expert, it's a lot to read, but it's the official standard, and it's filled with juicy details.</p>&#xA;&#xA;<p>Once you fully understand C#, it's time to take this further to understand the fundamentals of the <a href=&quot;http://www.ecma-international.org/publications/standards/Ecma-335.htm&quot; rel=&quot;nofollow&quot;>Common Language Infrastructure</a>. The architecture and underpinnings of C#.</p>&#xA;&#xA;<p>I've met a variety of programmers that don't know the difference between an object and a ValueType except the adherent limitations thereof. </p>&#xA;&#xA;<p>Familiarize yourself with these two documents and you'll never become that person.</p>&#xA;"
1234603,2,9033,"2009-08-05 17:20:36",1,NULL,"<p>When you need to (a)synchronously communicate between objects about occurance of an event there is special purpose interface called <strong>ISynchronizeInvoke</strong>.</p>&#xA;&#xA;<p>Quoting MSDN article (<a href=&quot;http://msdn.microsoft.com/en-us/library/system.componentmodel.isynchronizeinvoke.aspx&quot; rel=&quot;nofollow&quot;>link</a>): </p>&#xA;&#xA;<blockquote>&#xA;  <p>Objects that implement this interface can receive notification that an event has occurred, and they can respond to queries about the event. In this way, clients can ensure that one request has been processed before they submit a subsequent request that depends on completion of the first.</p>&#xA;</blockquote>&#xA;&#xA;<p>Here is a generic wrapper:</p>&#xA;&#xA;<pre><code>protected void OnEvent&lt;T&gt;(EventHandler&lt;T&gt; eventHandler, T args) where T : EventArgs&#xA;{&#xA;    if (eventHandler == null) return;&#xA;&#xA;    foreach (EventHandler&lt;T&gt; singleEvent in eventHandler.GetInvocationList())&#xA;    {&#xA;        if (singleEvent.Target != null &amp;&amp; singleEvent.Target is ISynchronizeInvoke)&#xA;        {&#xA;            var target = (ISynchronizeInvoke)singleEvent.Target;&#xA;&#xA;            if (target.InvokeRequired) {&#xA;                target.BeginInvoke(singleEvent, new object[] { this, args });&#xA;                continue;&#xA;            }&#xA;        }&#xA;        singleEvent(this, args);&#xA;    }&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>and here is an example usage:</p>&#xA;&#xA;<pre><code>public event EventHandler&lt;ProgressEventArgs&gt; ProgressChanged;&#xA;&#xA;private void OnProgressChanged(int processed, int total)&#xA;{&#xA;    OnEvent(ProgressChanged, new ProgressEventArgs(processed, total));&#xA;}&#xA;</code></pre>&#xA;"
1242225,2,9033,"2009-08-07 00:13:41",8,NULL,"<p>Expression to initialize a Dictionary in C# 3.5:</p>&#xA;&#xA;<p><code>new Dictionary&lt;string, Int64&gt;() {{&quot;Testing&quot;, 123}, {&quot;Test&quot;, 125}};</code></p>&#xA;"
1243242,2,9033,"2009-08-07 06:37:19",7,NULL,"<p>I don't think someone has mentioned that appending ? after a value type name will make it nullable.</p>&#xA;&#xA;<p>You can do: </p>&#xA;&#xA;<pre><code>DateTime? date = null;&#xA;</code></pre>&#xA;&#xA;<p>DateTime is a structure.</p>&#xA;"
1243265,2,9033,"2009-08-07 06:44:20",26,NULL,"<p>Programmers moving from C/C++ may miss this one:</p>&#xA;&#xA;<p>In C#, % (modulus operator) works on floats!</p>&#xA;"
1247323,2,9033,"2009-08-07 22:39:33",4,NULL,"<p>Generics and the <a href=&quot;http://en.wikipedia.org/wiki/Curiously%5Frecurring%5Ftemplate%5Fpattern&quot; rel=&quot;nofollow&quot;>Curiously-Recurring Template Pattern</a> really help with some static method/property declarations.</p>&#xA;&#xA;<p>Suppose you are building a class hierarchy:</p>&#xA;&#xA;<pre><code>class Base&#xA;{&#xA;}&#xA;&#xA;class Foo: Base&#xA;{&#xA;}&#xA;&#xA;class Bar: Base&#xA;{&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>Now, you want to declare static methods on your types that should take parameters (or return values) of the same type or static properties of the same type. For example, you want:</p>&#xA;&#xA;<pre><code>class Base&#xA;{&#xA;    public static Base Get()&#xA;    {&#xA;        // Return a suitable Base.&#xA;    }&#xA;}&#xA;&#xA;class Foo: Base&#xA;{&#xA;    public static Foo Get()&#xA;    {&#xA;        // Return a suitable Foo.&#xA;    }&#xA;}&#xA;&#xA;class Bar: Base&#xA;{&#xA;    public static Bar Get()&#xA;    {&#xA;        // Return a suitable Bar.&#xA;    }&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>If these static methods basically all do the same thing, then you have lots of duplicated code on your hands. One solution would be to drop type safety on the return values and to always return type <code>Base</code>. However, if you want type safety, then the solution is to declare the <code>Base</code> as:</p>&#xA;&#xA;<pre><code>class Base&lt;T&gt; where T: Base&lt;T&gt;&#xA;{&#xA;    public static T Get&lt;T&gt;()&#xA;    {&#xA;        // Return a suitable T.&#xA;    }&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>and you <code>Foo</code> and <code>Bar</code> as:</p>&#xA;&#xA;<pre><code>class Foo: Base&lt;Foo&gt;&#xA;{&#xA;}&#xA;&#xA;class Bar: Base&lt;Bar&gt;&#xA;{&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>This way, they will automatically get their <strong>copies</strong> of the static methods.</p>&#xA;&#xA;<p>This also works wonders to encapsulate the <strong>Singleton</strong> pattern in a base class (I know the code below is not thread-safe, it just to demonstrate a point):</p>&#xA;&#xA;<pre><code>public class Singleton&lt;T&gt; where T: Singleton&lt;T&gt;, new()&#xA;{&#xA;  public static T Instance { get; private set; }&#xA;&#xA;  static Singleton&lt;T&gt;()&#xA;  {&#xA;    Instance = new T();&#xA;  }&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>I realize that this forces you to have a public parameterless constructor on your singleton subclass but there is no way to avoid that at compile time without a <code>where T: protected new()</code> construct; however one can use <a href=&quot;http://www.codeproject.com/KB/architecture/GenericSingletonPattern.aspx&quot; rel=&quot;nofollow&quot;>reflection</a> to invoke the protected/private parameterless constructor of the sub-class at runtime to achieve that.</p>&#xA;"
1277525,2,9033,"2009-08-14 12:13:19",7,NULL,"<p><a href=&quot;http://blogs.msdn.com/ericlippert/archive/2009/08/13/four-switch-oddities.aspx&quot; rel=&quot;nofollow&quot;>Four switch oddities</a> by Eric Lippert</p>&#xA;"
1280160,2,9033,"2009-08-14 20:53:32",3,NULL,"<p>Keeps DataGridView from showing the property:</p>&#xA;&#xA;<pre><code>[System.ComponentModel.Browsable(false)]&#xA;public String LastActionID{get; private set;}&#xA;</code></pre>&#xA;&#xA;<p>Lets you set a friendly display for components (like a DataGrid or DataGridView):</p>&#xA;&#xA;<pre><code>[System.ComponentModel.DisplayName(&quot;Last Action&quot;)]&#xA;public String LastAction{get; private set;}&#xA;</code></pre>&#xA;&#xA;<p>For your backing variables, if you don't want anything accessing them directly this makes it tougher:</p>&#xA;&#xA;<pre><code>[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]&#xA;	private DataController p_dataSources;&#xA;</code></pre>&#xA;"
1318297,2,9033,"2009-08-23 11:07:06",5,NULL,"<p>One that I just learned recently is that you can still call <a href=&quot;http://stackoverflow.com/questions/1242883/is-there-a-better-way-to-write-this-line-of-c-code-in-c3-0&quot;>methods on a nullable value</a>....</p>&#xA;&#xA;<p>It turns out what when you have a nullable value:</p>&#xA;&#xA;<pre><code>decimal? MyValue = null;&#xA;</code></pre>&#xA;&#xA;<p>where you might think you would have to write:</p>&#xA;&#xA;<pre><code>MyValue == null ? null : MyValue .ToString()&#xA;</code></pre>&#xA;&#xA;<p>you can instead write:</p>&#xA;&#xA;<pre><code>MyValue.ToString()&#xA;</code></pre>&#xA;&#xA;<p>I've been aware that I could call MyValue.HasValue and MyValue.Value...but it didn't fully click that I could call ToString().</p>&#xA;"
1371317,2,9033,"2009-09-03 03:36:52",5,NULL,"<p>This will not compile:</p>&#xA;&#xA;<pre><code>namespace ns&#xA;{&#xA;    class Class1&#xA;    {&#xA;        Nullable&lt;int&gt; a;&#xA;    }&#xA;}&#xA;</code></pre>&#xA;&#xA;<p><em>The type or namespace name 'Nullable' could not be found (are you missing a using directive or an assembly reference?)</em> &lt;-- missing '<code>using System;</code>'</p>&#xA;&#xA;<p>But</p>&#xA;&#xA;<pre><code>namespace ns&#xA;{&#xA;    class Class1&#xA;    {&#xA;        int? a;&#xA;    }&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>will compile! (.NET 2.0).</p>&#xA;"
1399045,2,9033,"2009-09-09 11:14:47",10,NULL,"<p>Nested classes can access private members of a outer class.</p>&#xA;&#xA;<pre><code>public class Outer&#xA;{&#xA;    private int Value { get; set; }&#xA;&#xA;    public class Inner&#xA;    {&#xA;        protected void ModifyOuterMember(Outer outer, int value)&#xA;        {&#xA;            outer.Value = value;&#xA;        }&#xA;    }&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>And now together with the above feature you can also inherit from nested classes as if they were top level classes as shown below.</p>&#xA;&#xA;<pre><code>public class Cheater : Outer.Inner&#xA;{&#xA;    protected void MakeValue5(Outer outer)&#xA;    {&#xA;        ModifyOuterMember(outer, 5);&#xA;    }&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>These features allow for some interesting possibilities as far as providing access to particular members via somewhat hidden classes.</p>&#xA;"
1399130,2,9033,"2009-09-09 11:31:54",28,NULL,"<p><strong>JavaScript-like anonymous inline-functions</strong></p>&#xA;&#xA;<p>Return a String:</p>&#xA;&#xA;<pre><code>var s = new Func&lt;String&gt;(() =&gt;&#xA;{&#xA;    return &quot;Hello World!&quot;;&#xA;})();&#xA;</code></pre>&#xA;&#xA;<p>Return a more complex Object:</p>&#xA;&#xA;<pre><code>var d = new Func&lt;Dictionary&lt;Int32, String&gt;&gt;(() =&gt;&#xA;{&#xA;    return new Dictionary&lt;Int32, String&gt;&#xA;    {&#xA;        { 0, &quot;Foo&quot; },&#xA;        { 1, &quot;Bar&quot; },&#xA;        { 2, &quot;...&quot; }&#xA;    };&#xA;})();&#xA;</code></pre>&#xA;&#xA;<p>A real-world use-case:</p>&#xA;&#xA;<pre><code>var tr = new TableRow();&#xA;&#xA;tr.Cells.AddRange&#xA;(&#xA;    new[]&#xA;    {&#xA;        new TableCell { Text = &quot;&quot; },&#xA;        new TableCell { Text = &quot;&quot; },&#xA;        new TableCell { Text = &quot;&quot; },&#xA;&#xA;        new TableCell&#xA;        {&#xA;            Text = new Func&lt;String&gt;(() =&gt;&#xA;            {&#xA;                return @&quot;Result of a chunk of logic, without having to define&#xA;                         the logic outside of the TableCell constructor&quot;;&#xA;            })()&#xA;        },&#xA;&#xA;        new TableCell { Text = &quot;&quot; },&#xA;        new TableCell { Text = &quot;&quot; }&#xA;    }&#xA;);&#xA;</code></pre>&#xA;&#xA;<p><em>Note: You cannot re-use variable names inside the inline-function's scope.</em></p>&#xA;&#xA;<p><br /></p>&#xA;&#xA;<p><strong>Alternative syntax</strong></p>&#xA;&#xA;<pre><code>// The one-liner&#xA;Func&lt;Int32, Int32, String&gt; Add = (a, b) =&gt; Convert.ToString(a + b);&#xA;&#xA;// Multiple lines&#xA;Func&lt;Int32, Int32, String&gt; Add = (a, b) =&gt;&#xA;{&#xA;    var i = a + b;&#xA;&#xA;    return i.ToString();&#xA;};&#xA;&#xA;// Without parameters&#xA;Func&lt;String&gt; Foo = () =&gt; &quot;&quot;;&#xA;&#xA;// Without parameters, multiple lines&#xA;Func&lt;String&gt; Foo = () =&gt;&#xA;{&#xA;    return &quot;&quot;;&#xA;};&#xA;</code></pre>&#xA;&#xA;<p>Shorten a string and add horizontal ellipsis...</p>&#xA;&#xA;<pre><code>Func&lt;String, String&gt; Shorten = s =&gt; s.Length &gt; 100 ? s.Substring(0, 100) + &quot;&amp;hellip;&quot; : s;&#xA;</code></pre>&#xA;"
1404712,2,9033,"2009-09-10 11:21:29",3,NULL,"<p>At first - <a href=&quot;http://msdn.microsoft.com/en-us/library/d8eyd8zc.aspx&quot; rel=&quot;nofollow&quot;>DebuggerTypeProxy</a>.</p>&#xA;&#xA;<pre><code>[DebuggerTypeProxy(typeof(HashtableDebugView))]&#xA;class MyHashtable : Hashtable&#xA;{&#xA;    private const string TestString = &#xA;        &quot;This should not appear in the debug window.&quot;;&#xA;&#xA;    internal class HashtableDebugView&#xA;    {&#xA;        private Hashtable hashtable;&#xA;        public const string TestStringProxy = &#xA;            &quot;This should appear in the debug window.&quot;;&#xA;&#xA;        // The constructor for the type proxy class must have a &#xA;        // constructor that takes the target type as a parameter.&#xA;        public HashtableDebugView(Hashtable hashtable)&#xA;        {&#xA;            this.hashtable = hashtable;&#xA;        }&#xA;    }&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>At second:</p>&#xA;&#xA;<p><a href=&quot;http://msdn.microsoft.com/en-us/library/ms171819.aspx&quot; rel=&quot;nofollow&quot;>ICustomTypeDescriptor</a></p>&#xA;"
1408887,2,9033,"2009-09-11 03:52:09",5,NULL,"<p>I apologize if this one has been mentioned, but I use this a lot.  </p>&#xA;&#xA;<p>An add-in for Visual Studio was developed by Alex Papadimoulis.  It's used for pasting regular text as string, string builder, comment or region.</p>&#xA;&#xA;<p><a href=&quot;http://weblogs.asp.net/alex%5Fpapadimoulis/archive/2004/05/25/Smart-Paster-1.1-Add-In---StringBuilder-and-Better-C%5F2300%5F-Handling.aspx&quot; rel=&quot;nofollow&quot;>http://weblogs.asp.net/alex%5Fpapadimoulis/archive/2004/05/25/Smart-Paster-1.1-Add-In---StringBuilder-and-Better-C%5F2300%5F-Handling.aspx</a></p>&#xA;&#xA;<p>In this plugin (I also don't know if this has been mentioned) I noticed that strings are pasted with the string literal prefix:</p>&#xA;&#xA;<pre><code>@&#xA;</code></pre>&#xA;&#xA;<p>I knew about these, but I didn't know about using a double quote within a literal to escape the quote.  </p>&#xA;&#xA;<p>For example</p>&#xA;&#xA;<pre><code>string s = &quot;A line of text&quot; + Environment.NewLine + &quot;Another with a \&quot;quote\&quot;!!&quot;;&#xA;</code></pre>&#xA;&#xA;<p>can be expressed as</p>&#xA;&#xA;<pre><code>string s = @&quot;A line of text &#xA;Another with a &quot;&quot;quote&quot;&quot;!!&quot;;&#xA;</code></pre>&#xA;"
1415909,2,9033,"2009-09-12 19:26:19",14,NULL,"<p>When defining custom attributes you can use them with [MyAttAttribute] or with [MyAtt].&#xA;When classes exist for both writings, then a compilation error occures.</p>&#xA;&#xA;<p>The @ special character can be used to distinguish between them:</p>&#xA;&#xA;<pre><code>[AttributeUsage(AttributeTargets.All)]&#xA;public class X: Attribute&#xA;{}&#xA;&#xA;[AttributeUsage(AttributeTargets.All)]&#xA;public class XAttribute: Attribute&#xA;{}&#xA;&#xA;[X]      // Error: ambiguity&#xA;class Class1 {}&#xA;&#xA;[XAttribute]   // Refers to XAttribute&#xA;class Class2 {}&#xA;&#xA;[@X]      // Refers to X&#xA;class Class3 {}&#xA;&#xA;[@XAttribute]   // Refers to XAttribute&#xA;class Class4 {}&#xA;</code></pre>&#xA;"
1415952,2,9033,"2009-09-12 19:47:41",31,NULL,"<p>You can &quot;use&quot; multiple objects in one using statement.</p>&#xA;&#xA;<pre><code>using (Font f1= new Font(&quot;Arial&quot;, 10.0f), f2 = new Font(&quot;Arial&quot;, 10.0f))&#xA;{&#xA;    // Use f1 and f2.&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>Note that there is already an answer stating that you can do this:</p>&#xA;&#xA;<pre><code>using (Font f1= new Font(&quot;Arial&quot;, 10.0f))&#xA;using (Font f2 = new Font(&quot;Arial&quot;, 10.0f))&#xA;{    }&#xA;</code></pre>&#xA;&#xA;<p>Which is different from mine.</p>&#xA;"
1416182,2,9033,"2009-09-12 21:26:07",2,NULL,"<p>Not sure Microsoft would like this question, especially with so many responses. &#xA;I'm sure I once heard a Microsoft head say:</p>&#xA;&#xA;<blockquote>&#xA;  <p>a hidden feature is a wasted feature</p>&#xA;</blockquote>&#xA;&#xA;<p>... or something to that effect.</p>&#xA;"
1435045,2,9033,"2009-09-16 19:38:58",17,NULL,"<p>You can limit the life and thus scope of variables by using <code>{ }</code> brackets.</p>&#xA;&#xA;<pre><code>{&#xA;    string test2 = &quot;3&quot;;&#xA;    Console.Write(test2);&#xA;}&#xA;&#xA;Console.Write(test2); //compile error&#xA;</code></pre>&#xA;&#xA;<p><code>test2</code> only lives within the brackets.</p>&#xA;"
1464831,2,9033,"2009-09-23 09:00:29",20,NULL,"<p>Apologies for posting so late, I am new to Stack Overflow so missed the earlier opportunity.</p>&#xA;&#xA;<p>I find that <code>EventHandler&lt;T&gt;</code> is a great feature of the framework that is underutilised. </p>&#xA;&#xA;<p>Most C# developers I come across still define a custom event handler delegate when they are defining custom events, which is simply not necessary anymore.</p>&#xA;&#xA;<p>Instead of:</p>&#xA;&#xA;<pre><code>public delegate void MyCustomEventHandler(object sender, MyCustomEventArgs e);&#xA;&#xA;public class MyCustomEventClass &#xA;{&#xA;    public event MyCustomEventHandler MyCustomEvent;&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>you can go:</p>&#xA;&#xA;<pre><code>public class MyCustomEventClass &#xA;{&#xA;    public event EventHandler&lt;MyCustomEventArgs&gt; MyCustomEvent;&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>which is a lot more concise, plus you don't get into the dilemma of whether to put the delegate in the .cs file for the class that contains the event, or the EventArgs derived class.</p>&#xA;"
1484202,2,9033,"2009-09-27 19:04:44",6,NULL,"<p>Open generics are another handy feature especially when using <a href=&quot;http://en.wikipedia.org/wiki/Inversion%5Fof%5Fcontrol&quot; rel=&quot;nofollow&quot;>Inversion of Control</a>:</p>&#xA;&#xA;<pre><code>container.RegisterType(typeof(IRepository&lt;&gt;), typeof(NHibernateRepository&lt;&gt;));&#xA;</code></pre>&#xA;"
1593594,2,9033,"2009-10-20 10:04:34",2,NULL,"<p>Use of @ before a string that contains escape char.&#xA;Basically when a physical path is used to assign in a string variable everybody uses '\' where escape character is present in a string.</p>&#xA;&#xA;<p>e.g.&#xA;string strPath=&quot;D:\websites\web1\images\&quot;;</p>&#xA;&#xA;<p>But escape characters can be ignored using @ before the string value. </p>&#xA;&#xA;<p>e.g. &#xA;string strPath=@&quot;D:\websites\web1\images\&quot;;</p>&#xA;"
1625860,2,9033,"2009-10-26 16:45:32",4,NULL,"<p>I love abusing the fact that static templated classes don't share their static members.</p>&#xA;&#xA;<p>Here's a threadsafe (at creation time) and cheap substitute to any <code>Dictionary&lt;Type,...&gt;</code> when the <code>Type</code> instance is known at compile-time.</p>&#xA;&#xA;<pre><code>public static class MyCachedData&lt;T&gt;{&#xA;    static readonly CachedData Value;&#xA;    static MyCachedData(){&#xA;       Value=// Heavy computation, such as baking IL code or doing lots of reflection on a type&#xA;    }&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>Cheers,&#xA;Florian</p>&#xA;"
1647219,2,9033,"2009-10-29 23:44:23",3,NULL,"<p>The following one is not hidden, but it's quite implicit. I don't know whether samples like the following one have been published here, and I can't see are there any benefits (probably there are none), but I'll try to show a &quot;weird&quot; code. The following sample simulates <code>for</code> statement via functors in C# (delegates / anonymous delegates [lambdas]) and closures. Other flow statements like <code>if</code>, <code>if/else</code>, <code>while</code> and <code>do/whle</code>  are simulated as well, but I'm not sure for <code>switch</code> (perhaps, I'm too lazy :)). I've compacted the sample source code a little to make it more clear.</p>&#xA;&#xA;<pre><code>private static readonly Action EmptyAction = () =&gt; { };&#xA;private static readonly Func&lt;bool&gt; EmptyCondition = () =&gt; { return true; };&#xA;&#xA;private sealed class BreakStatementException : Exception { }&#xA;private sealed class ContinueStatementException : Exception { }&#xA;private static void Break() { throw new BreakStatementException(); }&#xA;private static void Continue() { throw new ContinueStatementException(); }&#xA;&#xA;private static void For(Action init, Func&lt;bool&gt; condition, Action postBlock, Action statement) {&#xA;    init = init ?? EmptyAction;&#xA;    condition = condition ?? EmptyCondition;&#xA;    postBlock = postBlock ?? EmptyAction;&#xA;    statement = statement ?? EmptyAction;&#xA;    for ( init(); condition(); postBlock() ) {&#xA;        try {&#xA;            statement();&#xA;        } catch ( BreakStatementException ) {&#xA;            break;&#xA;        } catch ( ContinueStatementException ) {&#xA;            continue;&#xA;        }&#xA;    }&#xA;}&#xA;&#xA;private static void Main() {&#xA;    int i = 0; // avoiding error &quot;Use of unassigned local variable 'i'&quot; if not using `for` init block&#xA;    For(() =&gt; i = 0, () =&gt; i &lt; 10, () =&gt; i++,&#xA;        () =&gt; {&#xA;            if ( i == 5 )&#xA;                Continue();&#xA;            Console.WriteLine(i);&#xA;        }&#xA;    );&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>If I'm not wrong, this approach is pretty relative to the functional programming practice. Am I right?</p>&#xA;"
1677556,2,9033,"2009-11-05 00:10:43",8,NULL,"<p>C# allows you to add property setter methods to concrete types that implement readonly interface properties even though the interface declaration itself has no property setter. For example:</p>&#xA;&#xA;<pre><code>public interface IReadOnlyFoo&#xA;{&#xA;   object SomeReadOnlyProperty { get; }&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>The concrete class looks like this:</p>&#xA;&#xA;<pre><code>internal class Foo : IReadOnlyFoo&#xA;{&#xA;   public object SomeReadOnlyProperty { get; internal set; }&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>What's interesting about this is that the Foo class is immutable if you cast it to the IReadOnlyFoo interface:</p>&#xA;&#xA;<pre><code>// Create a Foo instance&#xA;Foo foo = new Foo();&#xA;&#xA;// This statement is legal&#xA;foo.SomeReadOnlyProperty = 12345;&#xA;&#xA;// Make Foo read only&#xA;IReadOnlyFoo readOnlyFoo = foo;&#xA;&#xA;// This statement won't compile&#xA;readOnlyFoo.SomeReadOnlyProperty = 54321;&#xA;</code></pre>&#xA;"
1699477,2,9033,"2009-11-09 06:58:36",48,NULL,"<p>I just wanted to copy that code without the comments. So, the trick is to simply press the Alt button, and then highlight the rectangle you like.(e. g. below).</p>&#xA;&#xA;<pre><code>protected void GridView1_RowCommand(object sender, GridViewCommandEventArgs e)&#xA;    {&#xA;        //if (e.CommandName == &quot;sel&quot;)&#xA;        //{&#xA;        //    lblCat.Text = e.CommandArgument.ToString();&#xA;        //}&#xA;    }&#xA;</code></pre>&#xA;&#xA;<p>In the above code if I want to select :</p>&#xA;&#xA;<pre><code>e.CommandName == &quot;sel&quot;&#xA;&#xA;lblCat.Text = e.Comman&#xA;</code></pre>&#xA;&#xA;<p>Then I press ALt key and select the rectangle and no need to uncomment the lines.</p>&#xA;&#xA;<p>Check this out.</p>&#xA;"
1707290,2,9033,"2009-11-10 11:28:19",39,NULL,"<p>C# + CLR:</p>&#xA;&#xA;<ol>&#xA;<li><p><code>Thread.MemoryBarrier</code>: Most people wouldn't have used it and there is some inaccurate information on MSDN. But if you know <a href=&quot;http://www.albahari.com/threading/part4.aspx&quot;>intricacies</a> then you can do nifty lock-free synchronization.</p></li>&#xA;<li><p><code>volatile, Thread.VolatileRead, Thread.VolatileWrite</code>: There are very very few people who gets the use of these and even fewer who understands all the risks they avoid and introduce :).</p></li>&#xA;<li><p><code>ThreadStatic</code> variables: There was only one situation in past few years I've found that ThreadStatic variables were absolutely god send and indispensable. When you want to do something for entire call chain, for example, they are very useful.</p></li>&#xA;<li><p><code>fixed</code> keyword: It's a hidden weapon when you want to make access to elements of large array almost as fast as C++ (by default C# enforces bound checks that slows down things).</p></li>&#xA;<li><p><code>default(typeName)</code> keyword can be used outside of generic class as well. It's useful to create empty copy of struct.</p></li>&#xA;<li><p>One of the handy feature I use is <code>DataRow[columnName].ToString()</code> always returns non-null value. If value in database was NULL, you get empty string.</p></li>&#xA;<li><p>Use Debugger object to break automatically when you want developer's attention even if s/he hasn't enabled automatic break on exception:</p></li>&#xA;</ol>&#xA;&#xA;<pre><code>&#xA;#if DEBUG  &#xA;    if (Debugger.IsAttached)  &#xA;        Debugger.Break();  &#xA;#endif&#xA;</code></pre>&#xA;&#xA;<ol>&#xA;<li>You can alias complicated ugly looking generic types so you don't have to copy paste them again and again. Also you can make changes to that type in one place. For example, </li>&#xA;</ol>&#xA;&#xA;<pre><code>&#xA;    using ComplicatedDictionary = Dictionary&lt;int, Dictionary&lt;string, object>>;&#xA;    ComplicatedDictionary myDictionary = new ComplicatedDictionary();&#xA;</code></pre>&#xA;"
1724852,2,9033,"2009-11-12 19:43:25",17,NULL,"<p>Need to return an empty IEnumerable?</p>&#xA;&#xA;<pre><code>public IEnumerable&lt;T&gt; GetEnumerator(){&#xA;  yield break;&#xA;}&#xA;</code></pre>&#xA;"
1770965,2,9033,"2009-11-20 14:57:06",13,NULL,"<h1>Type-inference for factory methods</h1>&#xA;&#xA;<p><em>I don't know if this has been posted already (I scanned the first post, couldn't find it).</em></p>&#xA;&#xA;<p>This is best shown with an example, assuming you have this class (to simulate a tuple), in in an attempt to demonstrate all the language features that make this possible I will go through it step by step.</p>&#xA;&#xA;<pre><code>public class Tuple&lt;V1, V2&gt; : Tuple&#xA;{&#xA;    public readonly V1 v1;&#xA;    public readonly V2 v2;&#xA;&#xA;    public Tuple(V1 v1, V2 v2)&#xA;    {&#xA;      this.v1 = v1;&#xA;      this.v2 = v2;&#xA;    }&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>Everyone knows how to create an instance of it, such as:</p>&#xA;&#xA;<pre><code>Tuple&lt;int, string&gt; tup = new Tuple&lt;int, string&gt;(1, &quot;Hello, World!&quot;);&#xA;</code></pre>&#xA;&#xA;<p>Not exactly rocket science, now we can of course change the type declaration of the variable to <em>var</em>, like this:</p>&#xA;&#xA;<pre><code>var tup = new Tuple&lt;int, string&gt;(1, &quot;Hello, World!&quot;);&#xA;</code></pre>&#xA;&#xA;<p>Still well known, to digress a bit here's a static method with type parameters, which everyone should be familiar with:</p>&#xA;&#xA;<pre><code>public static void Create&lt;T1, T2&gt;()&#xA;{&#xA;    // stuff&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>Calling it is, again common knowledge, done like this:</p>&#xA;&#xA;<pre><code>Create&lt;float, double&gt;();&#xA;</code></pre>&#xA;&#xA;<p>What most people don't know is that if the arguments to the generic method contains all the types it requires they can be inferred, for example:</p>&#xA;&#xA;<pre><code>public static void Create&lt;T1, T2&gt;(T1 a, T2 b)&#xA;{&#xA;    // stuff&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>These two calls are identical:</p>&#xA;&#xA;<pre><code>Create&lt;float, string&gt;(1.0f, &quot;test&quot;);&#xA;Create(1.0f, &quot;test&quot;);&#xA;</code></pre>&#xA;&#xA;<p>Since T1 and T2 is inferred from the arguments you passed. Combining this knowledge with the var keyword, we can by adding a second static class with a static method, such as:</p>&#xA;&#xA;<pre><code>public abstract class Tuple&#xA;{&#xA;    public static Tuple&lt;V1, V2&gt; Create&lt;V1, V2&gt;(V1 v1, V2 v2)&#xA;    {&#xA;        return new Tuple&lt;V1, V2&gt;(v1, v2);&#xA;    }&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>Achieve this effect:</p>&#xA;&#xA;<pre><code>var tup = Tuple.Create(1, &quot;Hello, World!&quot;);&#xA;</code></pre>&#xA;&#xA;<p>This means that the types of the: variable &quot;tup&quot;, the type-parameters of &quot;Create&quot; and the return value of &quot;Create&quot; are all inferred from the types you <strong>pass as arguments to Create</strong></p>&#xA;&#xA;<p>The full code looks something like this:</p>&#xA;&#xA;<pre><code>public abstract class Tuple&#xA;{&#xA;    public static Tuple&lt;V1, V2&gt; Create&lt;V1, V2&gt;(V1 v1, V2 v2)&#xA;    {&#xA;        return new Tuple&lt;V1, V2&gt;(v1, v2);&#xA;    }&#xA;}&#xA;&#xA;public class Tuple&lt;V1, V2&gt; : Tuple&#xA;{&#xA;    public readonly V1 v1;&#xA;    public readonly V2 v2;&#xA;&#xA;    public Tuple(V1 v1, V2 v2)&#xA;    {&#xA;        this.v1 = v1;&#xA;        this.v2 = v2;&#xA;    }&#xA;}&#xA;&#xA;// Example usage:&#xA;var tup = Tuple.Create(1, &quot;test&quot;);&#xA;</code></pre>&#xA;&#xA;<p>Which gives you fully type inferred factory methods everywhere!</p>&#xA;"
1774916,2,9033,"2009-11-21 08:12:56",5,NULL,"<p>I like the <a href=&quot;http://msdn.microsoft.com/en-us/library/system.componentmodel.editorbrowsableattribute.aspx&quot; rel=&quot;nofollow&quot;>EditorBrowsableAttribute</a>. It lets you control whether a method/property is displayed or not in Intellisense. You can set the values to Always, Advanced, or Never.</p>&#xA;&#xA;<p><a href=&quot;http://msdn.microsoft.com/en-us/library/system.componentmodel.editorbrowsableattribute.aspx&quot; rel=&quot;nofollow&quot;>From MSDN</a>...</p>&#xA;&#xA;<p><strong>Remarks</strong></p>&#xA;&#xA;<p>EditorBrowsableAttribute is a hint to a designer indicating whether a property or method is to be displayed. You can use this type in a visual designer or text editor to determine what is visible to the user. For example, the IntelliSense engine in Visual Studio uses this attribute to determine whether to show a property or method.</p>&#xA;&#xA;<p>In Visual C#, you can control when advanced properties appear in IntelliSense and the Properties Window with the Hide Advanced Members setting under Tools | Options | Text Editor | C#. The corresponding EditorBrowsableState is Advanced.</p>&#xA;"
1789985,2,9033,"2009-11-24 13:15:08",27,NULL,"<p>Easily determine type with which variable was <strong>declared</strong> (from <a href=&quot;http://stackoverflow.com/questions/1786750/how-to-know-in-c-code-which-type-a-variable-was-declared-with/1786775#1786775&quot; title=&quot;Determine declared type of a variable&quot;>my answer</a>):</p>&#xA;&#xA;<pre><code>using System;&#xA;using System.Collections.Generic;&#xA;&#xA;static class Program&#xA;{&#xA;    public static Type GetDeclaredType&lt;T&gt;(T x)&#xA;    {&#xA;        return typeof(T);&#xA;    }&#xA;&#xA;    // Demonstrate how GetDeclaredType works&#xA;    static void Main(string[] args)&#xA;    {&#xA;        IList&lt;string&gt; iList = new List&lt;string&gt;();&#xA;        List&lt;string&gt; list = null;&#xA;&#xA;        Console.WriteLine(GetDeclaredType(iList).Name);&#xA;        Console.WriteLine(GetDeclaredType(list).Name);&#xA;    }&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>Results:</p>&#xA;&#xA;<pre><code>IList`1&#xA;List`1&#xA;</code></pre>&#xA;&#xA;<p>And its <strong>name</strong> (borrowed from <a href=&quot;http://stackoverflow.com/questions/1386642/get-variable-not-hard-coded-name/1386730#1386730&quot; title=&quot;Get variable name&quot;>&quot;Get variable name&quot;</a>):</p>&#xA;&#xA;<pre><code>static void Main(string[] args)&#xA;{&#xA;    Console.WriteLine(&quot;Name is '{0}'&quot;, GetName(new {args}));&#xA;    Console.ReadLine();&#xA;}&#xA;&#xA;static string GetName&lt;T&gt;(T item) where T : class&#xA;{&#xA;    var properties = typeof(T).GetProperties();&#xA;    return properties[0].Name;&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>Result: <code>Name is 'args'</code></p>&#xA;"
1798482,2,9033,"2009-11-25 17:16:48",4,NULL,"<p><strong>Convert enum values to a string value</strong></p>&#xA;&#xA;<p>Given the enum</p>&#xA;&#xA;<pre><code>enum Country&#xA;{&#xA;    UnitedKingdom, &#xA;    UnitedStates,&#xA;    UnitedArabEmirates,&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>using it:</p>&#xA;&#xA;<pre><code>public static void PrintEnumAsString( Country country )&#xA;{&#xA;    Console.Writeline( country.ToString() );&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>will print the name of the enum value as a string, e.g. &quot;UnitedKingdom&quot;</p>&#xA;"
1820538,2,9033,"2009-11-30 15:37:32",23,NULL,"<p>I found that only few developers know about this feature.</p>&#xA;&#xA;<p>If you need a method that works with a <strong>value-type variable via some interface</strong> (implemented by this value type), it's easy to <strong>avoid boxing</strong> during the method call.</p>&#xA;&#xA;<p>Example code:</p>&#xA;&#xA;<pre><code>using System;&#xA;using System.Collections;&#xA;&#xA;interface IFoo {&#xA;    void Foo();&#xA;}&#xA;struct MyStructure : IFoo {&#xA;    public void Foo() {&#xA;    }&#xA;}&#xA;public static class Program {&#xA;    static void MethodDoesNotBoxArguments&lt;T&gt;(T t) where T : IFoo {&#xA;        t.Foo();&#xA;    }&#xA;    static void Main(string[] args) {&#xA;        MyStructure s = new MyStructure();&#xA;        MethodThatDoesNotBoxArguments(s);&#xA;    }&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>IL code doesn't contain any box instructions:</p>&#xA;&#xA;<pre><code>.method private hidebysig static void  MethodDoesNotBoxArguments&lt;(IFoo) T&gt;(!!T t) cil managed&#xA;{&#xA;  // Code size       14 (0xe)&#xA;  .maxstack  8&#xA;  IL_0000:  ldarga.s   t&#xA;  IL_0002:  constrained. !!T&#xA;  IL_0008:  callvirt   instance void IFoo::Foo()&#xA;  IL_000d:  ret&#xA;} // end of method Program::MethodDoesNotBoxArguments&#xA;&#xA;.method private hidebysig static void  Main(string[] args) cil managed&#xA;{&#xA;  .entrypoint&#xA;  // Code size       15 (0xf)&#xA;  .maxstack  1&#xA;  .locals init ([0] valuetype MyStructure s)&#xA;  IL_0000:  ldloca.s   s&#xA;  IL_0002:  initobj    MyStructure&#xA;  IL_0008:  ldloc.0&#xA;  IL_0009:  call       void Program::MethodDoesNotBoxArguments&lt;valuetype MyStructure&gt;(!!0)&#xA;  IL_000e:  ret&#xA;} // end of method Program::Main&#xA;</code></pre>&#xA;&#xA;<p>See <a href=&quot;http://rads.stackoverflow.com/amzn/click/0735621632&quot; rel=&quot;nofollow&quot;>Richter, J. CLR via C#</a>, 2nd edition, chapter 14: Interfaces, section about Generics and Interface Constraints.</p>&#xA;&#xA;<p>See also <a href=&quot;http://stackoverflow.com/questions/1816419/does-passing-a-struct-into-an-interface-field-allocate/1817137#1817137&quot;>my answer</a> to another question.</p>&#xA;"
1821257,2,9033,"2009-11-30 17:41:12",12,NULL,"<p>A couple I can think of:</p>&#xA;&#xA;<pre><code>[field: NonSerialized()]&#xA;public EventHandler event SomeEvent;&#xA;</code></pre>&#xA;&#xA;<p>This prevents the event from being serialised.  The 'field:' indicates that the attribute should be applied to the event's backing field.</p>&#xA;&#xA;<p>Another little known feature is overriding the add/remove event handlers:</p>&#xA;&#xA;<pre><code>public event EventHandler SomeEvent&#xA;{&#xA;    add&#xA;    {&#xA;        // ...&#xA;    }&#xA;&#xA;    remove&#xA;    {&#xA;        // ...&#xA;    }&#xA;}&#xA;</code></pre>&#xA;"
1836944,2,9033,"2009-12-03 00:45:50",5,NULL,"<p>__arglist as well</p>&#xA;&#xA;<pre><code>[DllImport(&quot;msvcrt40.dll&quot;)]&#xA;public static extern int printf(string format, __arglist);&#xA;&#xA;static void Main(string[] args)&#xA;{&#xA;   printf(&quot;Hello %s!\n&quot;, __arglist(&quot;Bart&quot;));&#xA;}&#xA;</code></pre>&#xA;"
1858602,2,9033,"2009-12-07 08:26:16",8,NULL,"<p>Dictionary initializers are always useful for quick hacks and unit tests where you need to hardcode some data.</p>&#xA;&#xA;<pre><code>var dict = new Dictionary&lt;int, string&gt; { { 10, &quot;Hello&quot; }, { 20, &quot;World&quot; } };&#xA;</code></pre>&#xA;"
1962004,2,9033,"2009-12-25 21:33:49",5,NULL,"<p>The Action and Func delegate helpers in conjunction with lambda methods. I use these for simple patterns that need a delegate to improve readability. For example, a simple caching pattern would be to check if the requested object exists in the cache. If it does exist: return the cached object. If it doesn't exist, generate a new instance, cache the new instance and return the new instance. Rather that write this code 1000 times for each object I may store/retrieve from the cache I can write a simple pattern method like so...</p>&#xA;&#xA;<pre><code>private static T CachePattern&lt;T&gt;(string key, Func&lt;T&gt; create) where T : class&#xA;{&#xA;    if (cache[key] == null)&#xA;    {&#xA;    	cache.Add(key, create());&#xA;    }&#xA;&#xA;    return cache[key] as T;&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>... then I can greatly simplify my cache get/set code by using the following in my custom cache manager</p>&#xA;&#xA;<pre><code>public static IUser CurrentUser&#xA;{&#xA;    get&#xA;    {&#xA;    	return CachePattern&lt;IUser&gt;(&quot;CurrentUserKey&quot;, () =&gt; repository.NewUpUser());&#xA;    }&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>Now simple &quot;everyday&quot; code patterns can be written once and reused much more easily IMHO. I don't have to go write a delegate type and figure out how I want to implement a callback, etc. If I can write it in 10 seconds I'm much less apt. to resort to cutting/pasting simple code patterns whether they be lazy initialization and some other examples shown above...</p>&#xA;"
1977121,2,9033,"2009-12-29 21:41:35",3,NULL,"<p>The &quot;TODO&quot; property and the tasks list</p>&#xA;&#xA;<pre><code>//TODO: [something] &#xA;</code></pre>&#xA;&#xA;<p>Adding that to your code (the spacing is important) throws an item in your task list, and double clicking the item will jump you to the appropriate location in your code.</p>&#xA;"
2005795,2,9033,"2010-01-05 11:51:22",3,NULL,"<p>I didn't knew about Generic methods which could help avoid using Method Overloadding.&#xA;Below are overloaded methods to print int and double numbers.</p>&#xA;&#xA;<pre><code>    private static void printNumbers(int [] intNumbers)&#xA;    { &#xA;        foreach(int element in intNumbers)&#xA;        {&#xA;            Console.WriteLine(element);&#xA;        }&#xA;&#xA;    }&#xA;&#xA;    private static void printNumbers(double[] doubleNumbers)&#xA;    {&#xA;        foreach (double element in doubleNumbers)&#xA;        {&#xA;            Console.WriteLine(element);&#xA;        }&#xA;    }&#xA;</code></pre>&#xA;&#xA;<p>Generic method which help to have one method for both of the above</p>&#xA;&#xA;<pre><code>    private static void printNumbers&lt;E&gt;(E [] Numbers)&#xA;    {&#xA;        foreach (E element in Numbers)&#xA;        {&#xA;            Console.WriteLine(element);&#xA;        }&#xA;    }&#xA;</code></pre>&#xA;"
2021617,2,9033,"2010-01-07 15:57:15",4,NULL,"<ul>&#xA;<li>Attaching  <strong>?</strong> to a Type to make it&#xA;nullable, ex: int? </li>&#xA;<li>&quot;c:\dir&quot; instead of <strong>@&quot;C:\dir&quot;</strong></li>&#xA;</ul>&#xA;"
2026781,2,9033,"2010-01-08 10:03:34",13,NULL,"<p><strong>Easier-on-the-eyes / condensed ORM-mapping using LINQ</strong></p>&#xA;&#xA;<p>Consider this table:</p>&#xA;&#xA;<pre><code>[MessageId] INT,&#xA;[MessageText] NVARCHAR(MAX)&#xA;[MessageDate] DATETIME&#xA;</code></pre>&#xA;&#xA;<p>... And this structure:</p>&#xA;&#xA;<pre><code>struct Message&#xA;{&#xA;    Int32 Id;&#xA;    String Text;&#xA;    DateTime Date;&#xA;}&#xA;</code></pre>&#xA;&#xA;<p><br />&#xA;<br />&#xA;Instead of doing something along the lines of:</p>&#xA;&#xA;<pre><code>List&lt;Message&gt; messages = new List&lt;Message&gt;();&#xA;&#xA;foreach (row in DataTable.Rows)&#xA;{&#xA;    var message = new Message&#xA;    {&#xA;        Id = Convert.ToInt32(row[&quot;MessageId&quot;]),&#xA;        Text = Convert.ToString(row[&quot;MessageText&quot;]),&#xA;        Date = Convert.ToDateTime(row[&quot;MessageDate&quot;])&#xA;    };&#xA;&#xA;    messages.Add(message);&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>You can use LINQ and do the same thing with fewer lines of code, and in my opinion; more style. Like so:</p>&#xA;&#xA;<pre><code>var messages = DataTable.AsEnumerable().Select(r =&gt; new Message&#xA;{&#xA;    Id = Convert.ToInt32(r[&quot;MessageId&quot;]),&#xA;    Text = Convert.ToString(r[&quot;MessageText&quot;]),&#xA;    Date = Convert.ToDateTime(r[&quot;MessageDate&quot;])&#xA;}).ToList();&#xA;</code></pre>&#xA;&#xA;<p>This approach can be nested, just like loops can.</p>&#xA;"
2031994,2,9033,"2010-01-09 01:48:03",6,NULL,"<p>Having read through all 9 pages of this I felt I had to point out a little unknown feature...</p>&#xA;&#xA;<p>This was held true for .NET 1.1, using compression/decompression on gzipped files, one had to either:</p>&#xA;&#xA;<ul>&#xA;<li>Download <a href=&quot;http://www.icsharpcode.net/OpenSource/SharpZipLib/&quot; rel=&quot;nofollow&quot;>ICSharpCode.ZipLib</a></li>&#xA;<li>Or, reference the Java library into your project and use the Java's in-built library to take advantage of the GZip's compression/decompression methods.</li>&#xA;</ul>&#xA;&#xA;<p>It is underused, that I did not know about, (still use ICSharpCode.ZipLib still, even with .NET 2/3.5) was that it was incorporated into the standard BCL version 2 upwards, in the System.IO.Compression namespace... see the MSDN page &quot;<a href=&quot;http://msdn.microsoft.com/en-us/library/system.io.compression.gzipstream%28VS.80%29.aspx&quot; rel=&quot;nofollow&quot;>GZipStream Class</a>&quot;.</p>&#xA;"
2035708,2,9033,"2010-01-10 01:27:07",6,NULL,"<p>I find the use of the conditional break function in Visual Studio very useful. I like the way it allows me to set the value to something that, for example can only be met in rare occasions and from there I can examine the code further.</p>&#xA;"
2055618,2,9033,"2010-01-13 09:31:52",3,NULL,"<p>Don't know if this is a secret per se but I loved the added Enumerable (adds to IEnumerable) class in System.Linq.</p>&#xA;&#xA;<p><a href=&quot;http://msdn.microsoft.com/en-us/library/system.linq.enumerable_members.aspx&quot; rel=&quot;nofollow&quot;>http://msdn.microsoft.com/en-us/library/system.linq.enumerable_members.aspx</a></p>&#xA;&#xA;<p>While the yield keyword is already listed. Iterator blocks are freaking amazing. I used them to build Lists that would be tested to see if they were co-prime. It basically allows you to go though a function that returns values one by one and stop any time.</p>&#xA;&#xA;<p>Oh, I almost forgot the best class in the world when you can't optimize it any more. The BackgroundWorker!!!!</p>&#xA;&#xA;<p><a href=&quot;http://msdn.microsoft.com/en-us/library/system.componentmodel.backgroundworker.aspx&quot; rel=&quot;nofollow&quot;>http://msdn.microsoft.com/en-us/library/system.componentmodel.backgroundworker.aspx</a></p>&#xA;"
2132689,2,9033,"2010-01-25 13:55:03",25,NULL,"<p>I didn't find anyone who is using string.Join to join strings using a separator. Everyone keeps writing the same ugly for-loop</p>&#xA;&#xA;<pre><code>var sb = new StringBuilder();&#xA;var count = list.Count();&#xA;for(int i = 0; i &lt; count; i++)&#xA;{&#xA;  if (sb.Length &gt; 0) sb.Append(seperator);&#xA;  sb.Append(list[i]);&#xA;}&#xA;&#xA;return sb.ToString();&#xA;</code></pre>&#xA;&#xA;<p>instead of</p>&#xA;&#xA;<pre><code>return string.Join(separator, list.ToArray());&#xA;</code></pre>&#xA;"
2141921,2,9033,"2010-01-26 19:16:17",2,NULL,"<p>Another way of geting IEnumerable through yield without explicity creating an IEnumerable object</p>&#xA;&#xA;<pre><code>public IEnumerable&lt;Request&gt; SomeMethod(IEnumerable&lt;Request&gt; requests)&#xA;{&#xA;    foreach (Request request in requests)&#xA;       yield return DoSomthing(request);&#xA;}&#xA;</code></pre>&#xA;"
2188117,2,9033,"2010-02-02 22:12:39",4,NULL,"<p>I just want to mention (because of the OP metioning where T : struct) that one of the C# compiler gotchas is that </p>&#xA;&#xA;<pre><code>where T : Enum&#xA;</code></pre>&#xA;&#xA;<p>will NOT compile. It throws the error &quot;Constraint cannot be special class 'System.Enum'&quot;.</p>&#xA;"
2231697,2,9033,"2010-02-09 19:05:24",4,NULL,"<p>Collection Initializer inside Object Initializer:</p>&#xA;&#xA;<pre><code>MailMessage mail = new MailMessage {&#xA;   To = { new MailAddress(&quot;a@example.com&quot;), new MailAddress(&quot;b@example.com&quot;) },&#xA;   Subject = &quot;Password Recovery&quot;&#xA;};&#xA;</code></pre>&#xA;&#xA;<p>You can initialize a whole tree in a single expression.</p>&#xA;"
2243846,2,9033,"2010-02-11 10:38:00",4,NULL,"<p>I am bit late in this conversation and I would like to contribute the following. It may be a new thing for some developers.</p>&#xA;&#xA;<pre><code>public class User&#xA;{&#xA;    public long UserId { get; set; }&#xA;    public String Name { get; set; }&#xA;    public String Password { get; set; }&#xA;    public String Email { get; set; }&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>The usual way to declare and initialize it is with a constructor or like following.</p>&#xA;&#xA;<pre><code>User user = new User();&#xA;user.UserId = 1;&#xA;user.Name = &quot;myname&quot;;&#xA;etc&#xA;</code></pre>&#xA;&#xA;<p>But I learned following way to initialize it. I know Visual Basic developers will love it because it's like with operator available only in VB.NET and not in C# that is as follows.</p>&#xA;&#xA;<pre><code>User user = new User()&#xA;{&#xA;    UserId = 1,&#xA;    Name = &quot;myname&quot;,&#xA;    Email = &quot;myemail@domain.com&quot;,&#xA;    Password = &quot;mypassword&quot;&#xA;};&#xA;</code></pre>&#xA;"
2262310,2,9033,"2010-02-14 18:52:50",16,NULL,"<p>You can store colors in Enum.</p>&#xA;&#xA;<pre><code>public enum MyEnumColors : uint&#xA;{&#xA;    Normal          = 0xFF9F9F9F,&#xA;    Active          = 0xFF8EA98A,&#xA;    Error           = 0xFFFF0000&#xA;}&#xA;</code></pre>&#xA;"
2271941,2,9033,"2010-02-16 09:58:48",2,NULL,"<p>This <a href=&quot;http://elegantcode.com/2010/01/28/calling-non-public-methods/&quot; rel=&quot;nofollow&quot;>trick for calling private methods using Delegate.CreateDelegate</a> is extremely neat. </p>&#xA;&#xA;<pre><code>var subject = new Subject();&#xA;var doSomething = (Func&lt;String, String&gt;)&#xA;    Delegate.CreateDelegate(typeof(Func&lt;String, String&gt;), subject, &quot;DoSomething&quot;);&#xA;Console.WriteLine(doSomething(&quot;Hello Freggles&quot;));&#xA;</code></pre>&#xA;&#xA;<p><a href=&quot;http://stackoverflow.com/questions/1043899/non-code-generated-forwarding-shim-for-testing-private-methods/1804696#1804696&quot;>Here's a context where it's useful</a></p>&#xA;"
2293955,2,9033,"2010-02-19 03:54:47",0,NULL,"<p>I don't know if this is a hidden feature (&quot;&quot;). Any string function.</p>&#xA;"
2359623,2,9033,"2010-03-01 22:37:20",9,NULL,"<p>To test if an IEnumerable<code>&lt;T&gt;</code> is empty with LINQ, use:</p>&#xA;&#xA;<blockquote>&#xA;  <p>IEnumerable<code>&lt;T&gt;</code>.Any();</p>&#xA;</blockquote>&#xA;&#xA;<ul>&#xA;<li>At first, I was using (IEnumerable<code>&lt;T&gt;</code>.Count() != 0)...&#xA;<ul>&#xA;<li>Which unnecessarily causes all items in the IEnumerable<code>&lt;T&gt;</code> to be enumerated.</li>&#xA;</ul></li>&#xA;<li>As an improvement to this, I went on to use (IEnumerable<code>&lt;T&gt;</code>.FirstOrDefault() == null)...&#xA;<ul>&#xA;<li>Which is better...</li>&#xA;</ul></li>&#xA;<li>But IEnumerable<code>&lt;T&gt;</code>.Any() is the most succinct and performs the best.</li>&#xA;</ul>&#xA;"
2361060,2,9033,"2010-03-02 05:16:55",2,NULL,"<p>Most of the <a href=&quot;http://en.wikipedia.org/wiki/Platform_Invocation_Services&quot; rel=&quot;nofollow&quot;>P/Invoke</a> stuff is a bit strange.</p>&#xA;&#xA;<p>Example of attributes:</p>&#xA;&#xA;<pre><code>[DllImport (&quot;gdi32.dll&quot;)] &#xA;[return : MarshalAs(UnmanagedType.I4)]&#xA;[StructLayout(LayoutKind.Sequential)]&#xA;</code></pre>&#xA;"
2405367,2,9033,"2010-03-08 22:43:58",5,NULL,"<p><strong>Empty blocks with braces are allowed.</strong></p>&#xA;&#xA;<p>You can write code like this</p>&#xA;&#xA;<pre><code>{&#xA;    service.DoTonsOfWork(args);&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>It's helpful when you want to try something without a <code>using</code> or <code>try... finally</code> that you've already written.</p>&#xA;&#xA;<pre><code>//using(var scope = new TransactionScope)&#xA;{&#xA;    service.DoTonsOfWork(args);&#xA;}&#xA;</code></pre>&#xA;"
2425985,2,9033,"2010-03-11 15:01:43",4,NULL,"<p>One of the most useful features Visual Studio has is &quot;Make object id&quot;. It generates an id and &quot;attaches&quot; to the object so wherever you look at the object you will also see the id (regardless of the thread).</p>&#xA;&#xA;<p>While debugging right click on the variable tooltip and there you have it.&#xA;It also works on watched/autos/locals variables.</p>&#xA;"
2455744,2,9033,"2010-03-16 15:37:05",15,NULL,"<p><strong>Using &quot;~&quot; operator with FlagAttribute and enum</strong><br>&#xA;Sometime we would use Flag attribute with enum to perform bitwise manipulation on the enumeration.</p>&#xA;&#xA;<pre><code> [Flags]&#xA; public enum Colors&#xA; {&#xA;    None  = 0,&#xA;    Red   = 1,&#xA;    Blue  = 2,&#xA;    White = 4,&#xA;    Black = 8,&#xA;    Green = 16,&#xA;    All   = 31 //It seems pretty bad...&#xA; }&#xA;</code></pre>&#xA;&#xA;<p>Notice that, the value of option &quot;All&quot; which in enum is quite strange.<br>&#xA;Instead of that we can use &quot;~&quot; operator with flagged enum.</p>&#xA;&#xA;<pre><code> [Flags]&#xA; public enum Colors&#xA; {&#xA;    None  = 0,&#xA;    Red   = 1,&#xA;    Blue  = 2,&#xA;    White = 4,&#xA;    Black = 8,&#xA;    Green = 16,&#xA;    All   = ~0 //much better now. that mean 0xffffffff in default.&#xA; }&#xA;</code></pre>&#xA;"
2484117,2,9033,"2010-03-20 18:00:45",8,NULL,"<p>With LINQ it's possible to create new functions based on parameters.&#xA;That's very nice if you have a tiny function which is exectued very often, but the parameters need some time to calculate.</p>&#xA;&#xA;<pre><code>    public Func&lt;int&gt; RandomGenerator&#xA;    {&#xA;        get&#xA;        {&#xA;            var r = new Random();&#xA;            return () =&gt; { return r.Next(); };&#xA;        }&#xA;    }&#xA;&#xA;    void SomeFunction()&#xA;    {&#xA;        var result1 = RandomGenerator();&#xA;&#xA;        var x = RandomGenerator;&#xA;        var result2 = x();&#xA;    }&#xA;</code></pre>&#xA;"
2495330,2,9033,"2010-03-22 20:05:06",35,NULL,"<h1>Arbitrary nested scopes { }</h1>&#xA;&#xA;<p><br />  </p>&#xA;&#xA;<h2>1. For finer scoping behaviour</h2>&#xA;&#xA;<p><strong>{</strong> anywhere inside members <strong>}</strong>, <strong>{</strong> using only braces <strong>}</strong>, <strong>{</strong> with no control statement <strong>}</strong>.</p>&#xA;&#xA;<pre><code>void MyWritingMethod() {&#xA;&#xA;    int sameAge = 35;&#xA;&#xA;&#xA;    { // scope some work&#xA;        string name = &quot;Joe&quot;;&#xA;        Log.Write(name + sameAge.ToString());&#xA;    }&#xA;&#xA;&#xA;    { // scope some other work&#xA;        string name = &quot;Susan&quot;;&#xA;        Log.Write(name + sameAge.ToString());&#xA;    }&#xA;&#xA;    // I'll never mix up Joe and Susan again&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>Inside large, confusing or archaic members (not that they should ever exist, however,) it helps me prevent against using wrong variable names. Scope stuff to finer levels. &#xA;<br />&#xA;<br /></p>&#xA;&#xA;<h2>2. For code beautification or visual semantics</h2>&#xA;&#xA;<p>For example, this XML writing code follows the indentation level of the actual generated XML (i.e. Visual Studio will indent the scoping braces accordingly)</p>&#xA;&#xA;<pre><code>XmlWriter xw = new XmlWriter(..);&#xA;&#xA;//&lt;root&gt;&#xA;xw.WriteStartElement(&quot;root&quot;);&#xA;{&#xA;    //&lt;game&gt;&#xA;    xw.WriteStartElement(&quot;game&quot;);&#xA;    {&#xA;        //&lt;score&gt;#&lt;/score&gt;&#xA;        for (int i = 0; i &lt; scores.Length; ++i) // multiple scores&#xA;            xw.WriteElementString(&quot;score&quot;, scores[i].ToString());&#xA;&#xA;    }&#xA;    //&lt;/game&gt;&#xA;    xw.WriteEndElement();&#xA;}&#xA;//&lt;/root&gt;&#xA;xw.WriteEndElement();&#xA;</code></pre>&#xA;&#xA;<h2>3. Mimic a 'with' statement</h2>&#xA;&#xA;<p>(Also another use to keep temp work out of the main scope)<br>&#xA;Provided by <a href=&quot;http://stackoverflow.com/users/46187/&quot;>Patrik</a>:  sometimes used to mimic the VB &quot;with-statement&quot; in C#.</p>&#xA;&#xA;<pre><code>var somePerson = this.GetPerson();  // whatever &#xA;{ &#xA;    var p = somePerson; &#xA;    p.FirstName = &quot;John&quot;; &#xA;    p.LastName = &quot;Doe&quot;; &#xA;    //... &#xA;    p.City = &quot;Gotham&quot;; &#xA;} &#xA;</code></pre>&#xA;&#xA;<p>For the discerning programmer.</p>&#xA;"
2531350,2,9033,"2010-03-27 23:38:47",10,NULL,"<p>You can change rounding scheme using:</p>&#xA;&#xA;<pre><code>var value = -0.5;&#xA;var value2 = 0.5;&#xA;var value3 = 1.4;&#xA;&#xA;Console.WriteLine( Math.Round(value, MidpointRounding.AwayFromZero) ); //out: -1&#xA;Console.WriteLine(Math.Round(value2, MidpointRounding.AwayFromZero)); //out: 1&#xA;Console.WriteLine(Math.Round(value3, MidpointRounding.ToEven)); //out: 1&#xA;</code></pre>&#xA;"
2576855,2,9033,"2010-04-05 03:58:58",4,NULL,"<p>This relates to static constructors.  This is a method for performing static destruction (i.e. cleaning up resources when the program quits).</p>&#xA;&#xA;<p>First off the class:</p>&#xA;&#xA;<pre><code>class StaticDestructor&#xA;{&#xA;    /// &lt;summary&gt;&#xA;    /// The delegate that is invoked when the destructor is called.&#xA;    /// &lt;/summary&gt;&#xA;    public delegate void Handler();&#xA;    private Handler doDestroy;&#xA;&#xA;    /// &lt;summary&gt;&#xA;    /// Creates a new static destructor with the specified delegate to handle the destruction.&#xA;    /// &lt;/summary&gt;&#xA;    /// &lt;param name=&quot;method&quot;&gt;The delegate that will handle destruction.&lt;/param&gt;&#xA;    public StaticDestructor(Handler method)&#xA;    {&#xA;        doDestroy = method;&#xA;    }&#xA;&#xA;    ~StaticDestructor()&#xA;    {&#xA;        doDestroy();&#xA;    }&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>Then as a member of the class you wish to have a &quot;static destructor&quot; do:</p>&#xA;&#xA;<pre><code>private static readonly StaticDestructor destructor = new StaticDestructor&#xA;(&#xA;    delegate()&#xA;    {&#xA;        //Cleanup here&#xA;    }&#xA;);&#xA;</code></pre>&#xA;&#xA;<p>This will now be called when final garbage collection occurs.  This is useful if you absolutely need to free up certain resources.</p>&#xA;&#xA;<p>A quick and dirty program exhibiting this behavior:</p>&#xA;&#xA;<pre><code>using System;&#xA;&#xA;namespace TestStaticDestructor&#xA;{&#xA;    class StaticDestructor&#xA;    {&#xA;        public delegate void Handler();&#xA;        private Handler doDestroy;&#xA;&#xA;        public StaticDestructor(Handler method)&#xA;        {&#xA;            doDestroy = method;&#xA;        }&#xA;&#xA;        ~StaticDestructor()&#xA;        {&#xA;            doDestroy();&#xA;        }&#xA;    }&#xA;&#xA;    class SomeClass&#xA;    {&#xA;        static SomeClass()&#xA;        {&#xA;            Console.WriteLine(&quot;Statically constructed!&quot;);&#xA;        }&#xA;&#xA;        static readonly StaticDestructor destructor = new StaticDestructor(&#xA;            delegate()&#xA;            {&#xA;                Console.WriteLine(&quot;Statically destructed!&quot;);&#xA;            }&#xA;        );&#xA;    }&#xA;&#xA;    class Program&#xA;    {&#xA;        static void Main(string[] args)&#xA;        {&#xA;            SomeClass someClass = new SomeClass();&#xA;            someClass = null;&#xA;            System.Threading.Thread.Sleep(1000);&#xA;        }&#xA;    }&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>When the program exits, the &quot;static destructor&quot; is called.</p>&#xA;"
2578029,2,9033,"2010-04-05 11:15:10",5,NULL,"<p>Nullable.GetValueOrDefault  ? </p>&#xA;"
2578334,2,9033,"2010-04-05 12:25:41",7,NULL,"<p>I like </p>&#xA;&#xA;<pre><code>#if DEBUG&#xA;           //Code run in debugging mode&#xA;&#xA;#else&#xA;           //Code run in release mode&#xA;&#xA;#endif&#xA;</code></pre>&#xA;"
2602813,2,9033,"2010-04-08 19:30:55",3,NULL,"<p>With reference to the post w/ perma link &quot;<a href=&quot;http://stackoverflow.com/questions/9033/hidden-features-of-c/2495330#2495330&quot;>http://stackoverflow.com/questions/9033/hidden-features-of-c/2495330#2495330</a>&quot;, there is another way to accomplish the same - indentation / line breaks. Check this out..</p>&#xA;&#xA;<pre><code>XmlWriterSettings xmlWriterSettings = new XmlWriterSettings();&#xA;xmlWriterSettings.NewLineOnAttributes = true;&#xA;xmlWriterSettings.Indent = true;&#xA;&#xA;&#xA;XmlWriter xml = XmlWriter.Create(@&quot;C:\file.xml&quot;, xmlWriterSettings);&#xA;&#xA;// Start writing the data using xml.WriteStartElement(), xml.WriteElementString(...), xml.WriteEndElement() etc&#xA;</code></pre>&#xA;&#xA;<p>I am not sure whether this is an unknown feature though!</p>&#xA;"
2684383,2,9033,"2010-04-21 15:41:05",20,NULL,"<p>What about <strong>IObservable</strong>?</p>&#xA;&#xA;<p>Pretty much everybody knows <a href=&quot;http://msdn.microsoft.com/en-us/library/9eekhta0.aspx&quot; rel=&quot;nofollow&quot;><strong>IEnumerable</strong></a> but their mathematical dual seems to be unknown <a href=&quot;http://msdn.microsoft.com/en-us/library/dd990377.aspx&quot; rel=&quot;nofollow&quot;><strong>IObservable</strong></a>. Maybe because its new in .NET 4.</p>&#xA;&#xA;<p>What it does is instead of pulling the information (like an enumerable) it pushes information to the subscriber(s) of the observerable.</p>&#xA;&#xA;<p>Together with the <a href=&quot;http://msdn.microsoft.com/en-us/devlabs/ee794896.aspx&quot; rel=&quot;nofollow&quot;><strong>Rx extensions</strong></a> it will change how we deal with events. Just to illustrate how powerful it is check a very short example <a href=&quot;http://channel9.msdn.com/posts/J.Van.Gogh/Writing-your-first-Rx-Application/&quot; rel=&quot;nofollow&quot;><strong>here</strong></a>.</p>&#xA;"
2689007,2,9033,"2010-04-22 07:40:52",14,NULL,"<p>When a class implements <a href=&quot;http://msdn.microsoft.com/en-us/library/system.componentmodel.inotifypropertychanged%28v=VS.80%29.aspx&quot; rel=&quot;nofollow&quot;>INotifyPropertyChanged</a> and you want to inform the binding system (WPF, Silverlight, etc.) that multiple bound properties of an object (ViewModel) have changed you can raise the PropertyChanged-Event with <strong>null</strong> or <strong>String.Empty</strong>.</p>&#xA;&#xA;<p>This is documented in MSDN, but code examples and articles often don´t explain this possibility. I found it very useful.</p>&#xA;&#xA;<pre><code>public class BoundObject : INotifyPropertyChanged {&#xA;&#xA;    private int _value;&#xA;    private string _text;&#xA;&#xA;    public event PropertyChangedEventHandler PropertyChanged;&#xA;&#xA;    public int Value {&#xA;        get {&#xA;            return _value;&#xA;        }&#xA;        set {&#xA;            if (_value != value) {&#xA;                _value = value;&#xA;                OnPropertyChanged(&quot;Value&quot;);&#xA;            }&#xA;        }&#xA;    }&#xA;&#xA;    public string Text {&#xA;        get {&#xA;            return _text;&#xA;        }&#xA;        set {&#xA;            if (_text != value) {&#xA;                _text = value;&#xA;                OnPropertyChanged(&quot;Text&quot;);&#xA;            }&#xA;        }&#xA;    }&#xA;&#xA;    public void Init(){&#xA;        _text = &quot;InitialValue&quot;;&#xA;        _value = 1;&#xA;        OnPropertyChanged(string.Empty);&#xA;    }&#xA;&#xA;    public void Reset() {&#xA;        _text = &quot;DefaultValue&quot;;&#xA;        _value = 0;&#xA;        OnPropertyChanged(string.Empty);&#xA;    }&#xA;&#xA;    private void OnPropertyChanged(string propertyName) {&#xA;        PropertyChangedEventArgs e = new PropertyChangedEventArgs(propertyName);&#xA;&#xA;        if (PropertyChanged != null) {&#xA;            PropertyChanged(this, e);&#xA;        }&#xA;    }&#xA;}&#xA;</code></pre>&#xA;"
2753564,2,9033,"2010-05-02 13:17:49",6,NULL,"<p>This means T must have a public parameterless constructor :</p>&#xA;&#xA;<pre><code> class MyClass&lt;T&gt; where T : new()&#xA; {&#xA;&#xA; }&#xA;</code></pre>&#xA;"
2836741,2,9033,"2010-05-14 18:46:22",7,NULL,"<p>I was reading thru the book &quot;Pro ASP.NET MVC Framework&quot; (APress) and observed something the author was doing with a Dictionary object that was foreign to me. </p>&#xA;&#xA;<p>He added a new Key/Value Pair without using the Add() method. He then overwrote that same Key/Value pair without having to check if that key already existed. For example:</p>&#xA;&#xA;<pre><code>Dictionary&lt;string, int&gt; nameAgeDict = new Dictionary&lt;string, int&gt;();&#xA;nameAgeDict[&quot;Joe&quot;] = 34;      // no error. will just auto-add key/value&#xA;nameAgeDict[&quot;Joe&quot;] = 41;      // no error. key/value just get overwritten&#xA;nameAgeDict.Add(&quot;Joe&quot;, 30);   // ERROR! key already exists&#xA;</code></pre>&#xA;&#xA;<p>There are many cases where I don't need to check if my Dictionary already has a key or not and I just want to add the respective key/value pair (overwriting the existing key/value pair, if necessary.) Prior to this discovery, I would always have to check to see if the key already existed before adding it.</p>&#xA;"
2843263,2,9033,"2010-05-16 09:55:54",1,NULL,"<p>Separate static fields depending on the generic type of the surrounding class.</p>&#xA;&#xA;<pre><code>    public class StaticConstrucEx2Outer&lt;T&gt; {&#xA;&#xA; // Will hold a different value depending on the specicified generic type&#xA; public T SomeProperty { get; set; }&#xA;&#xA; static StaticConstrucEx2Outer() {&#xA;  Console.WriteLine(&quot;StaticConstrucEx2Outer &quot; + typeof(T).Name);&#xA; }&#xA;&#xA; public class StaticConstrucEx2Inner&lt;U, V&gt; {&#xA;&#xA;  static StaticConstrucEx2Inner() {&#xA;&#xA;   Console.WriteLine(&quot;Outer &lt;{0}&gt; : Inner &lt;{1}&gt;&lt;{2}&gt;&quot;,&#xA;    typeof(T).Name,&#xA;    typeof(U).Name,&#xA;    typeof(V).Name);&#xA;  }&#xA;&#xA;  public static void FooBar() {}&#xA; }&#xA;&#xA; public class SCInner {&#xA;&#xA;  static SCInner() {&#xA;   Console.WriteLine(&quot;SCInner init &lt;{0}&gt;&quot;, typeof(T).Name);&#xA;  }&#xA;&#xA;  public static void FooBar() {}&#xA; }&#xA;}&#xA;&#xA;&#xA;StaticConstrucEx2Outer&lt;int&gt;.StaticConstrucEx2Inner&lt;string, DateTime&gt;.FooBar();&#xA;StaticConstrucEx2Outer&lt;int&gt;.SCInner.FooBar();&#xA;&#xA;StaticConstrucEx2Outer&lt;string&gt;.StaticConstrucEx2Inner&lt;string, DateTime&gt;.FooBar();&#xA;StaticConstrucEx2Outer&lt;string&gt;.SCInner.FooBar();&#xA;&#xA;StaticConstrucEx2Outer&lt;string&gt;.StaticConstrucEx2Inner&lt;string, Int16&gt;.FooBar();&#xA;StaticConstrucEx2Outer&lt;string&gt;.SCInner.FooBar();&#xA;&#xA;StaticConstrucEx2Outer&lt;string&gt;.StaticConstrucEx2Inner&lt;string, UInt32&gt;.FooBar();&#xA;&#xA;StaticConstrucEx2Outer&lt;long&gt;.StaticConstrucEx2Inner&lt;string, UInt32&gt;.FooBar();&#xA;</code></pre>&#xA;&#xA;<p>Will produce the following output</p>&#xA;&#xA;<pre><code>Outer &lt;Int32&gt; : Inner &lt;String&gt;&lt;DateTime&gt;&#xA;SCInner init &lt;Int32&gt;&#xA;&#xA;Outer &lt;String&gt; : Inner &lt;String&gt;&lt;DateTime&gt;&#xA;SCInner init &lt;String&gt;&#xA;&#xA;Outer &lt;String&gt; : Inner &lt;String&gt;&lt;Int16&gt;&#xA;&#xA;Outer &lt;String&gt; : Inner &lt;String&gt;&lt;UInt32&gt;&#xA;&#xA;Outer &lt;Int64&gt; : Inner &lt;String&gt;&lt;UInt32&gt;&#xA;</code></pre>&#xA;"
2905415,2,9033,"2010-05-25 14:09:07",20,NULL,"<p>OK, it may seem obvious, but I want to mention the <code>Object.Equals</code> method (the static one, with two arguments).</p>&#xA;&#xA;<p>I'm pretty sure many people don't even know about it, or forget it's there, yet it can really help in some cases. For instance, when you want to compare two objects for equality, not knowing if they're null. How many times did you write something like that :</p>&#xA;&#xA;<pre><code>if ((x == y) || ((x != null &amp;&amp; y != null) &amp;&amp; x.Equals(y)))&#xA;{&#xA;    ...&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>When you can just write :</p>&#xA;&#xA;<pre><code>if (Object.Equals(x, y))&#xA;{&#xA;    ...&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>(<code>Object.Equals</code> is actually implemented exactly like in the first code sample)</p>&#xA;"
2918238,2,9033,"2010-05-27 03:10:14",31,NULL,"<p>Width in <code>string.Format()</code></p>&#xA;&#xA;<pre><code>Console.WriteLine(&quot;Product: {0,-7} Price: {1,5}&quot;, product1, price1);&#xA;Console.WriteLine(&quot;Product: {0,-7} Price: {1,5}&quot;, product2, price2);&#xA;</code></pre>&#xA;&#xA;<p>produces</p>&#xA;&#xA;<p><img src=&quot;http://i.imgur.com/e0hg3.png&quot; alt=&quot;alt text&quot;></p>&#xA;&#xA;<p>from  <a href=&quot;http://blog.prabir.me/post/Hidden-C-feature-stringFormat-Width.aspx&quot; rel=&quot;nofollow&quot;>Prabir's Blog | Hidden C# feature</a> </p>&#xA;"
3006868,2,9033,"2010-06-09 14:39:44",3,NULL,"<p>Lately I learned about the String.Join method. It is really useful when building strings like columns to select by a query.</p>&#xA;"
3031174,2,9033,"2010-06-13 05:14:41",31,NULL,"<p>typedefs</p>&#xA;&#xA;<p>Someone posted that they miss typedefs but you can do it like this</p>&#xA;&#xA;<pre><code>using ListOfDictionary = System.Collections.Generic.List&lt;System.Collections.Generic.Dictionary&lt;string, string&gt;&gt;;&#xA;</code></pre>&#xA;&#xA;<p>and declare it as</p>&#xA;&#xA;<pre><code>ListOfDictionary list = new ListOfDictionary();&#xA;</code></pre>&#xA;"
3090178,2,9033,"2010-06-22 03:59:05",72,NULL,"<p>Here is a new method of the string class in C# 4.0:</p>&#xA;&#xA;<pre><code>String.IsNullOrWhiteSpace(String value)&#xA;</code></pre>&#xA;&#xA;<p>It's about time.</p>&#xA;"
3093285,2,9033,"2010-06-22 12:55:40",19,NULL,"<p>Not really hidden, but useful.  When you've got an <code>enum</code> with <code>flags</code>, you can use shift-left to make things clearer.  e.g.</p>&#xA;&#xA;<pre><code>[Flags]&#xA;public enum ErrorTypes {&#xA;    None              = 0,&#xA;    MissingPassword   = 1 &lt;&lt; 0,&#xA;    MissingUsername   = 1 &lt;&lt; 1,&#xA;    PasswordIncorrect = 1 &lt;&lt; 2 &#xA;}&#xA;</code></pre>&#xA;"
3094954,2,9033,"2010-06-22 16:12:29",21,NULL,"<p>Another note on event handlers: you can simply create a raise extension method like so:</p>&#xA;&#xA;<pre><code>public static class EventExtensions {&#xA;    public static void Raise&lt;T&gt;(this EventHandler&lt;T&gt; @event, &#xA;                                object sender, T args) where T : EventArgs {&#xA;        if(@event!= null) {&#xA;            @event(sender, args);&#xA;        }&#xA;    }&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>Then you can use it to raise events:</p>&#xA;&#xA;<pre><code>public class MyImportantThing {&#xA;    public event EventHandler&lt;MyImportantEventEventArgs&gt; SomethingHappens;&#xA;    ...&#xA;    public void Bleh() {&#xA;        SomethingHappens.Raise(this, new MyImportantEventEventArgs { X=true });&#xA;    }&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>This method has the added advantage of enforcing a coding standard (using <code>EventHandler&lt;&gt;</code>).</p>&#xA;&#xA;<p>There isn't a point in writing the same exact function over and over and over again. Perhaps the next version of C# will finally have an <code>InlineAttribute</code> that can be placed on the extension method and will cause the compiler to inline the method definition (which would make this way nearly standard, and the fastest).</p>&#xA;&#xA;<p>edit: removed temp variable inside extension method based on comments</p>&#xA;"
3096408,2,9033,"2010-06-22 19:22:04",69,NULL,"<p>When debugging, you can type <code>$exception</code> in the Watch\QuickWatch\Immediate window and get all the info on the exception of the current frame.  This is very useful if you've got 1st chance exceptions turned on!</p>&#xA;"
3096656,2,9033,"2010-06-22 19:58:00",4,NULL,"<p>I don't condone it, but I was surprised that <a href=&quot;http://msdn.microsoft.com/en-us/library/13940fs2%28VS.100%29.aspx&quot; rel=&quot;nofollow&quot;>goto</a> is still around <em>ducks incoming projectiles</em></p>&#xA;"
3138039,2,9033,"2010-06-29 05:18:36",36,NULL,"<p><strong>RealProxy lets you create your own proxies for existing types.</strong></p>&#xA;&#xA;<p>This is super-advanced and I haven't seen anyone else use it -- which may mean that it's also really not that useful for most folks -- but it's one of those things that's good to know.   </p>&#xA;&#xA;<p>Basically, the .NET <strong>RealProxy</strong> class lets you create what is called a <em>transparent proxy</em> to another type.  Transparent in this case means that it looks completely like the proxied target object to its client -- but it's really not:  it's an instance of your class, which is derived from RealProxy.  </p>&#xA;&#xA;<p>This lets you apply powerful and comprehensive interception and &quot;intermediation&quot; services between the client and any methods or properties invoked on the real target object.  Couple this power with the factory pattern (IoC etc), and you can hand back transparent proxies instead of real objects, allowing you to intercept all calls to the real objects and perform actions before and after each method invocation.  In fact, I believe this is the very functionality .NET uses for remoting across app domain, process, and machine boundaries:  .NET intercepts all access, sends serialized info to the remote object, receives the response, and returns it to your code.</p>&#xA;&#xA;<p>Maybe an example will make it clear how this can be useful: I created a reference service stack for my last job as enterprise architect which specified the standard internal composition (the &quot;stack&quot;) of any new WCF services across the division.  The model mandated that the data access layer for (say) the Foo service implement <code>IDAL&lt;Foo&gt;:</code>  create a Foo, read a Foo, update a Foo, delete a Foo.  Service developers used supplied common code (from me) that would locate and load the required DAL for a service: </p>&#xA;&#xA;<pre><code>IDAL&lt;T&gt; GetDAL&lt;T&gt;(); // retrieve data access layer for entity T&#xA;</code></pre>&#xA;&#xA;<p>Data access strategies in that company had often been, well, performance-challenged.  As an architect, I couldn't watch over every service developer to make sure that he/she wrote a performant data access layer.  But what I could do within the <em>GetDAL</em> factory pattern was create <strong>a transparent proxy</strong> to the requested DAL (once the common service model code located the DLL and loaded it), and use high-performance timing APIs to profile all calls to any method of the DAL.  Ranking laggards then is just a matter of sorting DAL call timings by descending total time.  The advantage to this over development profiling (e.g. in the IDE) is that it can be done in the production environment as well, to ensure SLAs.   </p>&#xA;&#xA;<p>Here is an example of test code I wrote for the &quot;entity profiler,&quot; which was common code to create a profiling proxy for any type with a single line:</p>&#xA;&#xA;<pre><code>[Test, Category(&quot;ProfileEntity&quot;)]&#xA;public void MyTest()&#xA;{&#xA;    // this is the object that we want profiled.&#xA;    // we would normally pass this around and call&#xA;    // methods on this instance.&#xA;    DALToBeProfiled dal = new DALToBeProfiled();&#xA;&#xA;    // To profile, instead we obtain our proxy&#xA;    // and pass it around instead.&#xA;    DALToBeProfiled dalProxy = (DALToBeProfiled)EntityProfiler.Instance(dal);&#xA;&#xA;    // or...&#xA;    DALToBeProfiled dalProxy2 = EntityProfiler&lt;DALToBeProfiled&gt;.Instance(dal);&#xA;&#xA;    // Now use proxy wherever we would have used the original...&#xA;    // All methods' timings are automatically recorded&#xA;    // with a high-resolution timer&#xA;    DoStuffToThisObject(dalProxy);&#xA;&#xA;    // Output profiling results&#xA;    ProfileManager.Instance.ToConsole();&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>Again, this lets you intercept all methods and properties called by the client on the target object!  In your <em>RealProxy-derived</em> class, you have to override <strong>Invoke:</strong></p>&#xA;&#xA;<pre><code>[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]&#xA;[SecurityPermission(SecurityAction.LinkDemand, &#xA;    Flags = SecurityPermissionFlag.Infrastructure)] // per FxCop&#xA;public override IMessage Invoke(IMessage msg)&#xA;{&#xA;    IMethodCallMessage msgMethodCall = msg as IMethodCallMessage;&#xA;    Debug.Assert(msgMethodCall != null); // should not be null - research Invoke if this trips. KWB 2009.05.28&#xA;&#xA;    // The MethodCallMessageWrapper&#xA;    // provides read/write access to the method &#xA;    // call arguments. &#xA;    MethodCallMessageWrapper mc =&#xA;        new MethodCallMessageWrapper(msgMethodCall);&#xA;&#xA;    // This is the reflected method base of the called method. &#xA;    MethodInfo mi = (MethodInfo)mc.MethodBase;&#xA;&#xA;    IMessage retval = null;&#xA;&#xA;    // Pass the call to the method and get our return value&#xA;    string profileName = ProfileClassName + &quot;.&quot; + mi.Name;&#xA;&#xA;    using (ProfileManager.Start(profileName))&#xA;    {&#xA;        IMessage myReturnMessage =&#xA;           RemotingServices.ExecuteMessage(_target, msgMethodCall);&#xA;&#xA;        retval = myReturnMessage;&#xA;    }&#xA;&#xA;    return retval;&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>Isn't it fascinating what .NET can do? The only restriction is that the target type <em>must</em> be derived from <strong><em>MarshalByRefObject</em></strong>.  I hope this is helpful to someone.</p>&#xA;"
3138257,2,9033,"2010-06-29 06:12:33",15,NULL,"<p>Also useful, but not commonly used : <a href=&quot;http://msdn.microsoft.com/en-us/library/ms228973.aspx&quot; rel=&quot;nofollow&quot;>Constrained Execution Regions</a>.</p>&#xA;&#xA;<p>A quote from BCL Team blog :</p>&#xA;&#xA;<blockquote>&#xA;  <p>Constrained execution regions (CER's)&#xA;  exist to help a developer write her&#xA;  code to maintain consistency.  The CLR&#xA;  doesn't guarantee that the developer's&#xA;  code is correct, but the CLR does&#xA;  hoist all of the runtime-induced&#xA;  failure points (ie, async exceptions)&#xA;  to either before the code runs, or&#xA;  after it has completed.  Combined with&#xA;  constraints on what the developer can&#xA;  put in a CER, these are a useful way&#xA;  of making strong guarantees about&#xA;  whether your code will execute.  CER's&#xA;  are eagerly prepared, meaning that&#xA;  when we see one, we will eagerly JIT&#xA;  any code found in its&#xA;  statically-discoverable call graph. &#xA;  If the CLR's host cares about stack&#xA;  overflow, we'll probe for some amount&#xA;  of stack space as well (though perhaps&#xA;  not enough stack space for any&#xA;  arbitrary method*).  We also delay&#xA;  thread aborts until the CER has&#xA;  finished running.</p>&#xA;</blockquote>&#xA;&#xA;<p>It can be useful when making edits to more than one field of a data structure in an atomic fashion. So it helps to have transactions on objects.</p>&#xA;&#xA;<p>Also <a href=&quot;http://msdn.microsoft.com/en-us/library/system.runtime.constrainedexecution.criticalfinalizerobject.aspx&quot; rel=&quot;nofollow&quot;>CriticalFinalizerObject</a> seems to be hidden(at least who are not writing unsafe code).&#xA;A CriticalFinalizerObject guarantees that garbage collection will execute the finalizer. Upon allocation, the finalizer and its call graph are prepared in advance. </p>&#xA;"
3146453,2,9033,"2010-06-30 04:20:13",26,NULL,"<p><a href=&quot;http://msdn.microsoft.com/en-us/library/system.appdomain.unhandledexception.aspx&quot; rel=&quot;nofollow&quot;>AppDomain.UnhandledException Event</a> is also candidate for being hidden.</p>&#xA;&#xA;<blockquote>&#xA;  <p>This event provides notification of uncaught exceptions. It allows the application to log information about the exception before the system default handler reports the exception to the user and terminates the application. If sufficient information about the state of the application is available, other actions may be undertaken — such as saving program data for later recovery. Caution is advised, because program data can become corrupted when exceptions are not handled.</p>&#xA;</blockquote>&#xA;&#xA;<p>We can see, even on this site, a lot of people are wondering why their application is not starting, why it crashed, etc. The <code>AppDomain.UnhandledException</code> event can be very useful for such cases as it provides the possibility at least to log the reason of application failure. </p>&#xA;"
3147945,2,9033,"2010-06-30 09:24:46",20,NULL,"<pre><code>string.Empty&#xA;</code></pre>&#xA;&#xA;<p>I know it's not fantastical (ludicrously odd), but I use it all the time instead of &quot;&quot;.</p>&#xA;&#xA;<p>And it's pretty well hidden until someone tells you it's there.</p>&#xA;"
3152079,2,9033,"2010-06-30 18:09:06",15,NULL,"<p><a href=&quot;http://msdn.microsoft.com/en-us/library/f58wzh21%28VS.80%29.aspx&quot; rel=&quot;nofollow&quot;>fixed</a> statement</p>&#xA;&#xA;<p>This statement prevents the garbage collector from relocating a movable variable. Fixed can also be used to create fixed size buffers.</p>&#xA;&#xA;<blockquote>&#xA;  <p>The fixed statement sets a pointer to a managed variable and &quot;pins&quot; that variable during the execution of statement.</p>&#xA;</blockquote>&#xA;&#xA;<p><a href=&quot;http://msdn.microsoft.com/en-us/library/cx9s2sy4%28VS.71%29.aspx&quot; rel=&quot;nofollow&quot;>stackalloc</a></p>&#xA;&#xA;<p>The stackalloc allocates a block of memory on the stack.</p>&#xA;"
3172255,2,9033,"2010-07-03 17:31:40",14,NULL,"<p>You can put several attributes in one pair of square brackets:</p>&#xA;&#xA;<pre><code>    [OperationContract, ServiceKnownType(typeof(Prism)), ServiceKnownType(typeof(Cuboid))]&#xA;    Shape GetShape();&#xA;</code></pre>&#xA;"
3189640,2,9033,"2010-07-06 19:46:44",7,NULL,"<p>Not sure if this one has been mentioned or not (11 pages!!)</p>&#xA;&#xA;<p>But the <code>OptionalField</code> attribute for classes is amazing when you are versioning classes/objects that are going to be serialized.</p>&#xA;&#xA;<p><a href=&quot;http://msdn.microsoft.com/en-us/library/ms229752(VS.80).aspx&quot; rel=&quot;nofollow&quot;>http://msdn.microsoft.com/en-us/library/ms229752(VS.80).aspx</a></p>&#xA;"
3189688,2,9033,"2010-07-06 19:52:37",6,NULL,"<p>Accessing local variables from anonymous methods allows you to wrap just about any code with new control flow logic, without having to factor out that code into another method.  Local variables declared outside the method are available inside the method such as the <code>endOfLineChar</code> local variable in the example here:</p>&#xA;&#xA;<p><a href=&quot;http://aaronls.wordpress.com/2010/02/02/retrying-on-exception-conditionally/&quot; rel=&quot;nofollow&quot;>http://aaronls.wordpress.com/2010/02/02/retrying-on-exception-conditionally/</a></p>&#xA;"
9413174,2,9033,"2012-02-23 12:34:20",4,NULL,"<p>You can combine the <code>protected</code> and <code>internal</code> accessor to make it public within the same assembly, but protected in a diffrent assembly. This can be used on fields, properties, method and even constants.</p>&#xA;"
9682,2,9666,"2008-08-13 12:00:51",0,NULL,"<p>I thought they were - I'm not sure of the point of the lock in your example unless you're also doing something to s_Provider at the same time - then the lock would ensure that these calls happened together.</p>&#xA;&#xA;<p>Does that <code>//Perform initialization</code> comment cover creating s_Provider? For instance</p>&#xA;&#xA;<pre><code>private static void Initialize()&#xA;{&#xA;    if (s_Initialized)&#xA;        return;&#xA;&#xA;    lock(s_lock)&#xA;    {&#xA;        s_Provider = new MembershipProvider ( ... )&#xA;        s_Initialized = true;&#xA;    }&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>Otherwise that static property-get's just going to return null anyway.</p>&#xA;"
9689,2,9666,"2008-08-13 12:08:29",2,NULL,"<p>The Initialize function is faulty. It should look more like this:</p>&#xA;&#xA;<pre><code>private static void Initialize()&#xA;{&#xA;    if(s_initialized)&#xA;        return;&#xA;&#xA;    lock(s_lock)&#xA;    {&#xA;        if(s_Initialized)&#xA;            return;&#xA;        s_Initialized = true;&#xA;    }&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>Without the second check inside the lock it's possible the initialisation code will be executed twice. So the first check is for performance to save you taking a lock unnecessarily, and the second check is for the case where a thread is executing the initialisation code but hasn't yet set the <code>s_Initialized</code> flag and so a second thread would pass the first check and be waiting at the lock.</p>&#xA;"
9699,2,9666,"2008-08-13 12:16:40",0,NULL,"<p>What you're asking is whether accessing a field in a method multiple times atomic -- to which the answer is no.</p>&#xA;&#xA;<p>In the example above, the initialise routine is faulty as it may result in multiple initialization.  You would need to check the <code>s_Initialized</code> flag inside the lock as well as outside, to prevent a race condition in which multiple threads read the <code>s_Initialized</code> flag before any of them actually does the initialisation code. E.g.,</p>&#xA;&#xA;<pre><code>private static void Initialize()&#xA;{&#xA;    if (s_Initialized)&#xA;        return;&#xA;&#xA;    lock(s_lock)&#xA;    {&#xA;        if (s_Initialized)&#xA;            return;&#xA;        s_Provider = new MembershipProvider ( ... )&#xA;        s_Initialized = true;&#xA;    }&#xA;}&#xA;</code></pre>&#xA;"
9701,2,9666,"2008-08-13 12:19:23",0,NULL,"<p>Perhaps <a href=&quot;http://msdn.microsoft.com/en-us/library/system.threading.interlocked(VS.85).aspx&quot; rel=&quot;nofollow&quot;>Interlocked</a> gives a clue. And otherwise <a href=&quot;http://msdn.microsoft.com/sv-se/magazine/cc188793(en-us).aspx&quot; rel=&quot;nofollow&quot;>this one</a> i pretty good.</p>&#xA;&#xA;<p>I would have guessed that their not atomic.</p>&#xA;"
9711,2,9666,"2008-08-13 12:34:20",1,NULL,"<p>I think you're asking if <code>s_Initialized</code> could be in an unstable state when read outside the lock. The short answer is no. A simple assignment/read will boil down to a single assembly instruction which is atomic on every processor I can think of. </p>&#xA;&#xA;<p>I'm not sure what the case is for assignment to 64 bit variables, it depends on the processor, I would assume that it is not atomic but it probably is on modern 32 bit processors and certainly on all 64 bit processors. Assignment of complex value types will not be atomic.</p>&#xA;"
9712,2,9666,"2008-08-13 12:35:13",1,NULL,"<p>Reads and writes of variables are not atomic. You need to use Synchronisation APIs to emulate atomic reads/writes.</p>&#xA;&#xA;<p>For an awesome reference on this and many more issues to do with concurrency, make sure you grab a copy of Joe Duffy's <a href=&quot;http://rads.stackoverflow.com/amzn/click/032143482X&quot; rel=&quot;nofollow&quot;>latest spectacle</a>. It's a ripper!</p>&#xA;"
9715,2,9666,"2008-08-13 12:39:34",1,NULL,"<p>&quot;Is accessing a variable in C# an atomic operation?&quot;</p>&#xA;&#xA;<p>Nope. And it's not a C# thing, nor is it even a .net thing, it's a processor thing.</p>&#xA;&#xA;<p>OJ is spot on that Joe Duffy is the guy to go to for this kind of info. ANd &quot;interlocked&quot; is a great search term to use if you're wanting to know more.</p>&#xA;&#xA;<p>&quot;Torn reads&quot; can occur on any value whose fields add up to more than the size of a pointer.</p>&#xA;"
9721,2,9666,"2008-08-13 12:42:17",-2,NULL,"<p>Ack, nevermind... as pointed out, this is indeed incorrect. It doesn't prevent a second thread from entering the &quot;initialize&quot; code section. Bah.</p>&#xA;&#xA;<blockquote>&#xA;  <p>You could also decorate s_Initialized with the volatile keyword and forego the use of lock entirely.</p>&#xA;</blockquote>&#xA;"
9788,2,9666,"2008-08-13 13:24:42",31,NULL,"<p>For the definitive answer go to the spec. :)</p>&#xA;&#xA;<p>Partition I, Section 12.6.6 of the CLI spec states: &quot;A conforming CLI shall guarantee that read and write access to properly aligned memory locations no larger than the native word size is atomic when all the write accesses to a location are the same size.&quot;</p>&#xA;&#xA;<p>So that confirms that s_Initialized will never be unstable, and that read and writes to primitve types are atomic.</p>&#xA;&#xA;<p>Interlocking creates a memory barrier to prevent the processor from reordering reads and writes. The lock creates the only required barrier in this example.</p>&#xA;"
9792,2,9666,"2008-08-13 13:28:47",1,NULL,"<blockquote>&#xA;  <p>You could also decorate s_Initialized with the volatile keyword and forego the use of lock entirely.</p>&#xA;</blockquote>&#xA;&#xA;<p>That is not correct. You will still encounter the problem of a second thread passing the check before the first thread has had a chance to to set the flag which will result in multiple executions of the initialisation code.</p>&#xA;"
10103,2,9666,"2008-08-13 17:22:04",7,NULL,"<p>The correct answer seems to be, &quot;Yes, mostly.&quot;</p>&#xA;&#xA;<ol>&#xA;<li>John's answer referencing the CLI spec indicates that accesses to variables not larger than 32 bits on a 32-bit processor are atomic.</li>&#xA;<li><p>Further confirmation from the C# spec, section 5.5, <a href=&quot;http://msdn.microsoft.com/en-us/library/aa691278%28VS.71%29.aspx&quot; rel=&quot;nofollow&quot;>Atomicity of variable references</a>:</p>&#xA;&#xA;<blockquote>&#xA;  <p>Reads and writes of the following data types are atomic: bool, char, byte, sbyte, short, ushort, uint, int, float, and reference types. In addition, reads and writes of enum types with an underlying type in the previous list are also atomic. Reads and writes of other types, including long, ulong, double, and decimal, as well as user-defined types, are not guaranteed to be atomic.</p>&#xA;</blockquote></li>&#xA;<li><p>The code in my example was paraphrased from the Membership class, as written by the ASP.NET team themselves, so it was always safe to assume that the way it accesses the s_Initialized field is correct. Now we know why.</p></li>&#xA;</ol>&#xA;&#xA;<p>Edit: As Thomas Danecker points out, even though the access of the field is atomic, s_Initialized should really be marked <em>volatile</em> to make sure that the locking isn't broken by the processor reordering the reads and writes.</p>&#xA;"
12206,2,9666,"2008-08-15 12:53:51",11,NULL,"<p>Hang about -- the question that is in the title is definitely not the real question that Rory is asking.</p>&#xA;&#xA;<p>The titular question has the simple answer of &quot;No&quot; -- but this is no help at all, when you see the real question -- which i don't think anyone has given a simple answer to.</p>&#xA;&#xA;<p>The real question Rory asks is presented much later and is more pertinent to the example he gives.</p>&#xA;&#xA;<blockquote>&#xA;  <p>Why is the s_Initialized field read&#xA;  outside of the lock?</p>&#xA;</blockquote>&#xA;&#xA;<p>The answer to this is also simple, though completely unrelated to the atomicity of variable access.</p>&#xA;&#xA;<p>The s_Initialized field is read outside of the lock because <strong>locks are expensive</strong>.</p>&#xA;&#xA;<p>Since the s_Initialized field is essentially &quot;write once&quot; it will never return a false positive.</p>&#xA;&#xA;<p>It's economical to read it outside the lock.</p>&#xA;&#xA;<p>This is a <em>low cost</em> activity with a <em>high</em> chance of having a benefit.</p>&#xA;&#xA;<p>That's why it's read outside of the lock -- to avoid paying the cost of using a lock unless it's indicated.</p>&#xA;&#xA;<p>If locks were cheap the code would be simpler, and omit that first check.</p>&#xA;&#xA;<p><em>(edit: nice response from rory follows. Yeh, boolean reads are very much atomic. If someone built a processor with non-atomic boolean reads, they'd be featured on the DailyWTF.)</em></p>&#xA;"
12246,2,9666,"2008-08-15 13:37:48",1,NULL,"<p>@Leon<br />&#xA;I see your point - the way I've asked, and then commented on, the question allows it to be taken in a couple of different ways.</p>&#xA;&#xA;<p>To be clear, I wanted to know if it was safe to have concurrent threads read and write to a boolean field without any explicit synchronization code, i.e., is accessing a boolean (or other primitive-typed) variable atomic.</p>&#xA;&#xA;<p>I then used the Membership code to give a concrete example, but that introduced a bunch of distractions, like the double-check locking, the fact that s_Initialized is only ever set once, and that I commented out the initialization code itself.</p>&#xA;&#xA;<p>My bad.</p>&#xA;"
73827,2,9666,"2008-09-16 15:50:30",30,NULL,"<p>This is a (bad) form of the double check locking pattern which is <strong>not</strong> thread safe in C#!</p>&#xA;&#xA;<p>There is one big problem in this code:</p>&#xA;&#xA;<p>s_Initialized is not volatile. That means that writes in the initialization code can move after s_Initialized is set to true and other threads can see uninitialized code even if s_Initialized is true for them. This doesn't apply to Microsoft's implementation of the Framework because every write is a volatile write.</p>&#xA;&#xA;<p>But also in Microsoft's implementation, reads of the uninitialized data can be reordered (i.e. prefetched by the cpu), so if s_Initialized is true, reading the data that should be initialized can result in reading old, uninitialized data because of cache-hits (ie. the reads are reordered).</p>&#xA;&#xA;<p>For example:  </p>&#xA;&#xA;<pre><code>Thread 1 reads s_Provider (which is null)  &#xA;Thread 2 initializes the data  &#xA;Thread 2 sets s\_Initialized to true  &#xA;Thread 1 reads s\_Initialized (which is true now)  &#xA;Thread 1 uses the previously read Provider and gets a NullReferenceException&#xA;</code></pre>&#xA;&#xA;<p>Moving the read of s_Provider before the read of s_Initialized is perfectly legal because there is no volatile read anywhere.</p>&#xA;&#xA;<p>If s_Initialized would be volatile, the read of s_Provider would not be allowed to move before the read of s_Initialized and also the initialization of the Provider is not allowed to move after s_Initialized is set to true and everything is ok now.</p>&#xA;&#xA;<p>Joe Duffy also wrote an Article about this problem: <a href=&quot;http://www.bluebytesoftware.com/blog/PermaLink,guid,3420c247-2da5-411b-8ce7-05082e1aba30.aspx&quot; rel=&quot;nofollow&quot;>Broken variants on double-checked locking</a></p>&#xA;"
12206783,2,9666,"2012-08-30 22:59:27",0,NULL,"<p>To make your code always work on weakly ordered architectures, you must put a MemoryBarrier before you write s_Initialized.</p>&#xA;&#xA;<pre><code>s_Provider = new MemershipProvider;&#xA;&#xA;// MUST PUT BARRIER HERE to make sure the memory writes from the assignment&#xA;// and the constructor have been wriitten to memory&#xA;// BEFORE the write to s_Initialized!&#xA;Thread.MemoryBarrier();&#xA;&#xA;// Now that we've guaranteed that the writes above&#xA;// will be globally first, set the flag&#xA;s_Initialized = true;&#xA;</code></pre>&#xA;&#xA;<p>The memory writes that happen in the MembershipProvider constructor and the write to s_Provider are not guaranteed to happen before you write to s_Initialized on a weakly ordered processor.</p>&#xA;&#xA;<p>A lot of thought in this thread is about whether something is atomic or not. That is not the issue. The issue is <strong>the order that your thread's writes are visible to other threads</strong>. On weakly ordered architectures, writes to memory do not occur in order and THAT is the real issue, not whether a variable fits within the data bus.</p>&#xA;&#xA;<p><strong>EDIT:</strong> Actually, I'm mixing platforms in my statements. In C# the CLR spec requires that writes are globally visible, in-order (by using expensive store instructions for every store if necessary). Therefore, you don't need to actually have that memory barrier there. However, if it were C or C++ where no such guarantee of global visibility order exists, and your target platform may have weakly ordered memory, and it is multithreaded, then you would need to ensure that the constructors writes are globally visible before you update s_Initialized, which is tested outside the lock.</p>&#xA;"
15125936,2,9666,"2013-02-28 01:35:36",0,NULL,"<p>An <code>If (itisso) {</code> check on a boolean is atomic, but even if it was not&#xA;there is no need to lock the first check.</p>&#xA;&#xA;<p>If any thread has completed the Initialization then it will be true. It does not matter if several threads are checking at once. They will all get the same answer, and, there will be no conflict.</p>&#xA;&#xA;<p>The second check inside the lock is necessary because another thread may have grabbed the lock first and completed the initialization process already.</p>&#xA;"
11839,2,11831,"2008-08-15 00:48:41",25,NULL,"<p>The purpose of a Singleton is to ensure a class has only one instance, and provide a global point of access to it. Most of the time the focus is on the single instance point. Imagine if it were called a Globalton. It would sound less appealing as this emphasizes the (usually) negative connotations of a global variable.</p>&#xA;&#xA;<p>Most of the good arguments against singletons have to do with the difficulty they present in testing as creating test doubles for them is not easy.</p>&#xA;"
11877,2,11831,"2008-08-15 01:48:55",1,NULL,"<p>Singletons have their uses, but one must be careful in using and exposing them, because they are <a href=&quot;http://dotnet.kapenilattex.com/?p=35&quot; rel=&quot;nofollow&quot; title=&quot;excanvas&quot;>way too easy to abuse</a>, difficult to truly unit test, and it is easy to create circular dependencies based on two singletons that accesses each other.</p>&#xA;&#xA;<p>It is helpful however, for when you want to be sure that all your data is synchronized across multiple instances, e.g., configurations for a distributed application, for instance, may rely on singletons to make sure that all connections use the same up-to-date set of data.</p>&#xA;"
11895,2,11831,"2008-08-15 02:12:11",30,NULL,"<p>A singleton is just a bunch of global variables in a fancy dress.</p>&#xA;&#xA;<p>Global variables have their uses, as do singletons, but if you think you're doing something cool and useful with a singleton instead of using a yucky global variable (everyone knows globals are bad mmkay), you're unfortunately misled.</p>&#xA;"
11905,2,11831,"2008-08-15 02:40:44",37,NULL,"<p>Google has a <a href=&quot;http://code.google.com/p/google-singleton-detector/&quot;>Singleton Detector</a> for Java that I believe started out as a tool that must be run on all code produced at Google.  The nutshell reason to remove Singletons:  </p>&#xA;&#xA;<blockquote>&#xA;  <p>because they can make testing&#xA;  difficult and hide problems with your&#xA;  design</p>&#xA;</blockquote>&#xA;&#xA;<p>For a more explicit explanation see '<a href=&quot;http://code.google.com/p/google-singleton-detector/wiki/WhySingletonsAreControversial&quot;>Why Singletons Are Controversial</a>' from Google.</p>&#xA;"
11911,2,11831,"2008-08-15 02:50:15",1,NULL,"<p>I find you have to be very careful about <strong>why</strong> you're deciding to use a singleton. As others have mentioned, it's essentially the same issue as using global variables. You must be very cautious and consider what you could be doing by using one.</p>&#xA;&#xA;<p>It's very rare to use them and usually there is a better way to do things. I've run into situations where I've done something with a singleton and then had to sift through my code to take it out after I discovered how much worse it made things (or after I came up with a much better, more sane solution)</p>&#xA;"
11914,2,11831,"2008-08-15 02:54:54",5,NULL,"<p>I've been trying to think of a way to come to the poor singelton's rescue here, but I must admit it's hard.  I've seen very few legitimate uses of them and with the current drive to do dependency injection andd unit testing they are just hard to use.  They definetly are the &quot;cargo cult&quot; manifestation of programming with design patterns I have worked with many programmers that have never cracked the &quot;GoF&quot; book but they know 'Singelton' and thus they know 'Patterns'.</p>&#xA;&#xA;<p>I do have to disagree with Orion though, most of the time I've seen singeltons oversused it's not global variables in a dress, but more like global services(methods) in a dress.  It's interesting to note that if you try to use Singeltons in the SQL Server 2005 in safe mode through the CLR interface the system will flag the code.  The problem is that you have persistent data beyond any given transaction that may run, of course if you make the instance variable read only you can get around the issue.  </p>&#xA;&#xA;<p>That issue lead to a lot of rework for me one year.</p>&#xA;"
11934,2,11831,"2008-08-15 03:40:27",0,NULL,"<p>I really disagree on the <em>bunch of global variables in a fancy dress</em> idea.  Singletons are really useful when used to solve the right problem.  Let me give you a real example.</p>&#xA;&#xA;<p>I once developed a small piece of software to a place I worked, and some forms had to use some info about the company, its employees, services and prices.  At its first version, the system kept loading that data from the database every time a form was opened.  Of course, I soon realized this approach was not the best one.</p>&#xA;&#xA;<p>Then I created a singleton class, named <em>company</em>, which encapsulated everything about the place, and it was completely filled with data by the time the system was opened.</p>&#xA;&#xA;<p>It was not just a bunch of variables in a fancy dress because this was had dozens of responsibilities, like communicating with persistence layer to save/retrieve data about the company, deal with employees and prices collections, etc.</p>&#xA;&#xA;<p>Plus, it was a fixed, system-wide, easily accessible point to have the company data.</p>&#xA;"
11985,2,11831,"2008-08-15 05:22:48",2,NULL,"<blockquote>&#xA;  <p>It was not just a bunch of variables in a fancy dress because this was had dozens of responsibilities, like communicating with persistence layer to save/retrieve data about the company, deal with employees and prices collections, etc.</p>&#xA;</blockquote>&#xA;&#xA;<p>I must say you're not really describing somthing that should be a single object and it's debatable that any of them, other than Data Serialization should have been a singelton.</p>&#xA;&#xA;<p>I can see at least 3 sets of classes that I would normally design in, but I tend to favor smaller simpler objects that do a narrow set of tasks very well.  I know that this is not the nature of most programmers.  (Yes I work on 5000 line class monstrosities every day, and I have a special love for the 1200 line methods some people write.)   </p>&#xA;&#xA;<p>I think the point is that in most cases you don't need a singelton and often your just making your life harder.</p>&#xA;"
24406,2,11831,"2008-08-23 17:22:32",4,NULL,"<p>Holy wars! Ok let me see.. Last time I checked the design police said..</p>&#xA;&#xA;<p>Singletons are bad because they hinder auto testing - instances cannot be created afresh for each test case.&#xA;Instead the logic should be in a class (A) that can be easily instantiated and tested. Another class (B) should be responsible for constraining creation. Single Responsibility Principle to the fore! It should be team-knowledge that you're supposed to go via B to access A - sort of a team convention.</p>&#xA;&#xA;<p>I concur mostly..</p>&#xA;"
29307,2,11831,"2008-08-27 01:20:26",8,NULL,"<p>I think there is a great misunderstanding about the use of the Singleton pattern. Most of the comments here refer to it as a place to access global data. We need to be careful here - Singleton as a pattern is <strong>not</strong> for accessing globals. </p>&#xA;&#xA;<p>Singleton should be used to have <strong>only one instance</strong> of the given class. <a href=&quot;http://www.netobjectivesrepository.com/&quot; rel=&quot;nofollow&quot;>Pattern Repository</a> has great information on <a href=&quot;http://www.netobjectivesrepository.com/TheSingletonPattern&quot; rel=&quot;nofollow&quot;>Singleton</a>.</p>&#xA;"
30769,2,11831,"2008-08-27 18:14:07",1,NULL,"<p>I've used singletons a bunch of times in conjunction with <a href=&quot;http://www.springframework.org/&quot; rel=&quot;nofollow&quot;>Spring</a> and didn't consider it a crutch or lazy.</p>&#xA;&#xA;<p>What this pattern allowed me to do was create a single class for a bunch of configuration-type values and then share the single (non-mutable) instance of that specific configuration instance between several users of my web application.  </p>&#xA;&#xA;<p>In my case, the singleton contained client configuration criteria - css file location, db connection criteria, feature sets, etc. - specific for that client.  These classes were instantiated and accessed through Spring and shared by users with the same configuration (i.e. 2 users from the same company). * *<em>I know there's a name for this type of application but it's escaping me</em></p>&#xA;&#xA;<p>I feel it would've been wasteful to create (then garbage collect) new instances of these &quot;constant&quot; objects for each user of the app.</p>&#xA;"
64887,2,11831,"2008-09-15 17:24:18",0,NULL,"<p>Singletons are very useful, and using them is not in and of itself an anti-pattern. However, they've gotten a bad reputation largely because they force any consuming code to acknowledge that they are a singleton in order to interact with them. That means if you ever need to &quot;un-Singletonize&quot; them, the impact on your codebase can be very significant.</p>&#xA;&#xA;<p>Instead, I'd suggest either hiding the Singleton behind a factory. That way, if you need to alter the service's instantiation behavior in the future, you can just change the factory rather than all types that consume the Singleton.</p>&#xA;&#xA;<p>Even better, use an inversion of control container! Most of them allow you to separate instantiation behavior from the implementation of your classes.</p>&#xA;"
64999,2,11831,"2008-09-15 17:38:23",55,NULL,"<p>In defense of singletons:</p>&#xA;&#xA;<ul>&#xA;<li><strong>They are not as bad as globals</strong> because globals have no standard-enforced initialization order, and you could easily see nondeterministic bugs due to naive or unexpected dependency orders.  Singletons (assuming they're allocated on the heap) are created after all globals, and in a very predictable place in the code.</li>&#xA;<li><strong>They're very useful for resource-lazy / -caching systems</strong> such as an interface to a slow I/O device.  If you intelligently build a singleton interface to a slow device, and no one ever calls it, you won't waste any time.  If another piece of code calls it from multiple places, your singleton can optimize caching for both simultaneously, and avoid any double look-ups.  You can also easily avoid any deadlock condition on the singleton-controlled resource.</li>&#xA;</ul>&#xA;&#xA;<p>Against singletons:</p>&#xA;&#xA;<ul>&#xA;<li><strong>In C++, there's no nice way to auto-clean-up after singletons.</strong>  There are work-arounds, and slightly hacky ways to do it, but there's just no simple, universal way to make sure your singleton's destructor is always called.  This isn't so terrible memory-wise -- just think of it as more global variables, for this purpose.  But it can be bad if your singleton allocates other resources (e.g. locks some files) and doesn't release them.</li>&#xA;</ul>&#xA;&#xA;<p>My own opinion:</p>&#xA;&#xA;<p>I use singletons, but avoid them if there's a reasonable alternative.  This has worked well for me so far, and I have found them to be testable, although slightly more work to test.</p>&#xA;"
65108,2,11831,"2008-09-15 17:52:07",21,NULL,"<p>There's three pretty good blog posts about Singletons by <a href=&quot;http://misko.hevery.com/about/&quot; rel=&quot;nofollow&quot;>Miško Hevery</a> in the Google Testing blog.</p>&#xA;&#xA;<ol>&#xA;  <li><a href=&quot;http://googletesting.blogspot.com/2008/08/by-miko-hevery-so-you-join-new-project.html&quot; rel=&quot;nofollow&quot;>Singletons are Pathological Liars</a></li>&#xA;  <li><a href=&quot;http://googletesting.blogspot.com/2008/08/where-have-all-singletons-gone.html&quot; rel=&quot;nofollow&quot;>Where Have All the Singletons Gone?</a></li>&#xA;  <li><a href=&quot;http://googletesting.blogspot.com/2008/08/root-cause-of-singletons.html&quot; rel=&quot;nofollow&quot;>Root Cause of Singletons</a></li>&#xA;</ol>&#xA;"
71189,2,11831,"2008-09-16 10:55:58",2,NULL,"<p>The biggest problem with singletons is that they make unit testing <em>hard</em>, particularly when you want to run your tests in parallel but independently.</p>&#xA;&#xA;<p>The second is that people often believe that lazy initialisation with double-checked locking is a good way to implement them.</p>&#xA;&#xA;<p>Finally, unless your singletons are immutable, then they can easily become a performance problem when you try and scale your application up to run in multiple threads on multiple processors. Contended synchronization is expensive in most environments.</p>&#xA;"
87053,2,11831,"2008-09-17 20:04:45",0,NULL,"<p>One scary thing on singletons in for instance Java is that you <em>can</em> end up with multiple instances of the same singleton in some cases.  The JVM uniquely identifies based on <em>two</em> elements:  A class' fully qualified name, and the classloader responsible for loading it.</p>&#xA;&#xA;<p>That means the same class can be loaded by two classloaders unaware of each other, and different parts of your application would have different instances of this singleton that they interact with.</p>&#xA;"
114400,2,11831,"2008-09-22 11:48:59",6,NULL,"<p>One of the colleagues I have worked with was very Singleton-minded. Whenever there was something that was kind of a manager or boss like object he would make that into a singleton, because he figured that there should be only one boss. And each time the system took up some new requirements, it turned out there were perfectly valid reasons to allow multiple instances. </p>&#xA;&#xA;<p>I would say that singleton should be used if the domain model dictates (not 'suggests') that there is one. All other cases are just accendentally single instances of a class.</p>&#xA;"
562473,2,11831,"2009-02-18 19:25:38",0,NULL,"<p>Write normal, testable, injectable objects and let Guice/Spring/whatever handle the instantiation. Seriously. </p>&#xA;&#xA;<p>This applies even in the case of caches or whatever the natural use cases for singletons are. <b>There's no need to repeat the horror of writing code to try to enforce one instance.</b> Let your dependency injection framework handle it. (I recommend Guice for a lightweight DI container if you're not already using one).</p>&#xA;"
562544,2,11831,"2009-02-18 19:49:34",2,NULL,"<p>Singleton as an implementation detail is fine. Singleton as an interface or as an access mechanism is a giant PITA.</p>&#xA;&#xA;<p>A static method that takes no parameters returning an instance of an object is only slightly different from just using a global variable. If instead an object has a reference to the singleton object passed in, either via constructor or other method, then it doesn't matter how the singleton is actually created and the whole pattern turns out not to matter.</p>&#xA;"
562550,2,11831,"2009-02-18 19:52:09",4,NULL,"<p>Many applications require that there is only one instance of some class, so the pattern of having only one instance of a class is useful. But there are variations to how the pattern is <em>implemented</em>.</p>&#xA;&#xA;<p>There is the <strong>static singleton</strong>, in which the class forces that there can only be one instance of the class per process (in Java actually one per ClassLoader). Another option is to <strong>create only one instance</strong>.</p>&#xA;&#xA;<p>Static singletons are <em>evil</em> - one sort of global variables. They make testing harder, because it's not possible to execute the tests in full isolation. You need complicated setup and tear down code for cleaning the system between every test, and it's very easy to forget to clean some global state properly, which in turn may result in unspecified behaviour in tests.</p>&#xA;&#xA;<p>Creating only one instance is <em>good</em>. You just create one instance when the programs starts, and then pass the pointer to that instance to all other objects which need it. Dependency injection frameworks make this easy - you just configure the scope of the object, and the DI framework will take care of creating the instance and passing it to all who need it. For example in Guice you would annotate the class with @Singleton, and the DI framework will create only one instance of the class (per application - you can have multiple applications running in the same JVM). This makes testing easy, because you can create a new instance of the class for each test, and let the garbage collector destroy the instance when it is no more used. No global state will leak from one test to another.</p>&#xA;&#xA;<p>For more information: &#xA;<a href=&quot;http://www.youtube.com/watch?v=-FRm3VPhseI&quot; rel=&quot;nofollow&quot;>The Clean Code Talks - &quot;Global State and Singletons&quot;</a></p>&#xA;"
562715,2,11831,"2009-02-18 20:36:06",-3,NULL,"<p>It seems to me that Singletons are considered bad only because it's hard to test them with current testing tools.  Perhaps that's a limitation of the current testing tools and not the pattern itself.</p>&#xA;&#xA;<p>Any good thing can be abused.  Most of the arguments I hear is that singletons are ssentially global variables.  They're not.</p>&#xA;&#xA;<p>What makes a global variable bad is that they are in scope despite being out of the visible scope, so it's way too easy to accidentally use them or accidentally not use them.  It's virtually impossible to &quot;accidentally&quot; use a singleton variable.  It's very format makes its use quite deliberate.</p>&#xA;&#xA;<p>There is certainly some argument that singletons can obscure the call graph, because it allows calling objects across layers, but you can achieve the same thing by passing an object down the graph via parameters.</p>&#xA;&#xA;<p>What's worse, the suggested &quot;fixes&quot; for singletons, such as singleton factories, don't change any of those problems, they just shuffle it around, and worse... they make it possible to instantiate multiple singletons.</p>&#xA;"
567544,2,11831,"2009-02-19 22:33:44",15,NULL,"<p>Singleton is <strong>not</strong> a horrible pattern, although it is <strong>misused</strong> a lot.  I think this misuse is because it is one of the easier patterns and most new to the singleton are attracted to the global side effect.</p>&#xA;&#xA;<p><a href=&quot;http://www.se-radio.net/podcast/2007-12/episode-81-interview-erich-gamma&quot;>Erich Gamma</a> had said the singleton is a pattern he wishes wasn't included in the GOF book and it's a bad design. I tend to disagree.</p>&#xA;&#xA;<p>If the pattern is used in order to create a single instance of an object at any given time  then the pattern is being used correctly.  If the singleton is used in order to give a global effect, it is being used incorrectly.</p>&#xA;&#xA;<p>Disadvantages:</p>&#xA;&#xA;<ul>&#xA;<li>You are coupling to one class throughout the code that calls the singleton&#xA;<ul>&#xA;<li>Creates a hassle with unit testing because it is difficult to replace the instance with a mock object</li>&#xA;<li>If the code needs to be refactored later on because of the need for more than one instance, it is more painful than if the singleton class were passed into the object (using an interface) that uses it</li>&#xA;</ul></li>&#xA;</ul>&#xA;&#xA;<p>Advantages:</p>&#xA;&#xA;<ul>&#xA;<li>One instance of a class is represented at any given point in time. &#xA;<ul>&#xA;<li>By design you are enforcing this</li>&#xA;</ul></li>&#xA;<li>Instance is created when it is needed</li>&#xA;<li>Global access is a side effect</li>&#xA;</ul>&#xA;"
1400915,2,11831,"2009-09-09 17:14:23",11,NULL,"<p>Chicks dig me because I rarely use singleton and when I do it's typically something unusual. No, seriously, I love the singleton pattern. You know why? Because:</p>&#xA;&#xA;<ol>&#xA;<li>I'm lazy.</li>&#xA;<li>Nothing can go wrong.</li>&#xA;</ol>&#xA;&#xA;<p>Sure, the &quot;experts&quot; will throw around a bunch of talk about &quot;unit testing&quot; and &quot;dependency injection&quot; but that's all a load of dingo's kidneys. You say the singleton is hard to unit test? No problem! Just declare everything public and turn your class into a fun house of global goodness. You remember the show Highlander from the 1990's? The singleton is kind of like that because: A. It can never die; and B. There can be only one. So stop listening to all those DI weenies and implement your singleton with abandon. Here are some more good reasons...</p>&#xA;&#xA;<ul>&#xA;<li>Everybody is doing it.</li>&#xA;<li>The singleton pattern makes you invincible.</li>&#xA;<li>Singleton rhymes with &quot;win&quot; (or &quot;fun&quot; depending on your accent).</li>&#xA;</ul>&#xA;"
1605151,2,11831,"2009-10-22 05:18:53",1,NULL,"<p>I'm reading a lot about &quot;Singleton&quot;, its problems, when to use it, etc., and these are my conclusions until now:</p>&#xA;&#xA;<ul>&#xA;<li><p>Confusion between the classic implementation of Singleton and the real requirement: TO HAVE JUST ONE INSTANCE OF a CLASS!</p></li>&#xA;<li><p>It's generally bad implemented. If you want a unique instance, don't use the (anti)pattern of using a static GetInstance() method returning a static object. This makes a class to be responsible for instantiating a single instance of itself and also perform logic. This breaks the <a href=&quot;http://en.wikipedia.org/wiki/Single%5Fresponsibility%5Fprinciple&quot; rel=&quot;nofollow&quot;>Single Responsibility Principle</a>. Instead, this should be implemented by a factory class with the responsibility of ensuring that only one instance exists.</p></li>&#xA;<li><p>It's used in constructors, because it's easy to use and must not be passed as a parameter. This should be resolved using <a href=&quot;http://en.wikipedia.org/wiki/Dependency%5Finjection&quot; rel=&quot;nofollow&quot;>dependency injection</a>, that is a great pattern to achieve a good and testable object model.</p></li>&#xA;<li><p>Not <a href=&quot;http://en.wikipedia.org/wiki/Test-driven%5Fdevelopment&quot; rel=&quot;nofollow&quot;>TDD</a>. If you do TDD, dependencies are extracted from the implementation because you want your tests to be easy to write. This makes your object model to be better. If you use TDD, you won't write a static GetInstance =). BTW, if you think in objects with clear responsibilities instead classes, you'll get the same effect =).</p></li>&#xA;</ul>&#xA;"
13475,2,13470,"2008-08-17 02:18:07",1,NULL,"<p>I don't think it has any purpose. But because RegEx is almost impossible to understand/decompose, people rarely point out errors. That is probably why no one else pointed it out. </p>&#xA;"
13483,2,13470,"2008-08-17 02:46:43",3,NULL,"<p>@<a href=&quot;http://stackoverflow.com/questions/13470/question-about-specific-regular-expression#13479&quot; rel=&quot;nofollow&quot;>Rob</a>: I disagree.  To enforce what you are asking for I think you would need to use negative-look-behind, which is possible but is certainly not related to use {1}.  Neither version of the regexp address that particular issue.</p>&#xA;&#xA;<p>To let the code speak:</p>&#xA;&#xA;<pre><code>tibook 0 /home/jj33/swap &gt; cat text&#xA;Text this is &lt;http://example.com&gt; text this is&#xA;Text this is &lt;http://http://example.com&gt; text this is&#xA;tibook 0 /home/jj33/swap &gt; cat p&#xA;#!/usr/bin/perl&#xA;&#xA;my $re1 = '((mailto\:|(news|(ht|f)tp(s?))\://){1}\S+)';&#xA;my $re2 = '((mailto\:|(news|(ht|f)tp(s?))\://)\S+)';&#xA;&#xA;while (&lt;&gt;) {&#xA;  print &quot;Evaluating: $_&quot;;&#xA;  print &quot;re1 saw \$1 = $1\n&quot; if (/$re1/);&#xA;  print &quot;re2 saw \$1 = $1\n&quot; if (/$re2/);&#xA;}&#xA;tibook 0 /home/jj33/swap &gt; cat text | perl p&#xA;Evaluating: Text this is &lt;http://example.com&gt; text this is&#xA;re1 saw $1 = &lt;http://example.com&gt;&#xA;re2 saw $1 = &lt;http://example.com&gt;&#xA;Evaluating: Text this is &lt;http://http://example.com&gt; text this is&#xA;re1 saw $1 = &lt;http://http://example.com&gt;&#xA;re2 saw $1 = &lt;http://http://example.com&gt;&#xA;tibook 0 /home/jj33/swap &gt;&#xA;</code></pre>&#xA;&#xA;<p>So, if there is a difference between the two versions, it's doesn't seem to be the one you suggest.</p>&#xA;"
13484,2,13470,"2008-08-17 02:56:56",1,NULL,"<p>@<a href=&quot;#13486&quot; rel=&quot;nofollow&quot;>Jeff Atwood</a>, your interpretation is a little off - the {1} means match exactly once, but has no effect on the &quot;capturing&quot; - the capturing occurs because of the parens - the braces only specify the number of times the pattern must match the source - once, as you say.</p>&#xA;&#xA;<p>I agree with @<a href=&quot;#13475&quot; rel=&quot;nofollow&quot;>Marius</a>, even if his answer is a little terse and may come off as being flippant. Regular expressions are tough, if one's not used to using them, and the {1} in the question isn't quite error - in systems that support it, it does mean &quot;exactly one match&quot;. In this sense, it doesn't really do anything.</p>&#xA;&#xA;<p>Unfortunately, contrary to a now-deleted post, it doesn't keep the regexp from matching <code>http://<a href=&quot;http://example.org&quot; rel=&quot;nofollow&quot;>http://example.org</a></code>, since the \S+ at the end will match one or more non-whitespace characters, including the <code>http://example.org</code> in <code>http://<a href=&quot;http://example.org&quot; rel=&quot;nofollow&quot;>http://example.org</a></code> (verified using Python 2.5, just in case my regexp reading was off). So, the regexp given isn't really the best. I'm not a URL expert, but probably something limiting the appearance of &quot;:&quot;s and &quot;//&quot;s after the first one would be necessary (but hardly sufficient) to ensure good URLs.</p>&#xA;"
13486,2,13470,"2008-08-17 02:58:18",2,NULL,"<p>I don't think the {1} has any valid function in that regex. </p>&#xA;&#xA;<blockquote>&#xA;  <p><strong>(</strong>mailto\:|(news|(ht|f)tp(s?))\://<strong>){1}</strong></p>&#xA;</blockquote>&#xA;&#xA;<p>You should read this as: &quot;capture the stuff in the parens exactly one time&quot;. But we don't really care about capturing this for use later, eg $1 in the replacement. So it's pointless.</p>&#xA;"
15512,2,15496,"2008-08-19 01:51:22",37,NULL,"<p>Language-level <strong>assert</strong> keyword.</p>&#xA;"
15533,2,15496,"2008-08-19 02:03:54",17,NULL,"<p>I really like the rewritten Threading API from Java 1.6. Callables are great. They are basically threads with a return value.</p>&#xA;"
15538,2,15496,"2008-08-19 02:06:42",25,NULL,"<p>static imports to &quot;enhance&quot; the language, so you can do nice literal things in type safe ways: </p>&#xA;&#xA;<pre><code>List&lt;String&gt; ls = List(&quot;a&quot;, &quot;b&quot;, &quot;c&quot;);&#xA;</code></pre>&#xA;&#xA;<p>(can also do with maps, arrays, sets). </p>&#xA;&#xA;<p><a href=&quot;http://gleichmann.wordpress.com/2008/01/13/building-your-own-literals-in-java-lists-and-arrays/&quot; rel=&quot;nofollow&quot;>http://gleichmann.wordpress.com/2008/01/13/building-your-own-literals-in-java-lists-and-arrays/</a></p>&#xA;&#xA;<p>Taking it further: </p>&#xA;&#xA;<pre><code>List&lt;Map&lt;String, String&gt;&gt; data = List(Map( o(&quot;name&quot;, &quot;michael&quot;), o(&quot;sex&quot;, &quot;male&quot;)));&#xA;</code></pre>&#xA;"
16528,2,15496,"2008-08-19 16:47:36",62,NULL,"<p>I think another &quot;overlooked&quot; feature of java is the JVM itself. It is probably the best VM available. And it supports lots of interesting and useful languages (Jython, JRuby, Scala, Groovy). All those languages can easily and seamlessly cooperate.</p>&#xA;&#xA;<p>If you design a new language (like in the scala-case) you immediately have all the existing libraries available and your language is therefore &quot;useful&quot; from the very beginning.</p>&#xA;&#xA;<p>All those languages make use of the HotSpot optimizations. The VM is very well monitor and debuggable. </p>&#xA;"
16838,2,15496,"2008-08-19 20:09:17",432,NULL,"<p><a href=&quot;http://www.c2.com/cgi/wiki?DoubleBraceInitialization&quot; rel=&quot;nofollow&quot;>Double Brace Initialization</a> took me by surprise a few months ago when I first discovered it, never heard of it before.</p>&#xA;&#xA;<p><a href=&quot;http://docs.oracle.com/javase/6/docs/api/java/lang/ThreadLocal.html&quot; rel=&quot;nofollow&quot;>ThreadLocals</a> are typically not so widely known as a way to store per-thread state.</p>&#xA;&#xA;<p>Since JDK 1.5 Java has had extremely well implemented and robust concurrency tools beyond just locks, they live in <a href=&quot;http://docs.oracle.com/javase/6/docs/api/java/util/concurrent/package-summary.html&quot; rel=&quot;nofollow&quot;>java.util.concurrent</a> and a specifically interesting example is the <a href=&quot;http://docs.oracle.com/javase/6/docs/api/java/util/concurrent/atomic/package-summary.html&quot; rel=&quot;nofollow&quot;>java.util.concurrent.atomic</a> subpackage that contains thread-safe primitives that implement the <a href=&quot;http://www.ibm.com/developerworks/java/library/j-jtp11234/&quot; rel=&quot;nofollow&quot;>compare-and-swap</a> operation and can map to actual native hardware-supported versions of these operations.</p>&#xA;"
17702,2,15496,"2008-08-20 10:07:44",15,NULL,"<p>Not really a feature, but it makes me chuckle that <strong><code>goto</code></strong> is a reserved word that does nothing except prompting javac to poke you in the eye.  Just to remind you that you are in OO-land now.</p>&#xA;"
17769,2,15496,"2008-08-20 11:30:50",23,NULL,"<p>As a starter I really appreciate the JConsole monitoring software in Java 6, it has solved a couple of problems for me already and I keep on finding new uses for it.</p>&#xA;&#xA;<p>Apparently the JConsole was there already in Java 5 but I reckon it is improved now and at least working much more stable as of now.</p>&#xA;&#xA;<p>JConsole in Java 5:&#xA;<a href=&quot;http://java.sun.com/developer/technicalArticles/J2SE/jconsole.html&quot; rel=&quot;nofollow&quot; title=&quot;Jconsole in Java 5&quot;>JConsole in Java 5</a></p>&#xA;&#xA;<p>JConsole in Java 6:&#xA;<a href=&quot;http://java.sun.com/developer/technicalArticles/J2SE/monitoring/&quot; rel=&quot;nofollow&quot; title=&quot;JConsole in Java 6&quot;>JConsole in Java 6</a></p>&#xA;&#xA;<p>And while you are at it, have a good look at the other tools in the series:&#xA;<a href=&quot;http://java.sun.com/javase/6/docs/technotes/tools/index.html#troubleshoot&quot; rel=&quot;nofollow&quot; title=&quot;Java 6 troubleshooting tools&quot;>Java 6 troubleshooting tools</a></p>&#xA;"
35084,2,15496,"2008-08-29 19:17:47",12,NULL,"<p>It's not exactly hidden, but reflection is incredibly useful and powerful.  It is great to use a simple Class.forName(&quot;...&quot;).newInstance() where the class type is configurable.  It's easy to write this sort of factory implementation.  </p>&#xA;"
35108,2,15496,"2008-08-29 19:29:41",144,NULL,"<p>How about <strong>covariant return types</strong> which have been in place since JDK 1.5?  It is pretty poorly publicised, as it is an unsexy addition, but as I understand it, is absolutely necessary for generics to work.  </p>&#xA;&#xA;<p>Essentially, the compiler now allows a subclass to narrow the return type of an overridden method to be a subclass of the original method's return type.  So this is allowed:</p>&#xA;&#xA;<pre><code>class Souper {&#xA;    Collection&lt;String&gt; values() {&#xA;        ...&#xA;    }&#xA;}&#xA;&#xA;class ThreadSafeSortedSub extends Souper {&#xA;    @Override&#xA;    ConcurrentSkipListSet&lt;String&gt; values() {&#xA;        ...&#xA;    }&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>You can call the subclass's <code>values</code> method and obtain a sorted thread safe <code>Set</code> of <code>String</code>s <strong>without having to down cast</strong> to the <code>ConcurrentSkipListSet</code>.</p>&#xA;"
35124,2,15496,"2008-08-29 19:36:48",4,NULL,"<p>Functors are pretty cool. They are pretty close to a function pointer, which everyone is usually quick to say is impossible in Java.</p>&#xA;&#xA;<p><a href=&quot;http://chaoticjava.com/posts/functors-in-java-and-beyond/&quot; rel=&quot;nofollow&quot;>Functors in Java</a></p>&#xA;"
39433,2,15496,"2008-09-02 12:57:04",156,NULL,"<p>For most people I interview for Java developer positions labeled blocks are very surprising. Here is an example:</p>&#xA;&#xA;<pre><code>// code goes here&#xA;&#xA;getmeout:{&#xA;    for (int i = 0; i &lt; N; ++i) {&#xA;        for (int j = i; j &lt; N; ++j) {&#xA;            for (int k = j; k &lt; N; ++k) {&#xA;                //do something here&#xA;                break getmeout;&#xA;            }&#xA;        }&#xA;    }&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>Who said <code>goto</code> in java is just a keyword? :)</p>&#xA;"
40967,2,15496,"2008-09-03 00:33:17",13,NULL,"<p>I was aware that Java 6 included scripting support, but I just recently discovered <a href=&quot;http://java.sun.com/javase/6/docs/technotes/tools/share/jrunscript.html&quot; rel=&quot;nofollow&quot;>jrunscript</a>, &#xA;which can interpret and run JavaScript (and, one presumes, other scripting languages such as Groovy) interactively, sort of like the Python shell or irb in Ruby</p>&#xA;"
41023,2,15496,"2008-09-03 01:29:40",88,NULL,"<p><a href=&quot;http://docs.oracle.com/javase/7/docs/technotes/guides/reflection/proxy.html&quot; rel=&quot;nofollow&quot;>Dynamic proxies</a> (added in 1.3) allow you to define a new type at runtime that conforms to an interface.  It's come in handy a surprising number of times.</p>&#xA;"
42686,2,15496,"2008-09-03 21:51:46",279,NULL,"<p>Joint union in type parameter variance:</p>&#xA;&#xA;<pre><code>public class Baz&lt;T extends Foo &amp; Bar&gt; {}&#xA;</code></pre>&#xA;&#xA;<p>For example, if you wanted to take a parameter that's both Comparable and a Collection:</p>&#xA;&#xA;<pre><code>public static &lt;A, B extends Collection&lt;A&gt; &amp; Comparable&lt;B&gt;&gt;&#xA;boolean foo(B b1, B b2, A a) {&#xA;   return (b1.compareTo(b2) == 0) || b1.contains(a) || b2.contains(a);&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>This contrived method returns true if the two given collections are equal or if either one of them contains the given element, otherwise false. The point to notice is that you can invoke methods of both Comparable and Collection on the arguments b1 and b2.</p>&#xA;"
44054,2,15496,"2008-09-04 15:55:04",12,NULL,"<p>I know this was added in release 1.5 but the new <em>enum type</em> is a great feature.  Not having to use the old &quot;int enum pattern&quot; has greatly helped a bunch of my code.  <a href=&quot;http://java.sun.com/docs/books/jls/third_edition/html/classes.html#8.9&quot; rel=&quot;nofollow&quot;>Check out JLS 8.9</a> for the sweet gravy on your potatoes!</p>&#xA;"
47347,2,15496,"2008-09-06 09:07:16",11,NULL,"<p><strong>final for instance variables:</strong> </p>&#xA;&#xA;<p>Really useful for multi-threading code and it makes it a lot easier to argue about the instance state and correctness. Haven't seen it a lot in industry context and often not thought in java classes.</p>&#xA;&#xA;<p><hr /></p>&#xA;&#xA;<p><strong>static {something;}:</strong> </p>&#xA;&#xA;<p>Used to initialize static members (also I prefer a static method to do it (because it has a name). Not thought.</p>&#xA;"
47493,2,15496,"2008-09-06 14:27:51",220,NULL,"<p>I was surprised by instance initializers the other day.  I was deleting some code-folded methods and ended up creating multiple instance initializers :</p>&#xA;&#xA;<pre><code>public class App {&#xA;    public App(String name) { System.out.println(name + &quot;'s constructor called&quot;); }&#xA;&#xA;    static { System.out.println(&quot;static initializer called&quot;); }&#xA;&#xA;    { System.out.println(&quot;instance initializer called&quot;); }&#xA;&#xA;    static { System.out.println(&quot;static initializer2 called&quot;); }&#xA;&#xA;    { System.out.println(&quot;instance initializer2 called&quot;); }&#xA;&#xA;    public static void main( String[] args ) {&#xA;        new App(&quot;one&quot;);&#xA;        new App(&quot;two&quot;);&#xA;  }&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>Executing the <code>main</code> method will display: </p>&#xA;&#xA;<pre><code>static initializer called&#xA;static initializer2 called&#xA;instance initializer called&#xA;instance initializer2 called&#xA;one's constructor called&#xA;instance initializer called&#xA;instance initializer2 called&#xA;two's constructor called&#xA;</code></pre>&#xA;&#xA;<p>I guess these would be useful if you had multiple constructors and needed common code</p>&#xA;&#xA;<p>They also provide syntactic sugar for initializing your classes:</p>&#xA;&#xA;<pre><code>List&lt;Integer&gt; numbers = new ArrayList&lt;Integer&gt;(){{ add(1); add(2); }};&#xA;&#xA;Map&lt;String,String&gt; codes = new HashMap&lt;String,String&gt;(){{ &#xA;  put(&quot;1&quot;,&quot;one&quot;); &#xA;  put(&quot;2&quot;,&quot;two&quot;);&#xA;}};&#xA;</code></pre>&#xA;"
49701,2,15496,"2008-09-08 13:24:58",6,NULL,"<p>Joshua Bloch's new <a href=&quot;http://rads.stackoverflow.com/amzn/click/0321356683&quot; rel=&quot;nofollow&quot;>Effective Java</a> is a good resource.</p>&#xA;"
50107,2,15496,"2008-09-08 16:38:47",5,NULL,"<ul>&#xA;<li><a href=&quot;http://www.unix.com.ua/orelly/java-ent/jnut/ch03_11.htm&quot;>Local classes</a>.</li>&#xA;<li><a href=&quot;http://virtualinfinity.net/wordpress/java/esoteric-java-features/2007/01/09/6/&quot;>Instantiating Java inner-classes from outside of the containing class</a>.</li>&#xA;</ul>&#xA;"
52914,2,15496,"2008-09-09 21:10:31",134,NULL,"<p>Allowing methods and constructors in enums surprised me. For example:</p>&#xA;&#xA;<pre><code>enum Cats {&#xA;  FELIX(2), SHEEBA(3), RUFUS(7);&#xA;&#xA;  private int mAge;&#xA;  Cats(int age) {&#xA;    mAge = age;&#xA;  }&#xA;  public int getAge() {&#xA;    return mAge;&#xA;   }&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>You can even have a &quot;constant specific class body&quot; which allows a specific enum value to override methods.</p>&#xA;&#xA;<p>More documentation <a href=&quot;http://java.sun.com/j2se/1.5.0/docs/guide/language/enums.html&quot; rel=&quot;nofollow&quot;>here</a>.</p>&#xA;"
54762,2,15496,"2008-09-10 17:20:12",37,NULL,"<p>Not really part of the Java language, but the javap disassembler which comes with Sun's JDK is not widely known or used.</p>&#xA;"
55616,2,15496,"2008-09-11 01:15:19",201,NULL,"<p>JDK 1.6_07+ contains an app called VisualVM (bin/jvisualvm.exe) that is a nice GUI on top of many of the tools.  It seems more comprehensive than JConsole.</p>&#xA;"
55679,2,15496,"2008-09-11 02:09:13",121,NULL,"<p>The type params for generic methods can be specified explicitly like so:</p>&#xA;&#xA;<pre><code>Collections.&lt;String,Integer&gt;emptyMap()&#xA;</code></pre>&#xA;"
64136,2,15496,"2008-09-15 15:50:34",19,NULL,"<p>It took them long enough to add support for this,</p>&#xA;&#xA;<p><a href=&quot;http://java.sun.com/docs/books/tutorial/uiswing/misc/systemtray.html&quot; rel=&quot;nofollow&quot;>System Tray</a></p>&#xA;"
64164,2,15496,"2008-09-15 15:55:15",56,NULL,"<p>The <a href=&quot;http://java.sun.com/j2se/1.5.0/docs/api/java/util/Arrays.html#asList(T...)&quot; rel=&quot;nofollow&quot;>asList</a> method in <code>java.util.Arrays</code> allows a nice combination of varargs, generic methods and autoboxing:</p>&#xA;&#xA;<pre><code>List&lt;Integer&gt; ints = Arrays.asList(1,2,3);&#xA;</code></pre>&#xA;"
64274,2,15496,"2008-09-15 16:08:03",6,NULL,"<p>Some control-flow tricks, <code>finally</code> around a <code>return</code> statement:</p>&#xA;&#xA;<pre><code>int getCount() { &#xA;  try { return 1; }&#xA;  finally { System.out.println(&quot;Bye!&quot;); }&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>The rules for <a href=&quot;http://java.sun.com/docs/books/jls/third_edition/html/defAssign.html&quot; rel=&quot;nofollow&quot;>definite assignment</a> will check that a final variable is always assigned through a simple control-flow analysis:</p>&#xA;&#xA;<pre><code>final int foo;&#xA;if(...)&#xA;  foo = 1;&#xA;else&#xA;  throw new Exception();&#xA;foo+1;&#xA;</code></pre>&#xA;"
64369,2,15496,"2008-09-15 16:19:57",7,NULL,"<p>JVisualVM from the bin directory in the JDK distribution. Monitoring and even profiling any java application, even one you didn't launch with any special parameters. Only in recent versions of the Java 6SE JDK.</p>&#xA;"
64618,2,15496,"2008-09-15 16:49:52",142,NULL,"<p>Transfer of control in a finally block throws away any exception.  The following code does not throw RuntimeException -- it is lost.</p>&#xA;&#xA;<pre><code>public static void doSomething() {&#xA;    try {&#xA;      //Normally you would have code that doesn't explicitly appear &#xA;      //to throw exceptions so it would be harder to see the problem.&#xA;      throw new RuntimeException();&#xA;    } finally {&#xA;      return;&#xA;    }&#xA;  }&#xA;</code></pre>&#xA;&#xA;<p>From <a href=&quot;http://jamesjava.blogspot.com/2006/03/dont-return-in-finally-clause.html&quot; rel=&quot;nofollow&quot;>http://jamesjava.blogspot.com/2006/03/dont-return-in-finally-clause.html</a></p>&#xA;"
75519,2,15496,"2008-09-16 18:35:19",36,NULL,"<p>The addition of the for-each loop construct in 1.5.  I &lt;3 it.</p>&#xA;&#xA;<pre><code>// For each Object, instantiated as foo, in myCollection&#xA;for(Object foo: myCollection) {&#xA;  System.out.println(foo.toString());&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>And can be used in nested instances:</p>&#xA;&#xA;<pre><code>for (Suit suit : suits)&#xA;  for (Rank rank : ranks)&#xA;    sortedDeck.add(new Card(suit, rank));&#xA;</code></pre>&#xA;&#xA;<p>The for-each construct is also applicable to arrays, where it hides the index variable rather than the iterator. The following method returns the sum of the values in an int array: </p>&#xA;&#xA;<pre><code>// Returns the sum of the elements of a&#xA;int sum(int[] a) {&#xA;  int result = 0;&#xA;  for (int i : a)&#xA;    result += i;&#xA;  return result;&#xA;}&#xA;</code></pre>&#xA;&#xA;<p><a href=&quot;http://java.sun.com/j2se/1.5.0/docs/guide/language/foreach.html&quot; rel=&quot;nofollow&quot;>Link to the Sun documentation</a></p>&#xA;"
76317,2,15496,"2008-09-16 20:02:00",10,NULL,"<p>&quot;const&quot; is a keyword, but you can't use it.</p>&#xA;&#xA;<pre><code>int const = 1;   // &quot;not a statement&quot;&#xA;const int i = 1; // &quot;illegal start of expression&quot;&#xA;</code></pre>&#xA;&#xA;<p>I guess the compiler writers thought it might be used in the future and they'd better keep it reserved.</p>&#xA;"
82236,2,15496,"2008-09-17 11:39:29",52,NULL,"<p>Not really a feature, but an amusing trick I discovered recently in some Web page:</p>&#xA;&#xA;<pre><code>class Example&#xA;{&#xA;  public static void main(String[] args)&#xA;  {&#xA;    System.out.println(&quot;Hello World!&quot;);&#xA;    http://Phi.Lho.free.fr&#xA;&#xA;    System.exit(0);&#xA;  }&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>is a valid Java program (although it generates a warning).&#xA;If you don't see why, see Gregory's answer! ;-) Well, syntax highlighting here also gives a hint!</p>&#xA;"
83113,2,15496,"2008-09-17 13:23:07",93,NULL,"<p>My favorite: dump all thread stack traces to standard out.</p>&#xA;&#xA;<p>windows: <kbd>CTRL</kbd>-<kbd>Break</kbd> in your java cmd/console window</p>&#xA;&#xA;<p>unix:  <code>kill -3 PID</code></p>&#xA;"
85703,2,15496,"2008-09-17 17:38:00",7,NULL,"<p>The power you can have over the garbage collector and how it manages object collection is very powerful, especially for long-running and time-sensitive applications. It starts with weak, soft, and phantom references in the java.lang.ref package. Take a look at those, especially for building caches (there is a java.util.WeakHashMap already). Now dig a little deeper into the ReferenceQueue and you'll start having even more control. Finally grab the docs on the garbage collector itself and you'll be able to control how often it runs, sizes of different collection areas, and the types of algorithms used (for Java 5 see <a href=&quot;http://java.sun.com/docs/hotspot/gc5.0/gc_tuning_5.html&quot; rel=&quot;nofollow&quot;>http://java.sun.com/docs/hotspot/gc5.0/gc_tuning_5.html</a>). </p>&#xA;"
101659,2,15496,"2008-09-19 13:02:50",53,NULL,"<p>Using <strong>this</strong> keyword for accessing fields/methods of containing class from an inner class. In below, rather contrived example, we want to use sortAscending field of container class from the anonymous inner class. Using ContainerClass.this.sortAscending instead of this.sortAscending does the trick.</p>&#xA;&#xA;<pre><code>import java.util.Comparator;&#xA;&#xA;public class ContainerClass {&#xA;boolean sortAscending;&#xA;public Comparator createComparator(final boolean sortAscending){&#xA;	Comparator comparator = new Comparator&lt;Integer&gt;() {&#xA;&#xA;		public int compare(Integer o1, Integer o2) {&#xA;			if (sortAscending || ContainerClass.this.sortAscending) {&#xA;				return o1 - o2;&#xA;			} else {&#xA;				return o2 - o1;&#xA;			}&#xA;		}&#xA;&#xA;	};&#xA;	return comparator;&#xA;}&#xA;}&#xA;</code></pre>&#xA;"
101851,2,15496,"2008-09-19 13:35:12",46,NULL,"<p>This is not exactly &quot;hidden features&quot; and not very useful, but can be extremely interesting in some cases:<br>&#xA;Class sun.misc.Unsafe - will allow you to implement <em>direct memory management</em> in Java (you can even write self-modifying Java code with this if you try a lot):</p>&#xA;&#xA;<pre><code>public class UnsafeUtil {&#xA;&#xA;    public static Unsafe unsafe;&#xA;    private static long fieldOffset;&#xA;    private static UnsafeUtil instance = new UnsafeUtil();&#xA;&#xA;    private Object obj;&#xA;&#xA;    static {&#xA;    	try {&#xA;    		Field f = Unsafe.class.getDeclaredField(&quot;theUnsafe&quot;);&#xA;    		f.setAccessible(true);&#xA;&#xA;    		unsafe = (Unsafe)f.get(null);&#xA;    		fieldOffset = unsafe.objectFieldOffset(UnsafeUtil.class.getDeclaredField(&quot;obj&quot;));&#xA;    	} catch (Exception e) {&#xA;    		throw new RuntimeException(e);&#xA;    	}&#xA;    };&#xA;}&#xA;</code></pre>&#xA;"
129378,2,15496,"2008-09-24 19:37:07",9,NULL,"<p>How about Properties files in your choice of encodings?  Used to be, when you loaded your Properties, you provided an InputStream and the <code>load()</code> method decoded it as ISO-8859-1.  You <em>could</em> actually store the file in some other encoding, but you had to use a disgusting hack like this after loading to properly decode the data: </p>&#xA;&#xA;<pre><code>String realProp = new String(prop.getBytes(&quot;ISO-8859-1&quot;), &quot;UTF-8&quot;);&#xA;</code></pre>&#xA;&#xA;<p>But, as of JDK 1.6, there's a <code>load()</code> method that takes a Reader instead of an InputStream, which means you can use the correct encoding from the beginning (there's also a <code>store()</code> method that takes a Writer).  This seems like a pretty big deal to me, but it appears to have been snuck into the JDK with no fanfare at all.  I only stumbled upon it a few weeks ago, and a quick Google search turned up just one passing mention of it.</p>&#xA;"
137600,2,15496,"2008-09-26 03:30:29",26,NULL,"<p>If you do a lot of JavaBean development and work with property change support, you generally wind up writing a <em>lot</em> of setters like this:</p>&#xA;&#xA;<pre><code>public void setFoo(Foo aFoo){&#xA;  Foo old = this.foo;&#xA;  this.foo = aFoo;&#xA;  changeSupport.firePropertyChange(&quot;foo&quot;, old, aFoo);&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>I recently stumbled across a blog that suggested a more terse implementation of this that makes the code a lot easier to write:</p>&#xA;&#xA;<pre><code>public void setFoo(Foo aFoo){&#xA;  changeSupport.firePropertyChange(&quot;foo&quot;, this.foo, this.foo = aFoo);&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>It actually simplified things to the point where I was able to adjust the setter template in Eclipse so the method gets created automatically.</p>&#xA;"
139379,2,15496,"2008-09-26 13:06:24",5,NULL,"<p><strong>String Parameterised Class Factory.</strong></p>&#xA;&#xA;<pre><code>Class.forName( className ).newInstance();&#xA;</code></pre>&#xA;&#xA;<p><strong>Load a resource (property file, xml, xslt, image etc) from deployment jar file</strong>.</p>&#xA;&#xA;<pre><code>this.getClass().getClassLoader().getResourceAsStream( ... ) ;&#xA;</code></pre>&#xA;"
142676,2,15496,"2008-09-27 01:11:17",9,NULL,"<p>Something that really surprised me was the custom serialization mechanism.</p>&#xA;&#xA;<p>While these methods are <strong>private!!</strong>, they are &quot;<em>mysteriously</em>&quot; called by the JVM during object serialization.</p>&#xA;&#xA;<pre><code>private void writeObject(ObjectOutputStream out) throws IOException;&#xA;private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException;&#xA;</code></pre>&#xA;&#xA;<p>This way you can create your own custom serialization to make it more &quot;whatever&quot; (safe, fast, rare, easy etc. ) </p>&#xA;&#xA;<p>This is something that really should be considering if a lot of information has to be passed through nodes. The serialization mechanism may be changed to send the half of data.  There are many times when the bottlenecks are not in the platform, but in the amount of that sent trough the wire, may save you thousands of dlls in hardware.</p>&#xA;&#xA;<p>Here is an article.&#xA;<a href=&quot;http://java.sun.com/developer/technicalArticles/Programming/serialization/&quot; rel=&quot;nofollow&quot;>http://java.sun.com/developer/technicalArticles/Programming/serialization/</a></p>&#xA;"
146121,2,15496,"2008-09-28 15:45:23",20,NULL,"<p>You can declare a class in a method:</p>&#xA;&#xA;<pre><code>public Foo foo(String in) {&#xA;    class FooFormat extends Format {&#xA;        public Object parse(String s, ParsePosition pp) { // parse stuff }&#xA;    }&#xA;    return (Foo) new FooFormat().parse(in);&#xA;&#xA;}&#xA;</code></pre>&#xA;"
169064,2,15496,"2008-10-03 21:59:38",82,NULL,"<p><strong>final initialization can be postponed.</strong></p>&#xA;&#xA;<p>It makes sure that even with a complex flow of logic return values are always set.  It's too easy to miss a case and return null by accident.  It doesn't make returning null impossible, just obvious that it's on purpose:</p>&#xA;&#xA;<pre><code>public Object getElementAt(int index) {&#xA;    final Object element;&#xA;    if (index == 0) {&#xA;         element = &quot;Result 1&quot;;&#xA;    } else if (index == 1) {&#xA;         element = &quot;Result 2&quot;;&#xA;    } else {&#xA;         element = &quot;Result 3&quot;;&#xA;    }&#xA;    return element;&#xA;}&#xA;</code></pre>&#xA;"
175511,2,15496,"2008-10-06 18:14:52",23,NULL,"<p>Java processing does a neat trick on variable definition if you do not use a default initializer.</p>&#xA;&#xA;<pre>&#xA;{&#xA;   int x;&#xA;&#xA;   if(whatever)&#xA;      x=1;&#xA;&#xA;   if(x == 1)&#xA;      ...&#xA;}&#xA;</pre>&#xA;&#xA;<p>This will give you an error at compile time that you have a path where X isn't properly defined.  This has helped me a few times, and I've taken to considering default initialization like these:</p>&#xA;&#xA;<pre>&#xA;int x=0;&#xA;String s=null;&#xA;</pre>&#xA;&#xA;<p>to be a bad pattern since it blocks this helpful checking.</p>&#xA;&#xA;<p>That said, sometimes it's difficult to get around--I have had to go back and edit in the =null when it made sense as a default, but I never put it in on the first pass any more.</p>&#xA;"
229899,2,15496,"2008-10-23 14:18:17",7,NULL,"<p>You can access final local variables and parameters in initialization blocks and methods of local classes. Consider this:</p>&#xA;&#xA;<pre><code>    final String foo = &quot;42&quot;;&#xA;    new Thread() {&#xA;        public void run() {&#xA;             dowhatever(foo);&#xA;        }&#xA;    }.start();&#xA;</code></pre>&#xA;&#xA;<p>A bit like a closure, isn't it?</p>&#xA;"
238827,2,15496,"2008-10-27 00:03:40",27,NULL,"<p>The value of:</p>&#xA;&#xA;<pre><code>new URL(&quot;http://www.yahoo.com&quot;).equals(new URL(&quot;http://209.191.93.52&quot;))&#xA;</code></pre>&#xA;&#xA;<p>is <code>true</code>.</p>&#xA;&#xA;<p>(From Java Puzzlers)</p>&#xA;"
238837,2,15496,"2008-10-27 00:12:45",89,NULL,"<p>A couple of people have posted about instance initializers, here's a good use for it:</p>&#xA;&#xA;<pre><code>Map map = new HashMap() {{&#xA;    put(&quot;a key&quot;, &quot;a value&quot;);&#xA;    put(&quot;another key&quot;, &quot;another value&quot;);&#xA;}};&#xA;</code></pre>&#xA;&#xA;<p>Is a quick way to initialize maps if you're just doing something quick and simple.</p>&#xA;&#xA;<p>Or using it to  create a   quick swing frame prototype:</p>&#xA;&#xA;<pre><code>JFrame frame = new JFrame();&#xA;&#xA;JPanel panel = new JPanel(); &#xA;&#xA;panel.add( new JLabel(&quot;Hey there&quot;){{ &#xA;    setBackground(Color.black);&#xA;    setForeground( Color.white);&#xA;}});&#xA;&#xA;panel.add( new JButton(&quot;Ok&quot;){{&#xA;    addActionListener( new ActionListener(){&#xA;        public void actionPerformed( ActionEvent ae ){&#xA;            System.out.println(&quot;Button pushed&quot;);&#xA;        }&#xA;     });&#xA; }});&#xA;&#xA;&#xA; frame.add( panel );&#xA;</code></pre>&#xA;&#xA;<p>Of course it can be abused:</p>&#xA;&#xA;<pre><code>    JFrame frame = new JFrame(){{&#xA;         add( new JPanel(){{&#xA;               add( new JLabel(&quot;Hey there&quot;){{ &#xA;                    setBackground(Color.black);&#xA;                    setForeground( Color.white);&#xA;                }});&#xA;&#xA;                add( new JButton(&quot;Ok&quot;){{&#xA;                    addActionListener( new ActionListener(){&#xA;                        public void actionPerformed( ActionEvent ae ){&#xA;                            System.out.println(&quot;Button pushed&quot;);&#xA;                        }&#xA;                     });&#xA;                 }});&#xA;        }});&#xA;    }};&#xA;</code></pre>&#xA;"
259287,2,15496,"2008-11-03 17:02:46",104,NULL,"<p>As of Java 1.5, Java now has a much cleaner syntax for writing functions of variable arity. So, instead of just passing an array, now you can do the following</p>&#xA;&#xA;<pre><code>public void foo(String... bars) {&#xA;   for (String bar: bars)&#xA;      System.out.println(bar);&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>bars is automatically converted to array of the specified type. Not a huge win, but a win nonetheless.</p>&#xA;"
284614,2,15496,"2008-11-12 16:59:39",15,NULL,"<p>Javadoc - when written properly (not always the case with some developers unfortunately), it gives you a clear, coherent description of what code is supposed to do, as opposed to what it actually does. It can then be turned into a nice browsable set of HTML documentation. If you use continuous integration etc it can be generated regularly so all developers can see the latest updates.</p>&#xA;"
306721,2,15496,"2008-11-20 20:19:01",4,NULL,"<p><a href=&quot;http://en.wikipedia.org/wiki/SwingWorker&quot; rel=&quot;nofollow&quot;>SwingWorker</a> for easily managing user interface callbacks from background threads.</p>&#xA;"
321782,2,15496,"2008-11-26 19:04:22",6,NULL,"<p>Instances of the same class can access private members of other instances:</p>&#xA;&#xA;<pre><code>class Thing {&#xA;  private int x;&#xA;&#xA;  public int addThings(Thing t2) {&#xA;    return this.x + t2.x;  // Can access t2's private value!&#xA;  }&#xA;}&#xA;</code></pre>&#xA;"
336346,2,15496,"2008-12-03 06:21:29",4,NULL,"<p>Apparently with some debug builds there is an option which dumps the native (JIT) assembly code from HotSpot: <a href=&quot;http://weblogs.java.net/blog/kohsuke/archive/2008/03/deep_dive_into.html&quot; rel=&quot;nofollow&quot;>http://weblogs.java.net/blog/kohsuke/archive/2008/03/deep_dive_into.html</a></p>&#xA;&#xA;<p>Unfortunately I wasn't able to find the build via the link in that post, if anyone can find a more precise URL, I'd love to play with it.</p>&#xA;"
341823,2,15496,"2008-12-04 19:51:57",38,NULL,"<p>My vote goes to <strong>java.util.concurrent</strong> with its concurrent collections and flexible executors allowing among others thread pools, scheduled tasks and coordinated tasks. The DelayQueue is my personal favorite, where elements are made available after a specified delay.</p>&#xA;&#xA;<p>java.util.Timer and TimerTask may safely be put to rest.</p>&#xA;&#xA;<p>Also, not exactly hidden but in a different package from the other classes related to date and time. java.util.concurrent.TimeUnit is useful when converting between nanoseconds, microseconds, milliseconds and seconds.</p>&#xA;&#xA;<p>It reads a lot better than the usual someValue * 1000 or someValue / 1000.</p>&#xA;"
404567,2,15496,"2009-01-01 05:19:38",14,NULL,"<p>The strictfp keyword. (I never saw it used in a real application though :)</p>&#xA;&#xA;<p>You can get the class for primitive types by using the following notation: int.class, &#xA;float.class, etc. Very useful when doing reflection.</p>&#xA;&#xA;<p>Final arrays can be used to &quot;return&quot; values from anonymous inner classes (warning, useless example below):</p>&#xA;&#xA;<pre><code>final boolean[] result = new boolean[1];&#xA;SwingUtilities.invokeAndWait(new Runnable() {&#xA;  public void run() { result[0] = true; }&#xA;});&#xA;</code></pre>&#xA;"
492663,2,15496,"2009-01-29 17:44:43",1,NULL,"<p>I enjoyed</p>&#xA;&#xA;<ol>&#xA;<li><a href=&quot;http://java.sun.com/javase/6/docs/technotes/guides/javadoc/&quot; rel=&quot;nofollow&quot;>javadoc</a>'s taglet and doclet that enable us to customize javadoc output.</li>&#xA;<li><a href=&quot;http://java.sun.com/javase/6/docs/technotes/tools/&quot; rel=&quot;nofollow&quot;>JDK tools</a>: jstat, jstack etc.</li>&#xA;</ol>&#xA;"
511975,2,15496,"2009-02-04 15:58:42",5,NULL,"<p>The next-generation Java plugin found in Java 1.6 Update 10 and later has some very neat features:</p>&#xA;&#xA;<ul>&#xA;<li>Pass java_arguments parameter to pass arguments to the JVM that is created. This allows you to control the amount of memory given to the applet.</li>&#xA;<li>Create separate class loaders or even separate JVM's for each applet.</li>&#xA;<li>Specify the JVM version to use.</li>&#xA;<li>Install partial Java kernels in cases where you only need a subset of the full Java libraries' functionality.</li>&#xA;<li>Better Vista support.</li>&#xA;<li>Support (experimental) to drag an applet out of the browser and have it keep running when you navigate away.</li>&#xA;</ul>&#xA;&#xA;<p>Many other things that are documented here: <a href=&quot;http://jdk6.dev.java.net/plugin2/&quot;>http://jdk6.dev.java.net/plugin2/</a></p>&#xA;&#xA;<p>More from this release here: <a href=&quot;http://jdk6.dev.java.net/6u10ea.html&quot;>http://jdk6.dev.java.net/6u10ea.html</a></p>&#xA;"
512216,2,15496,"2009-02-04 16:52:04",7,NULL,"<p>You can build a string sprintf-style using String.format().</p>&#xA;&#xA;<pre><code>String w = &quot;world&quot;;&#xA;String s = String.format(&quot;Hello %s %d&quot;, w, 3);&#xA;</code></pre>&#xA;&#xA;<p>You can of course also use special specifiers to modify the output.</p>&#xA;&#xA;<p>More here: <a href=&quot;http://java.sun.com/j2se/1.5.0/docs/api/java/util/Formatter.html#syntax&quot; rel=&quot;nofollow&quot;>http://java.sun.com/j2se/1.5.0/docs/api/java/util/Formatter.html#syntax</a></p>&#xA;"
556664,2,15496,"2009-02-17 12:56:32",16,NULL,"<p>I like the static import of methods.</p>&#xA;&#xA;<p>For example create the following util class:</p>&#xA;&#xA;<pre><code>package package.name;&#xA;&#xA;public class util {&#xA;&#xA;     private static void doStuff1(){&#xA;        //the end&#xA;     }&#xA;&#xA;     private static String doStuff2(){&#xA;        return &quot;the end&quot;;&#xA;     }&#xA;&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>Then use it like this.</p>&#xA;&#xA;<pre><code>import static package.name.util.*;&#xA;&#xA;public class main{&#xA;&#xA;     public static void main(String[] args){&#xA;          doStuff1(); // wee no more typing util.doStuff1()&#xA;          System.out.print(doStuff2()); // or util.doStuff2()&#xA;     }&#xA;&#xA;}&#xA;</code></pre>&#xA;&#xA;<p><a href=&quot;http://en.wikipedia.org/wiki/Static_import&quot; rel=&quot;nofollow&quot;>Static Imports</a> works with any class, even Math...</p>&#xA;&#xA;<pre><code>import static java.lang.Math.*;&#xA;import static java.lang.System.out;&#xA;public class HelloWorld {&#xA;    public static void main(String[] args) {&#xA;        out.println(&quot;Hello World!&quot;);&#xA;        out.println(&quot;Considering a circle with a diameter of 5 cm, it has:&quot;);&#xA;        out.println(&quot;A circumference of &quot; + (PI * 5) + &quot;cm&quot;);&#xA;        out.println(&quot;And an area of &quot; + (PI * pow(5,2)) + &quot;sq. cm&quot;);&#xA;    }&#xA;}&#xA;</code></pre>&#xA;"
556756,2,15496,"2009-02-17 13:22:18",16,NULL,"<p><strong>List.subList returns a view on the original list</strong></p>&#xA;&#xA;<p>A documented but little known feature of lists. This allows you to work with parts of a list with changes mirrored in the original list.</p>&#xA;&#xA;<p><strong>List subList(int fromIndex, int toIndex)</strong> </p>&#xA;&#xA;<blockquote>&#xA;  <p>&quot;This method eliminates the need for explicit range operations (of the sort that commonly exist for arrays). Any operation that expects a list can be used as a range operation by passing a subList view instead of a whole list. For example, the following idiom removes a range of elements from a list:</p>&#xA;&#xA;<pre><code>       list.subList(from, to).clear();&#xA;</code></pre>&#xA;  &#xA;  <p>Similar idioms may be constructed for indexOf and lastIndexOf, and all of the algorithms in the Collections class can be applied to a subList.&quot;</p>&#xA;</blockquote>&#xA;"
556772,2,15496,"2009-02-17 13:25:09",34,NULL,"<p>i personally discovered <code>java.lang.Void</code> very late -- improves code readability in conjunction with generics, e.g. <code>Callable&lt;Void&gt;</code></p>&#xA;"
562852,2,15496,"2009-02-18 21:10:20",112,NULL,"<p>You can use enums to implement an interface.</p>&#xA;&#xA;<pre><code>public interface Room {&#xA;   public Room north();&#xA;   public Room south();&#xA;   public Room east();&#xA;   public Room west();&#xA;}&#xA;&#xA;public enum Rooms implements Room {&#xA;   FIRST {&#xA;      public Room north() {&#xA;         return SECOND;&#xA;      }&#xA;   },&#xA;   SECOND {&#xA;      public Room south() {&#xA;         return FIRST;&#xA;      }&#xA;   }&#xA;&#xA;   public Room north() { return null; }&#xA;   public Room south() { return null; }&#xA;   public Room east() { return null; }&#xA;   public Room west() { return null; }&#xA;}&#xA;</code></pre>&#xA;&#xA;<hr>&#xA;&#xA;<p>EDIT: Years later....</p>&#xA;&#xA;<p>I use this feature here</p>&#xA;&#xA;<pre><code>public enum AffinityStrategies implements AffinityStrategy {&#xA;</code></pre>&#xA;&#xA;<p><a href=&quot;https://github.com/peter-lawrey/Java-Thread-Affinity/blob/master/src/main/java/vanilla/java/affinity/AffinityStrategies.java&quot; rel=&quot;nofollow&quot;>https://github.com/peter-lawrey/Java-Thread-Affinity/blob/master/src/main/java/vanilla/java/affinity/AffinityStrategies.java</a></p>&#xA;&#xA;<p>By using an interface, developers can define their own strategies. Using an <code>enum</code> means I can define a collection (of five) built in ones.</p>&#xA;"
574522,2,15496,"2009-02-22 07:22:36",5,NULL,"<p>Intersection types allow you to (kinda sorta) do enums that have an inheritance hierarchy. You can't inherit implementation, but you can delegate it to a helper class.</p>&#xA;&#xA;<pre><code>enum Foo1 implements Bar {}&#xA;enum Foo2 implements Bar {}&#xA;&#xA;class HelperClass {&#xA;   static &lt;T extends Enum&lt;T&gt; &amp; Bar&gt; void fooBar(T the enum) {}&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>This is useful when you have a number of different enums that implement some sort of pattern. For instance, a number of pairs of enums that have a parent-child relationship.</p>&#xA;&#xA;<pre><code>enum PrimaryColor {Red, Green, Blue;}&#xA;enum PastelColor {Pink, HotPink, Rockmelon, SkyBlue, BabyBlue;}&#xA;&#xA;enum TransportMedium {Land, Sea, Air;}&#xA;enum Vehicle {Car, Truck, BigBoat, LittleBoat, JetFighter, HotAirBaloon;}&#xA;</code></pre>&#xA;&#xA;<p>You can write generic methods that say &quot;Ok, given an enum value thats a parent of some other enum values, what percentage of all the possible child enums of the child type have this particular parent value as their parent?&quot;, and have it all typesafe and done without casting. (eg: that &quot;Sea&quot; is 33% of all possible vehicles, and &quot;Green&quot; 20% of all possible Pastels).</p>&#xA;&#xA;<p>The code look like this. It's pretty nasty, but there are ways to make it better. Note in particuar that the &quot;leaf&quot; classes themselves are quite neat - the generic classes have declarations that are horribly ugly, but you only write them onece. Once the generic classes are there, then using them is easy.</p>&#xA;&#xA;<pre><code>import java.util.EnumSet;&#xA;&#xA;import javax.swing.JComponent;&#xA;&#xA;public class zz extends JComponent {&#xA;&#xA;    public static void main(String[] args) {&#xA;    	System.out.println(PrimaryColor.Green + &quot; &quot; + ParentUtil.pctOf(PrimaryColor.Green) + &quot;%&quot;);&#xA;    	System.out.println(TransportMedium.Air + &quot; &quot; + ParentUtil.pctOf(TransportMedium.Air) + &quot;%&quot;);&#xA;    }&#xA;&#xA;&#xA;}&#xA;&#xA;class ParentUtil {&#xA;    private ParentUtil(){}&#xA;    static &lt;P extends Enum&lt;P&gt; &amp; Parent&lt;P, C&gt;, C extends Enum&lt;C&gt; &amp; Child&lt;P, C&gt;&gt; //&#xA;    float pctOf(P parent) {&#xA;    	return (float) parent.getChildren().size() / //&#xA;    			(float) EnumSet.allOf(parent.getChildClass()).size() //&#xA;    			* 100f;&#xA;    }&#xA;    public static &lt;P extends Enum&lt;P&gt; &amp; Parent&lt;P, C&gt;, C extends Enum&lt;C&gt; &amp; Child&lt;P, C&gt;&gt; //&#xA;    EnumSet&lt;C&gt; loadChildrenOf(P p) {&#xA;    	EnumSet&lt;C&gt; cc = EnumSet.noneOf(p.getChildClass());&#xA;    	for(C c: EnumSet.allOf(p.getChildClass())) {&#xA;    		if(c.getParent() == p) {&#xA;    			cc.add(c);&#xA;    		}&#xA;    	}&#xA;    	return cc;&#xA;    }&#xA;}&#xA;&#xA;interface Parent&lt;P extends Enum&lt;P&gt; &amp; Parent&lt;P, C&gt;, C extends Enum&lt;C&gt; &amp; Child&lt;P, C&gt;&gt; {&#xA;    Class&lt;C&gt; getChildClass();&#xA;&#xA;    EnumSet&lt;C&gt; getChildren();&#xA;}&#xA;&#xA;interface Child&lt;P extends Enum&lt;P&gt; &amp; Parent&lt;P, C&gt;, C extends Enum&lt;C&gt; &amp; Child&lt;P, C&gt;&gt; {&#xA;    Class&lt;P&gt; getParentClass();&#xA;&#xA;    P getParent();&#xA;}&#xA;&#xA;enum PrimaryColor implements Parent&lt;PrimaryColor, PastelColor&gt; {&#xA;    Red, Green, Blue;&#xA;&#xA;    private EnumSet&lt;PastelColor&gt;	children;&#xA;&#xA;    public Class&lt;PastelColor&gt; getChildClass() {&#xA;    	return PastelColor.class;&#xA;    }&#xA;&#xA;    public EnumSet&lt;PastelColor&gt; getChildren() {&#xA;    	if(children == null) children=ParentUtil.loadChildrenOf(this);&#xA;    	return children;&#xA;    }&#xA;}&#xA;&#xA;enum PastelColor implements Child&lt;PrimaryColor, PastelColor&gt; {&#xA;    Pink(PrimaryColor.Red), HotPink(PrimaryColor.Red), //&#xA;    Rockmelon(PrimaryColor.Green), //&#xA;    SkyBlue(PrimaryColor.Blue), BabyBlue(PrimaryColor.Blue);&#xA;&#xA;    final PrimaryColor	parent;&#xA;&#xA;    private PastelColor(PrimaryColor parent) {&#xA;    	this.parent = parent;&#xA;    }&#xA;&#xA;    public Class&lt;PrimaryColor&gt; getParentClass() {&#xA;    	return PrimaryColor.class;&#xA;    }&#xA;&#xA;    public PrimaryColor getParent() {&#xA;    	return parent;&#xA;    }&#xA;}&#xA;&#xA;enum TransportMedium implements Parent&lt;TransportMedium, Vehicle&gt; {&#xA;    Land, Sea, Air;&#xA;&#xA;    private EnumSet&lt;Vehicle&gt;	children;&#xA;&#xA;    public Class&lt;Vehicle&gt; getChildClass() {&#xA;    	return Vehicle.class;&#xA;    }&#xA;&#xA;    public EnumSet&lt;Vehicle&gt; getChildren() {&#xA;    	if(children == null) children=ParentUtil.loadChildrenOf(this);&#xA;    	return children;&#xA;    }&#xA;}&#xA;&#xA;enum Vehicle implements Child&lt;TransportMedium, Vehicle&gt; {&#xA;    Car(TransportMedium.Land), Truck(TransportMedium.Land), //&#xA;    BigBoat(TransportMedium.Sea), LittleBoat(TransportMedium.Sea), //&#xA;    JetFighter(TransportMedium.Air), HotAirBaloon(TransportMedium.Air);&#xA;&#xA;    private final TransportMedium	parent;&#xA;&#xA;    private Vehicle(TransportMedium parent) {&#xA;    	this.parent = parent;&#xA;    }&#xA;&#xA;    public Class&lt;TransportMedium&gt; getParentClass() {&#xA;    	return TransportMedium.class;&#xA;    }&#xA;&#xA;    public TransportMedium getParent() {&#xA;    	return parent;&#xA;    }&#xA;}&#xA;</code></pre>&#xA;"
766774,2,15496,"2009-04-20 03:26:56",5,NULL,"<p>Read &quot;Java Puzzlers&quot; by Joshua Bloch and you will be both enlightened and horrified.</p>&#xA;"
851055,2,15496,"2009-05-12 03:47:43",6,NULL,"<p>Source code URLs. E.g. here is some legal java source code:</p>&#xA;&#xA;<pre><code>http://google.com&#xA;</code></pre>&#xA;&#xA;<p>(Yes, it was in Java Puzzlers. I laughed...)</p>&#xA;"
945115,2,15496,"2009-06-03 14:32:26",8,NULL,"<p>People are sometimes a bit surprised when they realize that it's possible to call private methods and access/change private fields using reflection...</p>&#xA;&#xA;<p>Consider the following class:</p>&#xA;&#xA;<pre><code>public class Foo {&#xA;    private int bar;&#xA;&#xA;    public Foo() {&#xA;        setBar(17);&#xA;    }&#xA;&#xA;    private void setBar(int bar) {&#xA;        this.bar=bar;&#xA;    }&#xA;&#xA;    public int getBar() {&#xA;        return bar;&#xA;    }&#xA;&#xA;    public String toString() {&#xA;        return &quot;Foo[bar=&quot;+bar+&quot;]&quot;;&#xA;    }&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>Executing this program...</p>&#xA;&#xA;<pre><code>import java.lang.reflect.*;&#xA;&#xA;public class AccessibleExample {&#xA;    public static void main(String[] args)&#xA;        throws NoSuchMethodException,IllegalAccessException, InvocationTargetException, NoSuchFieldException {&#xA;        Foo foo=new Foo();&#xA;        System.out.println(foo);&#xA;&#xA;        Method method=Foo.class.getDeclaredMethod(&quot;setBar&quot;, int.class);&#xA;        method.setAccessible(true);&#xA;        method.invoke(foo, 42);&#xA;&#xA;        System.out.println(foo);&#xA;        Field field=Foo.class.getDeclaredField(&quot;bar&quot;);&#xA;        field.setAccessible(true);&#xA;        field.set(foo, 23);&#xA;        System.out.println(foo);&#xA;    }&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>...will yield the following output:</p>&#xA;&#xA;<pre><code>Foo[bar=17]&#xA;Foo[bar=42]&#xA;Foo[bar=23]&#xA;</code></pre>&#xA;"
949397,2,15496,"2009-06-04 09:06:48",12,NULL,"<p>Part feature, part bother: Java's String handling to make it 'appear' a native Type (use of operators on them, +, +=)</p>&#xA;&#xA;<p>Being able to write:</p>&#xA;&#xA;<pre><code>String s = &quot;A&quot;;&#xA;s += &quot; String&quot;; // so s == &quot;A String&quot;&#xA;</code></pre>&#xA;&#xA;<p>is very convenient, but is simply syntactic sugar for (ie gets compiled to):</p>&#xA;&#xA;<pre><code>String s = new String(&quot;A&quot;);&#xA;s = new StringBuffer(s).append(&quot; String&quot;).toString();&#xA;</code></pre>&#xA;&#xA;<p>ergo an Object instantiation and 2 method invocations for a simple concatenation. Imagine Building a long String inside a loop in this manner!? AND all of StringBuffer's methods are declared synchronized. Thankfully in (I think) Java 5 they introduced StringBuilder which is identical to StringBuffer without the syncronization.</p>&#xA;&#xA;<p>A loop such as:</p>&#xA;&#xA;<pre><code>String s = &quot;&quot;;&#xA;for (int i = 0 ; i &lt; 1000 ; ++i)&#xA;  s += &quot; &quot; + i; // Really an Object instantiation &amp; 3 method invocations!&#xA;</code></pre>&#xA;&#xA;<p>can (should) be rewritten in your code as:</p>&#xA;&#xA;<pre><code>StringBuilder buf = new StringBuilder(); // Empty buffer&#xA;for (int i = 0 ; i &lt; 1000 ; ++i)&#xA;  buf.append(' ').append(i); // Cut out the object instantiation &amp; reduce to 2 method invocations&#xA;String s = buf.toString();&#xA;</code></pre>&#xA;&#xA;<p>and will run approximately 80+% faster than the original loop!&#xA;(up to 180% on some benchmarks I have run)</p>&#xA;"
983366,2,15496,"2009-06-11 20:10:28",30,NULL,"<p>Perhaps the most surprising hidden feature is the sun.misc.Unsafe class.</p>&#xA;&#xA;<p><a href=&quot;http://www.docjar.com/html/api/ClassLib/Common/sun/misc/Unsafe.java.html&quot; rel=&quot;nofollow&quot;>http://www.docjar.com/html/api/ClassLib/Common/sun/misc/Unsafe.java.html</a></p>&#xA;&#xA;<p>You can;</p>&#xA;&#xA;<ul>&#xA;<li>Create an object without calling a constructor.</li>&#xA;<li>Throw any exception even Exception without worrying about throws clauses on methods. (There are other way to do this I know)</li>&#xA;<li>Get/set randomly accessed fields in an object without using reflection.</li>&#xA;<li>allocate/free/copy/resize a block of memory which can be long (64-bit) in size.</li>&#xA;<li>Obtain the location of fields in an object or static fields in a class.</li>&#xA;<li>independently lock and unlock an object lock. (like synchronize without a block)</li>&#xA;<li>define a class from provided byte codes. Rather than the classloader determining what the byte code should be. (You can do this with reflection as well)</li>&#xA;</ul>&#xA;&#xA;<p>BTW: Incorrect use of this class will kill the JVM. I don't know which JVMs support this class so its not portable.</p>&#xA;"
1025199,2,15496,"2009-06-22 01:17:28",58,NULL,"<p>You can define an anonymous subclass and directly call a method on it even if it implements no interfaces.</p>&#xA;&#xA;<pre><code>new Object() {&#xA;  void foo(String s) {&#xA;    System.out.println(s);&#xA;  }&#xA;}.foo(&quot;Hello&quot;);&#xA;</code></pre>&#xA;"
1025306,2,15496,"2009-06-22 02:46:06",10,NULL,"<p>An optimization trick that makes your code easier to maintain and less susceptible to a concurrency bug.</p>&#xA;&#xA;<pre><code>public class Slow {&#xA;  /** Loop counter; initialized to 0. */&#xA;  private long i;&#xA;&#xA;  public static void main( String args[] ) {&#xA;    Slow slow = new Slow();&#xA;&#xA;    slow.run();&#xA;  }&#xA;&#xA;  private void run() {&#xA;    while( i++ &lt; 10000000000L )&#xA;      ;&#xA;  }&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>$ time java Slow<br />&#xA;real    0m15.397s<br />&#xA;$ time java Slow<br />&#xA;real    0m20.012s<br />&#xA;$ time java Slow<br />&#xA;real    0m18.645s<br /></p>&#xA;&#xA;<p><strong>Average: 18.018s</strong></p>&#xA;&#xA;<pre><code>public class Fast {&#xA;  /** Loop counter; initialized to 0. */&#xA;  private long i;&#xA;&#xA;  public static void main( String args[] ) {&#xA;    Fast fast = new Fast();&#xA;&#xA;    fast.run();&#xA;  }&#xA;&#xA;  private void run() {&#xA;    long i = getI();&#xA;&#xA;    while( i++ &lt; 10000000000L )&#xA;      ;&#xA;&#xA;    setI( i );&#xA;  }&#xA;&#xA;  private long setI( long i ) {&#xA;    this.i = i;&#xA;  }&#xA;&#xA;  private long getI() {&#xA;    return this.i;&#xA;  }&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>$ time java Fast<br />&#xA;real    0m12.003s<br />&#xA;$ time java Fast<br />&#xA;real    0m9.840s<br />&#xA;$ time java Fast<br />&#xA;real    0m9.686s<br /></p>&#xA;&#xA;<p><strong>Average: 10.509s</strong></p>&#xA;&#xA;<p>It requires more bytecodes to reference a class-scope variable than a method-scope variable. The addition of a method call prior to the critical loop adds little overhead (and the call might be inlined by the compiler anyway).</p>&#xA;&#xA;<p>Another advantage to this technique (always using accessors) is that it eliminates a potential bug in the <strong>Slow</strong> class. If a second thread were to continually reset the value of <strong>i</strong> to 0 (by calling <code>slow.setI( 0 )</code>, for example), the <strong>Slow</strong> class could never end its loop. Calling the accessor and using a local variable eliminates that possibility.</p>&#xA;&#xA;<p>Tested using J2SE 1.6.0_13 on Linux 2.6.27-14.</p>&#xA;"
1027744,2,15496,"2009-06-22 15:10:27",0,NULL,"<p>Java Bean property accessor methods do <em>not</em> have to start with &quot;get&quot; and &quot;set&quot;.  </p>&#xA;&#xA;<p>Even Josh Bloch gets this wrong in Effective Java.</p>&#xA;"
1191782,2,15496,"2009-07-28 03:21:05",11,NULL,"<p>I just (re)learned today that $ is a legal name for a method or variable in Java.  Combined with static imports it can make for some slightly more readable code, depending on your view of readable:</p>&#xA;&#xA;<p><a href=&quot;http://garbagecollected.org/2008/04/06/dollarmaps/&quot; rel=&quot;nofollow&quot;>http://garbagecollected.org/2008/04/06/dollarmaps/</a></p>&#xA;"
1276933,2,15496,"2009-08-14 09:35:41",5,NULL,"<p>It has already been <a href=&quot;http://stackoverflow.com/questions/15496/hidden-features-of-java/404567#404567&quot;>mentioned</a> that a final array can be used to pass a variable out of the anonymous inner classes.</p>&#xA;&#xA;<p>Another, arguably better and less ugly approach though is to use AtomicReference (or AtomicBoolean/AtomicInteger/…) class from java.util.concurrent.atomic package.</p>&#xA;&#xA;<p>One of the benefits in doing so is that these classes also provide such methods as <code>compareAndSet</code>, which may be useful if you're creating several threads which can modify the same variable.</p>&#xA;&#xA;<hr>&#xA;&#xA;<p>Another useful related pattern:</p>&#xA;&#xA;<pre><code>final AtomicBoolean dataMsgReceived = new AtomicBoolean(false);&#xA;final AtomicReference&lt;Message&gt; message = new AtomicReference&lt;Message&gt;();&#xA;withMessageHandler(new MessageHandler() {&#xA;    public void handleMessage(Message msg) {&#xA;         if (msg.isData()) {&#xA;             synchronized (dataMsgReceived) {&#xA;                 message.set(msg);&#xA;                 dataMsgReceived.set(true);&#xA;                 dataMsgReceived.notifyAll();&#xA;             }&#xA;         }&#xA;    }&#xA;}, new Interruptible() {&#xA;    public void run() throws InterruptedException {&#xA;        synchronized (dataMsgReceived) {&#xA;            while (!dataMsgReceived.get()) {&#xA;                dataMsgReceived.wait();&#xA;            }&#xA;        }&#xA;    }&#xA;});&#xA;</code></pre>&#xA;&#xA;<p>In this particular example we could have simply waited on message for it to become non-null, however null may often be a valid value and then you need to use a separate flag to finish the wait.</p>&#xA;&#xA;<p><code>waitMessageHandler(…)</code> above is yet another useful pattern: it sets up a handler somewhere, then starts executing the <em>Interruptible</em> which may throw an exception, and then removes the handler in the finally block, like so:</p>&#xA;&#xA;<pre><code>private final AtomicReference&lt;MessageHandler&gt; messageHandler = new AtomicReference&lt;MessageHandler&gt;();&#xA;public void withMessageHandler(MessageHandler handler, Interruptible logic) throws InterruptedException {&#xA;    synchronized (messageHandler) {&#xA;        try {&#xA;            messageHandler.set(handler);&#xA;            logic.run();&#xA;        } finally {&#xA;            messageHandler.set(null);&#xA;        }&#xA;    }&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>Here I assume that the <strong>messageHandler</strong>'s (if it's not null) <code>handleMessage(…)</code> method is called by another thread when a message is received. <strong>messageHandler</strong> must not be simply of <em>MessageHandler</em> type: that way you will synchronize on a changing variable, which is clearly a bug.</p>&#xA;&#xA;<p>Of course, it doesn't need to be <em>InterruptedException</em>, it could be something like <em>IOException</em>, or whatever makes sense in a particular piece of code.</p>&#xA;"
1305163,2,15496,"2009-08-20 10:06:33",5,NULL,"<p>Comma &amp; array. It is legal syntax: String s[] = {<br/>&#xA; &quot;123&quot; , <br/>&#xA; &quot;234&quot; <strong>,</strong><br/>&#xA;};</p>&#xA;"
1674342,2,15496,"2009-11-04 15:00:02",10,NULL,"<p>Use <code>StringBuilder</code> instead of <code>StringBuffer</code> when you don't need synchronized management included in <code>StringBuilder</code>. It will increase the performance of your application.</p>&#xA;&#xA;<p>Improvements for Java 7 would be even better than any hidden Java features:</p>&#xA;&#xA;<ul>&#xA;<li><strong>Diamond syntax:</strong> <a href=&quot;http://mail.openjdk.java.net/pipermail/coin-dev/2009-February/000009.html&quot; rel=&quot;nofollow&quot;>Link</a></li>&#xA;</ul>&#xA;&#xA;<p>Don't use those infinite &lt;> syntax at instanciation:</p>&#xA;&#xA;<pre><code>Map&lt;String, List&lt;String&gt;&gt; anagrams = new HashMap&lt;String, List&lt;String&gt;&gt;();&#xA;&#xA;// Can now be replaced with this:&#xA;&#xA;Map&lt;String, List&lt;String&gt;&gt; anagrams = new HashMap&lt;&gt;();&#xA;</code></pre>&#xA;&#xA;<ul>&#xA;<li><strong>Strings in switch:</strong> <a href=&quot;http://mail.openjdk.java.net/pipermail/coin-dev/2009-February/000001.html&quot; rel=&quot;nofollow&quot;>Link</a></li>&#xA;</ul>&#xA;&#xA;<p>Use String in switch, instead of old-C int:</p>&#xA;&#xA;<pre><code>String s = &quot;something&quot;;&#xA;switch(s) {&#xA; case &quot;quux&quot;:&#xA;    processQuux(s);&#xA;    // fall-through&#xA;&#xA;  case &quot;foo&quot;:&#xA;  case &quot;bar&quot;:&#xA;    processFooOrBar(s);&#xA;    break;&#xA;&#xA;  case &quot;baz&quot;:&#xA;     processBaz(s);&#xA;    // fall-through&#xA;&#xA;  default:&#xA;    processDefault(s);&#xA;    break;&#xA;}&#xA;</code></pre>&#xA;&#xA;<ul>&#xA;<li><strong>Automatic Resource Management</strong> <a href=&quot;http://mail.openjdk.java.net/pipermail/coin-dev/2009-February/000011.html&quot; rel=&quot;nofollow&quot;>Link</a></li>&#xA;</ul>&#xA;&#xA;<p>This old code:</p>&#xA;&#xA;<pre><code>static void copy(String src, String dest) throws IOException {&#xA;    InputStream in = new FileInputStream(src);&#xA;    try {&#xA;        OutputStream out = new FileOutputStream(dest);&#xA;        try {&#xA;            byte[] buf = new byte[8 * 1024];&#xA;            int n;&#xA;            while ((n = in.read(buf)) &gt;= 0)&#xA;                out.write(buf, 0, n);&#xA;        } finally {&#xA;            out.close();&#xA;        }&#xA;    } finally {&#xA;        in.close();&#xA;    }&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>can now be replaced by this much simpler code:</p>&#xA;&#xA;<pre><code>static void copy(String src, String dest) throws IOException {&#xA;    try (InputStream in = new FileInputStream(src);&#xA;            OutputStream out = new FileOutputStream(dest)) {&#xA;        byte[] buf = new byte[8192];&#xA;        int n;&#xA;        while ((n = in.read(buf)) &gt;= 0)&#xA;            out.write(buf, 0, n);&#xA;    }&#xA;}&#xA;</code></pre>&#xA;"
1805139,2,15496,"2009-11-26 18:43:49",7,NULL,"<p>Actually, what I love about Java is how few hidden tricks there are. It's a very obvious language. So much so that after 15 years, almost every one I can think of is already listed on these few pages.</p>&#xA;&#xA;<p>Perhaps most people know that Collections.synchronizedList() adds synchronization to a list. What you can't know unless you read the documentation is that you can safely iterate on the elements of that list by synchronizing on the list object itself.</p>&#xA;&#xA;<p>CopyOnWriteArrayList might be unknown to some, and Future represents an interesting way to abstract multithreaded result access.</p>&#xA;&#xA;<p>You can attach to VMs (local or remote), get information on GC activity, memory use, file descriptors and even object sizes through the various management, agent and attach APIs.</p>&#xA;&#xA;<p>Although TimeUnit is perhaps better than long, I prefer Wicket's Duration class.</p>&#xA;"
1805211,2,15496,"2009-11-26 19:03:04",16,NULL,"<p>Oh, I almost forgot this little gem. Try this on any running java process:</p>&#xA;&#xA;<p>jmap -histo:live PID</p>&#xA;&#xA;<p>You will get a histogram of live heap objects in the given VM. Invaluable as a quick way to figure certain kinds of memory leaks. Another technique I use to prevent them is to create and use size-bounded subclasses of all the collections classes. This causes quick failures in out-of-control collections that are easy to identify.</p>&#xA;"
1807455,2,15496,"2009-11-27 08:39:37",16,NULL,"<p>A feature with which you can display splash screens for your Java Console Based Applications.</p>&#xA;&#xA;<p>Use the command line tool <code>java</code> or <code>javaw</code> with the option <code>-splash</code></p>&#xA;&#xA;<p>eg:</p>&#xA;&#xA;<pre><code>java -splash:C:\myfolder\myimage.png -classpath myjarfile.jar com.my.package.MyClass&#xA;</code></pre>&#xA;&#xA;<p>the content of <code>C:\myfolder\myimage.png</code> will be displayed at the center of your screen, whenever you execute the class &quot;com.my.package.MyClass&quot;</p>&#xA;"
1834084,2,15496,"2009-12-02 16:28:17",42,NULL,"<p>When working in Swing I like the hidden <kbd>Ctrl</kbd> - <kbd>Shift</kbd> - <kbd>F1</kbd> feature.</p>&#xA;&#xA;<p>It dumps the component tree of the current window.<br>&#xA;(Assuming you have not bound that keystroke to something else.)</p>&#xA;"
1838200,2,15496,"2009-12-03 07:08:29",-8,NULL,"<p>Surprises me that an interface can extend multiple interfaces but class can extend only one class.</p>&#xA;"
1859579,2,15496,"2009-12-07 11:59:37",173,NULL,"<p>Classpath wild cards since Java 6.</p>&#xA;&#xA;<pre><code>java -classpath ./lib/* so.Main&#xA;</code></pre>&#xA;&#xA;<p>Instead of</p>&#xA;&#xA;<pre><code>java -classpath ./lib/log4j.jar:./lib/commons-codec.jar:./lib/commons-httpclient.jar:./lib/commons-collections.jar:./lib/myApp.jar so.Main&#xA;</code></pre>&#xA;&#xA;<p>See <a href=&quot;http://java.sun.com/javase/6/docs/technotes/tools/windows/classpath.html&quot; rel=&quot;nofollow&quot;>http://java.sun.com/javase/6/docs/technotes/tools/windows/classpath.html</a></p>&#xA;"
1918613,2,15496,"2009-12-16 23:47:36",28,NULL,"<p><a href=&quot;http://java.sun.com/developer/TechTips/2000/tt0711.html&quot;>Shutdown Hooks.</a> This allows to register a thread that will be created immediatly but started only when the JVM ends ! So it is some kind of &quot;global jvm finalizer&quot;, and you can make useful stuff in this thread (for example shutting down java ressources like an embedded hsqldb server). This works with System.exit(), or with CTRL-C / kill -15 (but not with kill -9 on unix, of course).</p>&#xA;&#xA;<p>Moreover it's pretty easy to set up.</p>&#xA;&#xA;<pre><code>            Runtime.getRuntime().addShutdownHook(new Thread() {&#xA;                  public void run() {&#xA;                      endApp();&#xA;                  }&#xA;            });;&#xA;</code></pre>&#xA;"
2034744,2,15496,"2010-01-09 20:04:02",9,NULL,"<p>Identifiers can contain foreign language chars like umlauts:</p>&#xA;&#xA;<p>instead of writing:</p>&#xA;&#xA;<pre><code>String title=&quot;&quot;;&#xA;</code></pre>&#xA;&#xA;<p>someone could write:</p>&#xA;&#xA;<pre><code>String Überschrift=&quot;&quot;;&#xA;</code></pre>&#xA;"
2063863,2,15496,"2010-01-14 11:59:44",5,NULL,"<p>Java 6 (from Sun) comes with an embedded JavaScrip interpreter.</p>&#xA;&#xA;<p><a href=&quot;http://java.sun.com/javase/6/docs/technotes/guides/scripting/programmer_guide/index.html#jsengine&quot;>http://java.sun.com/javase/6/docs/technotes/guides/scripting/programmer_guide/index.html#jsengine</a></p>&#xA;"
2121023,2,15496,"2010-01-22 22:33:08",6,NULL,"<p>Didn't read about this</p>&#xA;&#xA;<pre><code>Integer a = 1;&#xA;Integer b = 1;&#xA;Integer c = new Integer(1);&#xA;Integer d = new Integer(1);&#xA;&#xA;Integer e = 128;&#xA;Integer f = 128;&#xA;&#xA;assertTrue (a == b);   // again: this is true!&#xA;assertFalse(e == f); // again: this is false!&#xA;assertFalse(c == d);   // again: this is false!&#xA;</code></pre>&#xA;&#xA;<p>read more about this by searching java's pool of integer (internal 'cache' from -128 to 127 for autoboxing) or look into Integer.valueOf</p>&#xA;"
2130784,2,15496,"2010-01-25 07:20:06",2,NULL,"<p>You can override a method and have the superclass constructor call it (this may come as a surprise to C++ programmers.)</p>&#xA;&#xA;<p><a href=&quot;http://stackoverflow.com/questions/2129647/exception-vs-throwable-in-java/2129655#2129655&quot;>Example</a></p>&#xA;"
2131355,2,15496,"2010-01-25 09:45:51",29,NULL,"<p>Here's my list.</p>&#xA;&#xA;<p>My favourite (and scariest) hidden feature is that you can throw checked exceptions from methods that are not declaring to throw anything.</p>&#xA;&#xA;<pre><code>import java.rmi.RemoteException;&#xA;&#xA;class Thrower {&#xA;    public static void spit(final Throwable exception) {&#xA;        class EvilThrower&lt;T extends Throwable&gt; {&#xA;            @SuppressWarnings(&quot;unchecked&quot;)&#xA;            private void sneakyThrow(Throwable exception) throws T {&#xA;                throw (T) exception;&#xA;            }&#xA;        }&#xA;        new EvilThrower&lt;RuntimeException&gt;().sneakyThrow(exception);&#xA;    }&#xA;}&#xA;&#xA;public class ThrowerSample {&#xA;    public static void main( String[] args ) {&#xA;        Thrower.spit(new RemoteException(&quot;go unchecked!&quot;));&#xA;    }&#xA;}&#xA;</code></pre>&#xA;&#xA;<hr>&#xA;&#xA;<p>Also you may like to know you can throw 'null'...</p>&#xA;&#xA;<pre><code>public static void main(String[] args) {&#xA;     throw null;&#xA;}&#xA;</code></pre>&#xA;&#xA;<hr>&#xA;&#xA;<p>Guess what this prints:</p>&#xA;&#xA;<pre><code>Long value = new Long(0);&#xA;System.out.println(value.equals(0));&#xA;</code></pre>&#xA;&#xA;<hr>&#xA;&#xA;<p>And, guess what this returns: </p>&#xA;&#xA;<pre><code>public int returnSomething() {&#xA;    try {&#xA;        throw new RuntimeException(&quot;foo!&quot;);&#xA;    } finally {&#xA;        return 0;&#xA;    }&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>the above should not surprise good developers.</p>&#xA;&#xA;<hr>&#xA;&#xA;<p>In Java you can declare an array in following valid ways:</p>&#xA;&#xA;<pre><code>String[] strings = new String[] { &quot;foo&quot;, &quot;bar&quot; };&#xA;// the above is equivalent to the following:&#xA;String[] strings = { &quot;foo&quot;, &quot;bar&quot; };&#xA;</code></pre>&#xA;&#xA;<p>So following Java code is perfectly valid:</p>&#xA;&#xA;<pre><code>public class Foo {&#xA;    public void doSomething(String[] arg) {}&#xA;&#xA;    public void example() {&#xA;        String[] strings = { &quot;foo&quot;, &quot;bar&quot; };&#xA;        doSomething(strings);&#xA;    }&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>Is there any valid reason why, instead, the following code shouldn't be valid?</p>&#xA;&#xA;<pre><code>public class Foo {&#xA;&#xA;    public void doSomething(String[] arg) {}&#xA;&#xA;    public void example() {&#xA;        doSomething({ &quot;foo&quot;, &quot;bar&quot; });&#xA;    }&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>I think, that the above syntax would have been a valid substitute to the varargs introduced in Java 5. And, more coherent with the previously allowed array declarations. </p>&#xA;"
2294266,2,15496,"2010-02-19 05:29:42",40,NULL,"<p>Every class file starts with the hex value <strong>0xCAFEBABE</strong> to identify it as valid JVM bytecode.</p>&#xA;&#xA;<p>(<a href=&quot;http://www.artima.com/insidejvm/whyCAFEBABE.html&quot; rel=&quot;nofollow&quot;>Explanation</a>)</p>&#xA;"
2372429,2,15496,"2010-03-03 15:17:48",4,NULL,"<p>You can add runtime checks of generic types using a <code>Class&lt;T&gt;</code> object, this comes in handy when a class is being created in a configuration file somewhere and there is no way to add a compile time check for the generic type of the class.  You dont want the class to blow up at runtime if the app happens to be configured wrong and you dont want all you classes riddled with instance of checks.</p>&#xA;&#xA;<pre><code>public interface SomeInterface {&#xA;  void doSomething(Object o);&#xA;}&#xA;public abstract class RuntimeCheckingTemplate&lt;T&gt; {&#xA;  private Class&lt;T&gt; clazz;&#xA;  protected RuntimeChecking(Class&lt;T&gt; clazz) {&#xA;    this.clazz = clazz;&#xA;  }&#xA;&#xA;  public void doSomething(Object o) {&#xA;    if (clazz.isInstance(o)) {&#xA;      doSomethingWithGeneric(clazz.cast(o));&#xA;    } else {&#xA;      // log it, do something by default, throw an exception, etc.&#xA;    }&#xA;  }&#xA;&#xA;  protected abstract void doSomethingWithGeneric(T t);&#xA;}&#xA;&#xA;public class ClassThatWorksWithStrings extends RuntimeCheckingTemplate&lt;String&gt; {&#xA;  public ClassThatWorksWithStrings() {&#xA;     super(String.class);&#xA;  }&#xA;&#xA;  protected abstract void doSomethingWithGeneric(T t) {&#xA;    // Do something with the generic and know that a runtime exception won't occur &#xA;    // because of a wrong type&#xA;  }&#xA;}&#xA;</code></pre>&#xA;"
3004405,2,15496,"2010-06-09 09:07:07",9,NULL,"<p>I can add Scanner object. It is the best for parsing.  </p>&#xA;&#xA;<pre><code>String input = &quot;1 fish 2 fish red fish blue fish&quot;;&#xA;Scanner s = new Scanner(input).useDelimiter(&quot;\\s*fish\\s*&quot;);&#xA;System.out.println(s.nextInt());&#xA;System.out.println(s.nextInt());&#xA;System.out.println(s.next());&#xA;System.out.println(s.next());&#xA;s.close();&#xA;</code></pre>&#xA;"
3089101,2,15496,"2010-06-21 23:04:28",14,NULL,"<p>You can define and invoke methods on anonymous inner classes.</p>&#xA;&#xA;<p>Well they're not that hidden, but very few people know they can be used to define a new method in a class and invoke it  like this:</p>&#xA;&#xA;<pre><code>(new Object() {&#xA;    public String someMethod(){ &#xA;        return &quot;some value&quot;;&#xA;    }&#xA;}).someMethod();&#xA;</code></pre>&#xA;&#xA;<p>Probably is not very common because it not very useful either, you can call the method it <strong>only</strong> when you define it ( or via reflection ) </p>&#xA;"
3130075,2,15496,"2010-06-28 04:36:05",21,NULL,"<p>This is not really a hidden feature but it did give me a big surprise when I saw this compiled fine:</p>&#xA;&#xA;<pre><code>public int aMethod(){&#xA;    http://www.google.com&#xA;    return 1;&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>the reason why it compiles is that the line <a href=&quot;http://www.google.com&quot;>http://www.google.com</a> the &quot;http:&quot; part is treated by the compiler as a label and the rest of the line is a comment.</p>&#xA;&#xA;<p>So, if you want to write some bizzare code  (or obfuscated code), just put alot of http addresses there. ;-)</p>&#xA;"
3147440,2,15496,"2010-06-30 08:06:03",13,NULL,"<p>The C-Style printf() :)</p>&#xA;&#xA;<pre><code>System.out.printf(&quot;%d %f %.4f&quot;, 3,Math.E,Math.E);&#xA;</code></pre>&#xA;&#xA;<p>Output:&#xA;3 2.718282 2.7183</p>&#xA;&#xA;<p>Binary Search (and it's return value)</p>&#xA;&#xA;<pre><code>int[] q = new int[] { 1,3,4,5};&#xA;int position = Arrays.binarySearch(q, 2);&#xA;</code></pre>&#xA;&#xA;<p>Similar to C#, if '2' is not found in the array, it returns a negative value but if you take the 1's Complement of the returned value you actually get the position where '2' can be inserted.</p>&#xA;&#xA;<p>In the above example, position = -2, ~position = 1 which is the position where 2 should be inserted...it also lets you find the &quot;closest&quot; match in the array.</p>&#xA;&#xA;<p>I thinks its pretty nifty... :)</p>&#xA;"
3181454,2,15496,"2010-07-05 18:22:41",23,NULL,"<p>Not so hidden, but interesting.</p>&#xA;&#xA;<p>You can have a &quot;Hello, world&quot; without main method ( it throws NoSuchMethodError thought ) </p>&#xA;&#xA;<p>Originally posted by  RusselW on <a href=&quot;http://stackoverflow.com/questions/1995113/strangest-language-feature/3161298#3161298&quot;>Strangest language feature</a></p>&#xA;&#xA;<pre><code>public class WithoutMain {&#xA;    static {&#xA;        System.out.println(&quot;Look ma, no main!!&quot;);&#xA;        System.exit(0);&#xA;    }&#xA;}&#xA;&#xA;$ java WithoutMain&#xA;Look ma, no main!!&#xA;</code></pre>&#xA;"
18474,2,18465,"2008-08-20 18:11:10",5,NULL,"<p>Here's an answer for you:</p>&#xA;&#xA;<p><a href=&quot;http://www.dotnetspider.com/forum/ViewForum.aspx?ForumId=77428&quot; rel=&quot;nofollow&quot;>http://www.dotnetspider.com/forum/ViewForum.aspx?ForumId=77428</a></p>&#xA;&#xA;<p>Though I think in modern versions of .NET, the best thing to do is use TryParse in any case, if there's any doubt that the conversion will work.</p>&#xA;"
18476,2,18465,"2008-08-20 18:12:54",1,NULL,"<p>There is also the DirectCast method which you should use only if you are sure what the type of the object is. It is faster, but doesn't do any proper checks. I use DirectCast when I'm extracting values from a loosely typed DataTable when I know the type for each column.</p>&#xA;"
18477,2,18465,"2008-08-20 18:12:59",0,NULL,"<p>If you need speed, I'm pretty sure a direct cast is the fastest way.  That being said, I normally use .Parse or .TryParse because is seems to make things easier to read, and behave in a more predictable manner.  </p>&#xA;&#xA;<p>Convert actually calls Parse under the hood, I believe.  So there is little difference there, and its really just seems to be a matter of personal taste.</p>&#xA;"
18523,2,18465,"2008-08-20 18:28:42",13,NULL,"<p>The <code>Convert.ToXXX()</code> methods are for objects that might be of the correct or similar type, while <code>.Parse()</code> and <code>.TryParse()</code> are specifically for strings:</p>&#xA;&#xA;<pre><code>//o is actually a boxed int&#xA;object o = 12345;&#xA;&#xA;//unboxes it&#xA;int castVal = (int) 12345;&#xA;&#xA;//o is a boxed enum&#xA;object o = MyEnum.ValueA;&#xA;&#xA;//this will get the underlying int of ValueA&#xA;int convVal = Convert.ToInt32( o );&#xA;&#xA;//now we have a string&#xA;string s = &quot;12345&quot;;&#xA;&#xA;//this will throw an exception if s can't be parsed&#xA;int parseVal = int.Parse( s );&#xA;&#xA;//alternatively:&#xA;int tryVal;&#xA;if( int.TryParse( s, out tryVal ) ) {&#xA;    //do something with tryVal &#xA;}&#xA;</code></pre>&#xA;&#xA;<p>If you compile with optimisation flags TryParse is very quick - it's the best way to get a number from a string. However if you have an object that might be an int or might be a string Convert.ToInt32 is quicker.</p>&#xA;"
18525,2,18465,"2008-08-20 18:30:46",3,NULL,"<p>I'm a big fan of <a href=&quot;http://msdn.microsoft.com/en-us/library/f02979c7.aspx&quot; rel=&quot;nofollow&quot;>TryParse</a>, since it saves you a lot of headache of error catching when there's a chance the value you're going to parse is not of the appropriate type.  </p>&#xA;&#xA;<p>My order is usually:</p>&#xA;&#xA;<ul>&#xA;<li>Parse (if I can be sure the value will be the right type, and I do try to ensure this)</li>&#xA;<li>TryParse (if I can't be sure, which happens whenever user input is involved, or input from a system you cannot control)</li>&#xA;<li>Convert (which I think I have not used since I started using Parse and TryParse, but I could be wrong)</li>&#xA;</ul>&#xA;"
20561,2,20529,"2008-08-21 17:12:55",14,NULL,"<p><kbd>Ctrl</kbd>-<kbd>Alt</kbd> (<kbd>up</kbd>/<kbd>down</kbd>)  Copy selected line(s) above or below current line.<br>&#xA;<kbd>Alt</kbd> (<kbd>up</kbd>/<kbd>down</kbd>)  Move current (or multiple selected) lines up or down<br>&#xA;<kbd>Ctrl</kbd>-<kbd>Shift</kbd>-<kbd>R</kbd>   Bring up the resource window, start typing to find class/resource<br>&#xA;<kbd>Ctrl</kbd>-<kbd>O</kbd>    Bring up all methods and fields for the current class. Hitting it again will bring up all methods and fields for current class and super classes.<br>&#xA;<kbd>Ctrl</kbd>-<kbd>/</kbd> or <kbd>Ctrl</kbd>-<kbd>Alt</kbd>-<kbd>C</kbd> Comment single or multiple lines with //<br>&#xA;<kbd>Ctrl</kbd>-<kbd>Shift</kbd>-<kbd>/</kbd>   Comment selected lines with /* */<br>&#xA;<kbd>Ctrl</kbd>-<kbd>.</kbd>    Take you to the next error or warning line  </p>&#xA;"
20572,2,20529,"2008-08-21 17:17:23",0,NULL,"<p>I find the project-specific settings useful in Eclipse 3.3.</p>&#xA;&#xA;<p>For example, if you have several developers working on a project who have different code styles for curly braces, line spacing, number of imports etc. then you can specify the style settings for the project.  Then you can configure the save actions so that the code is automatically formatted when a file is saved.  The result is everyone's code is formatted the same before it's checked in.</p>&#xA;"
20574,2,20529,"2008-08-21 17:17:47",2,NULL,"<p>I am also a fan of Eclipse, however since I spend a majority of my time in Visual Studio, I will suggest that you read Eric Sink's series of articles &quot;C# to Java&quot; (parts 1-4). Not only is Eric always an entertaining read, but this brief series covers some awesome Eclipse insight for those who have not been into Eclipse or have been away from it for a while:&#xA;<br><br>&#xA;<a href=&quot;http://www.ericsink.com/entries/java_eclipse_1.html&quot; rel=&quot;nofollow&quot;>From C# to Java: Part 1</a>&#xA;<br>&#xA;<a href=&quot;http://www.ericsink.com/entries/java_eclipse_2.html&quot; rel=&quot;nofollow&quot;>From C# to Java: Part 2</a>&#xA;<br>&#xA;<a href=&quot;http://www.ericsink.com/entries/java_eclipse_3.html&quot; rel=&quot;nofollow&quot;>From C# to Java: Part 3</a>&#xA;<br> &#xA;<a href=&quot;http://www.ericsink.com/entries/java_eclipse_4.html&quot; rel=&quot;nofollow&quot;>From C# to Java: Part 4</a></p>&#xA;"
20631,2,20529,"2008-08-21 17:39:52",67,NULL,"<p>My most commonly used features are</p>&#xA;&#xA;<p><kbd>ctrl</kbd>+<kbd>1</kbd> quick-fix / spell-checker</p>&#xA;&#xA;<p>opening files</p>&#xA;&#xA;<ul>&#xA;<li><kbd>ctrl</kbd>+<kbd>shift</kbd>+<kbd>t</kbd> load class file by classname</li>&#xA;<li><kbd>ctrl</kbd>+<kbd>shift</kbd>+<kbd>r</kbd> load any file by filename</li>&#xA;</ul>&#xA;&#xA;<p>matches are made on the start of the class/filename. start your search pattern with a * to search anywhere within the filename/classname.</p>&#xA;&#xA;<p>Formatting</p>&#xA;&#xA;<ul>&#xA;<li><kbd>ctrl</kbd>+<kbd>shift</kbd>+<kbd>f</kbd> Format source file&#xA;  (set up your formatting style in Window | preferences | java | code style | formatter)</li>&#xA;<li><kbd>ctrl</kbd>+<kbd>shift</kbd>+<kbd>o</kbd> Organise imports</li>&#xA;</ul>&#xA;&#xA;<p>Generated code</p>&#xA;&#xA;<ul>&#xA;<li><kbd>alt</kbd>+<kbd>s</kbd>,<kbd>r</kbd> to generate getters and setters</li>&#xA;<li><kbd>alt</kbd>+<kbd>s</kbd>,<kbd>v</kbd> to insert method signatures for overidden methods from superclass or interface</li>&#xA;</ul>&#xA;&#xA;<p>Refactorings</p>&#xA;&#xA;<ul>&#xA;<li><kbd>alt</kbd>+<kbd>shift</kbd>+<kbd>l</kbd> Extract text-selection as local variable (really handy in that it determines and inserts the type for you.</li>&#xA;<li><kbd>alt</kbd>+<kbd>shift</kbd>+<kbd>m</kbd> Extract text-selection as a method</li>&#xA;<li><kbd>alt</kbd>+<kbd>shift</kbd>+<kbd>i</kbd> inline selected method</li>&#xA;</ul>&#xA;&#xA;<p>Running and debugging.</p>&#xA;&#xA;<p><kbd>alt</kbd>+<kbd>shift</kbd>+<kbd>x</kbd> is a really handy prefix to run stuff in your current file.</p>&#xA;&#xA;<ul>&#xA;<li><kbd>alt</kbd>+<kbd>shift</kbd>+<kbd>x</kbd>, <kbd>t</kbd> run unit tests in current file</li>&#xA;<li><kbd>alt</kbd>+<kbd>shift</kbd>+<kbd>x</kbd>, <kbd>j</kbd> run main in current file</li>&#xA;<li><kbd>alt</kbd>+<kbd>shift</kbd>+<kbd>x</kbd>, <kbd>r</kbd> run on server</li>&#xA;</ul>&#xA;&#xA;<p>There are more. The options are shown to you in the lower-right popup after hitting <kbd>alt</kbd>+<kbd>shift</kbd>+<kbd>x</kbd>.</p>&#xA;&#xA;<p><kbd>alt</kbd>+<kbd>shift</kbd>+<kbd>x</kbd> can be switched for <kbd>alt</kbd>+<kbd>shift</kbd>+<kbd>d</kbd> in all the above examples to run in the debugger.</p>&#xA;&#xA;<p>Validation</p>&#xA;&#xA;<p>As of the recent Ganymede release, you can now switch of validation in specified files and folders. I've been waiting for this feature for ages.</p>&#xA;&#xA;<ul>&#xA;<li>Go to Project | Properties | Validation</li>&#xA;<li>click on the ... button in the settings column of the validator you want to shut up</li>&#xA;<li>Add a rule to the <em>exclude group</em></li>&#xA;</ul>&#xA;&#xA;<p>code navigation</p>&#xA;&#xA;<ul>&#xA;<li>hold down <kbd>ctrl</kbd> to make all variables, methods and classnames hyperlinks to their definitions.</li>&#xA;<li><kbd>alt</kbd>+<kbd>left</kbd> to navigate back to where you clicked <kbd>ctrl</kbd></li>&#xA;<li><kbd>alt</kbd>+<kbd>right</kbd> to go &quot;forwards&quot; again</li>&#xA;</ul>&#xA;"
20804,2,20529,"2008-08-21 19:03:05",4,NULL,"<p>One key feature: <kbd>Shift</kbd>+<kbd>Alt</kbd>+<kbd>T</kbd> for the refactoring menu.</p>&#xA;"
20849,2,20529,"2008-08-21 19:16:22",2,NULL,"<p>A lot of the key bindings depend on the perspective and view currently active.</p>&#xA;&#xA;<p>My most used ones for the Java perspective:</p>&#xA;&#xA;<ul>&#xA;<li><kbd>ctrl</kbd>-<kbd>shift</kbd>-<kbd>r</kbd> open resource</li>&#xA;<li><kbd>ctrl</kbd>-<kbd>shift</kbd>-<kbd>t</kbd> open type</li>&#xA;<li><kbd>ctrl</kbd>-<kbd>1</kbd> quick fix/refactor</li>&#xA;<li><kbd>ctrl</kbd>-<kbd>j</kbd> incremental search</li>&#xA;<li><kbd>ctrl</kbd>-<kbd>h</kbd> search in files (select a base directory and set scope to selected resources)</li>&#xA;<li><kbd>ctrl</kbd>-<kbd>o</kbd> list methods</li>&#xA;<li><kbd>ctrl</kbd>-<kbd>alt</kbd>-<kbd>h</kbd> open call hierarchy</li>&#xA;<li><kbd>ctrl</kbd>-<kbd>shift</kbd>-<kbd>l</kbd> list shortcut keys</li>&#xA;<li>hit <kbd>ctrl</kbd>-<kbd>shift</kbd>-<kbd>l</kbd> again to go directly to preferences to change key mappings</li>&#xA;</ul>&#xA;"
20963,2,20529,"2008-08-21 19:52:45",4,NULL,"<ul>&#xA;<li><kbd>Ctrl</kbd>-<kbd>shift</kbd>-<kbd>T</kbd>, but only type the initial characters (and even a few&#xA;more) of the class you're looking&#xA;for.  For example, you can type&#xA;&quot;NetLi&quot; to find NetworkListener</li>&#xA;<li>In the Search window, <kbd>Ctrl</kbd>-<kbd>.</kbd> takes you to the first leaf of a tree branch</li>&#xA;<li><kbd>Alt</kbd>-<kbd>/</kbd> is Word Completion.  Slightly different from <kbd>Ctrl</kbd>-<kbd>space</kbd></li>&#xA;</ul>&#xA;"
20976,2,20529,"2008-08-21 19:55:22",46,NULL,"<p>This is cool: If someone has emailed you a stack trace, you can copy and <strong>paste the stack trace into Eclipse's Console window</strong>.  You can then click on class names in the stack trace as if your own code had generated it.</p>&#xA;"
21025,2,20529,"2008-08-21 20:04:56",15,NULL,"<p>In terms of actual features, rather than shortcuts, I strongly recommend taking a look at <a href=&quot;http://www.eclipse.org/mylyn/&quot;><strong>Mylyn</strong></a>.</p>&#xA;&#xA;<p>It essentially skins Eclipse with a task focussed view.  It tracks the files you touch when working on a task, and focusses many aspects of the UI onto the resources that it decides are relevant to the job in hand.  Eclipse can be somewhat busy to look at, especially with a big multi module project, and Mylyn helps cut through the cruft.  The  connectivity to issue tracking software and source control repositories is also excellent.</p>&#xA;&#xA;<p>In my experience, it polarises opinion amongst those who try working with it, which is probably a sign that it is offering something interesting...  Don't mean to sound like a fanboy - it is definitely worth a look though.</p>&#xA;"
21218,2,20529,"2008-08-21 21:19:17",3,NULL,"<p>I'd like to add two additional shortcuts:</p>&#xA;&#xA;<ul>&#xA;<li><p><kbd>CTRL</kbd>+<kbd>F6</kbd>   Switch between open editors (<kbd>CTRL</kbd>+<kbd>SHIFT</kbd>+<kbd>F6</kbd> to scroll through the list in the opposite direction)</p></li>&#xA;<li><p><kbd>CTRL</kbd>+<kbd>F11</kbd> start program in debug mode</p></li>&#xA;<li><p><kbd>F11</kbd> start program in normal mode</p></li>&#xA;</ul>&#xA;"
154671,2,20529,"2008-09-30 19:51:01",2,NULL,"<p><kbd>Ctrl</kbd>-<kbd>Shift</kbd>-<kbd>M</kbd> while the cursor is on a class name in your java file, will specifically add that and only that class to your imports.  This is different from <kbd>Ctrl</kbd>-<kbd>Shift</kbd>-<kbd>O</kbd> which will not only add those imports not already defined, but will also remove imports not currently needed, something you might not necessarily want to do.</p>&#xA;&#xA;<p>I forgot about [<kbd>Ctrl</kbd>+<kbd>2</kbd> -> <kbd>r</kbd>] scope variable rename. Place the cursor in the variable you wish to rename, press <kbd>Ctrl</kbd>+<kbd>2</kbd>, then <kbd>r</kbd>, then type the new name watching all instances of that variable get renamed at the same time.</p>&#xA;&#xA;<p>It's <em>awesome</em> at refactoring Hungarian Notation.</p>&#xA;"
1956515,2,20529,"2009-12-24 03:30:34",10,NULL,"<p>Eclipse auto refresh isn't on by default so if you make changes to a file outside of eclipse, the change won't be reflected in your build. this is very annoying if you just did an svn/git update/rebase and things aren't working the way they're supposed to.</p>&#xA;&#xA;<p>Turn it on in windows->preferences->workspace and tick Refresh Automatically. </p>&#xA;"
3572442,2,20529,"2010-08-26 06:08:22",10,NULL,"<p><kbd>CTRL</kbd>+<kbd>PAGE DOWN</kbd> / <kbd>CTRL</kbd>+<kbd>PAGE UP</kbd> to switch between opened editors</p>&#xA;&#xA;<p><kbd>CTRL</kbd>+<kbd>E</kbd> to also switch between opened editors (allows to type the name)</p>&#xA;&#xA;<p><kbd>CTRL</kbd>+<kbd>O</kbd> is extremely important for me. You don't longer need the Outline View then (you can close it which will give you more space). Then, you can type a method name or just the beginning of it and you quickly can get to it. I also use it to inspect what stuff is available. For example: <kbd>CTRL</kbd>+<kbd>O</kbd> and then type get ... now I see all getters.</p>&#xA;&#xA;<p><kbd>F3</kbd> while an element is selected in the code: brings you to its definition or it's source. e.g. used on a method call it brings you into the source code of that method.</p>&#xA;&#xA;<p><kbd>CTRL</kbd>+<kbd>M</kbd> to maximize the current window</p>&#xA;&#xA;<p>As already said, <kbd>CTRL</kbd>+<kbd>3</kbd> is extremely good. It basically allows you to use Eclipse completely without a mouse. Just type <kbd>CTRL</kbd>+<kbd>3</kbd> and then package explorer for example.</p>&#xA;&#xA;<p><kbd>CTRL</kbd>+<kbd>F8</kbd> cycle trough perspectives</p>&#xA;&#xA;<p><kbd>CTRL</kbd>+<kbd>L</kbd> allows to type a line number and brings you directly to that line.</p>&#xA;&#xA;<p><kbd>CTRL</kbd>+<kbd>SHIFT</kbd>+<kbd>G</kbd> searches for all references to the selected element in the workspace.</p>&#xA;&#xA;<p>And not a shortcut: In the project settings under Java Editor you can find Save Actions. This allows you to set up the project so that the code is automatically cleaned up and formatted when you save a file. That's very good it safes you from constantly pressing <kbd>CTRL</kbd>+<kbd>O</kbd> and <kbd>CTRL</kbd>+<kbd>F</kbd>.</p>&#xA;"
3783867,2,20529,"2010-09-24 02:37:54",7,NULL,"<p><strong>Local History</strong> </p>&#xA;&#xA;<p>It's a great feature. Eclipse has its own mini-CVS for all files in a project. If you want to revert some change you made, or even restore deleted file - you can right click on the project and select &quot;Restore from Local History&quot;.</p>&#xA;&#xA;<p>Just saved my ass *tears of joy*</p>&#xA;"
3919007,2,20529,"2010-10-12 21:02:43",12,NULL,"<p>A shortcut that I use everyday is <kbd>Ctrl</kbd>+<kbd>K</kbd>. In your editor (not only Java file), simply select a text (like a variable, a function, etc.), and then use this shortcut to go to the next occurrence of this text in the current editor.&#xA;It's faster than using the <kbd>Ctrl</kbd>+<kbd>F</kbd> shortcut...</p>&#xA;&#xA;<p>Note also that you can use <kbd>Ctrl</kbd>+<kbd>Shift</kbd>+<kbd>K</kbd> to search backwards.</p>&#xA;"
4102092,2,20529,"2010-11-04 22:40:58",1,NULL,"<p>I use a lot of the above and also like for quick search: <kbd>CTRL</kbd>+<kbd>J</kbd> then type what I am looking for, then <kbd>CTRL</kbd>+<kbd>K</kbd> for next occurrence.</p>&#xA;"
4740399,2,20529,"2011-01-19 20:35:19",7,NULL,"<p><kbd>CTRL</kbd>+<kbd>Shift</kbd>+<kbd>P</kbd> to <strong>jump to the matching bracket</strong>/parenthesis.</p>&#xA;"
6038500,2,20529,"2011-05-17 23:59:29",2,NULL,"<p><kbd>alt</kbd>-<kbd>shift</kbd>-<kbd>a</kbd> is extremely useful in a few situations.</p>&#xA;"
6306143,2,20529,"2011-06-10 12:08:35",2,NULL,"<ul>&#xA;<li><p><kbd>CTRL</kbd>+<kbd>SHIFT</kbd>+<kbd>X</kbd> selected text becomes <strong>UPPERCASE</strong></p></li>&#xA;<li><p><kbd>CTRL</kbd>+<kbd>SHIFT</kbd>+<kbd>Y</kbd> selected text becomes <strong>lowercase</strong></p></li>&#xA;</ul>&#xA;"
6560207,2,20529,"2011-07-02 23:43:37",1,NULL,"<p><kbd>Shift</kbd>+<kbd>Alt</kbd>+<kbd>b</kbd> for the simple navigation row over the editor.</p>&#xA;"
8158036,2,20529,"2011-11-16 20:12:57",1,NULL,"<p>Lately I've been using the <a href=&quot;http://www.mousefeed.com/&quot; rel=&quot;nofollow&quot;>MouseFeeds</a> plugin to automatically tell me what the key stroke combinations are.  That way by repetition I remember them better.</p>&#xA;&#xA;<p>This <a href=&quot;http://blog.mousefeed.com/&quot; rel=&quot;nofollow&quot;>link</a> has a better picture and description of what it looks like and does.</p>&#xA;"
19623660,2,20529,"2013-10-27 21:13:20",0,NULL,"<p>I've just released this blog post about <a href=&quot;http://blog.jooq.org/2013/10/27/top-5-useful-hidden-eclipse-features/&quot; rel=&quot;nofollow&quot;>Top 5 Useful Hidden Eclipse Features</a>. It contains:</p>&#xA;&#xA;<ol>&#xA;<li>Favorites: Types and members that will always show up in auto-completion</li>&#xA;<li><a href=&quot;http://stackoverflow.com/a/19334338/521799&quot;>The awesome block selection mode</a>: For multi-line editing</li>&#xA;<li>The EGit staging view: Much better than git itself</li>&#xA;<li>Type filters: To remove awt and <code>java.lang.Object</code> stuff from auto-completion</li>&#xA;<li><a href=&quot;http://stackoverflow.com/a/12949810/521799&quot;>Formatter tags</a>: To delimit code sections that shouldn't be auto-formatted</li>&#xA;</ol>&#xA;"
19867356,2,20529,"2013-11-08 19:46:52",1,NULL,"<p><kbd>Alt</kbd>+<kbd>left</kbd> and <kbd>Alt</kbd>+ <kbd>right</kbd> will navigate you forward and back. </p>&#xA;"
21720,2,21715,"2008-08-22 03:28:35",2,NULL,"<p>I generally only derive my own collection classes if I need to &quot;add value&quot;. Like, if the collection itself needed to have some &quot;metadata&quot; properties tagging along with it.</p>&#xA;"
21722,2,21715,"2008-08-22 03:31:15",4,NULL,"<p>I've been going back and forth on 2 options:</p>&#xA;&#xA;<pre><code>public class BusinessObjectCollection : List&lt;BusinessObject&gt; {}&#xA;</code></pre>&#xA;&#xA;<p>or methods that just do the following:</p>&#xA;&#xA;<pre><code>public IEnumerable&lt;BusinessObject&gt; GetBusinessObjects();&#xA;</code></pre>&#xA;&#xA;<p>The benefits of the first approach is that you can change the underlying data store without having to mess with method signatures. Unfortunately if you inherit from a collection type that removes a method from the previous implementation, then you'll have to deal with those situations throughout your code.</p>&#xA;"
21724,2,21715,"2008-08-22 03:31:49",2,NULL,"<p>I do the exact same thing as you Jonathan... just inherit from <code>List&lt;T&gt;</code>. You get the best of both worlds.  But I generally only do it when there is some value to add, like adding a <code>LoadAll()</code> method or whatever.</p>&#xA;"
21727,2,21715,"2008-08-22 03:33:17",0,NULL,"<p><strong>6 of 1, half dozen of another</strong> </p>&#xA;&#xA;<p>Either way its the same thing. I only do it when I have reason to add custom code into the BusinessObjectCollection. </p>&#xA;&#xA;<p>With out it having load methods return a list allows me to write more code in a common generic class and have it just work. Such as a Load method.</p>&#xA;"
21730,2,21715,"2008-08-22 03:34:19",9,NULL,"<p>I prefer just to use <code>List&lt;BusinessObject&gt;</code>.  Typedefing it just adds unnecessary boilerplate to the code.  <code>List&lt;BusinessObject&gt;</code> is a specific type, it's not just any <code>List</code> object, so it's still strongly typed.</p>&#xA;&#xA;<p>More importantly, declaring something <code>List&lt;BusinessObject&gt;</code> makes it easier for everyone reading the code to tell what types they are dealing with, they don't have to search through to figure out what a <code>BusinessObjectCollection</code> is and then remember that it's just a list.  By typedefing, you'll have to require a consistent (re)naming convention that everyone has to follow in order for it to make sense.</p>&#xA;"
21731,2,21715,"2008-08-22 03:35:09",3,NULL,"<p>You should probably avoid creating your own collection for that purpose.  It's pretty common to want to change the type of data structure a few times during refactorings or when adding new features.  With your approach, you would wind up with a separate class for BusinessObjectList, BusinessObjectDictionary, BusinessObjectTree, etc.</p>&#xA;&#xA;<p>I don't really see any value in creating this class just because the classname is more readable.  Yeah, the angle bracket syntax is kind of ugly, but it's standard in C++, C# and Java, so even if you don't write code that uses it you're going to run into it all the time.</p>&#xA;"
21733,2,21715,"2008-08-22 03:39:06",14,NULL,"<p>It's <a href=&quot;http://blogs.msdn.com/fxcop/archive/2006/04/27/faq-why-does-donotexposegenericlists-recommend-that-i-expose-collection-lt-t-gt-instead-of-list-lt-t-gt-david-kean.aspx&quot;>recommended</a> that in public API's not to use List&lt;T&gt;, but to use Collection&lt;T&gt;</p>&#xA;&#xA;<p>If you are inheriting from it though, you should be fine, afaik.</p>&#xA;"
21786,2,21715,"2008-08-22 04:46:28",46,NULL,"<p>I am generally in the camp of just using a  List directly, unless for some reason I need to encapsulate the data structure and provide a limited subset of its functionality. This is mainly because if I don't have a specific need for encapsulation then doing it is just a waste of time.</p>&#xA;&#xA;<p>However, with the aggregate initializes feature in C# 3.0, there are some new situations where I would advocate using customized collection classes.</p>&#xA;&#xA;<p>Basically, C# 3.0 allows any class that implements <code>IEnumerable</code> and has an Add method to use the new aggregate initializer syntax. For example, because Dictionary defines a method Add(K key, V value) it is possible to initialize a dictionary using this syntax:</p>&#xA;&#xA;<pre><code>var d = new Dictionary&lt;string, int&gt;&#xA;{&#xA;    {&quot;hello&quot;, 0},&#xA;    {&quot;the answer to life the universe and everything is:&quot;, 42}&#xA;};&#xA;</code></pre>&#xA;&#xA;<p>The great thing about the feature is that it works for add methods with any number of arguments. For example, given this collection:</p>&#xA;&#xA;<pre><code>class c1 : IEnumerable&#xA;{&#xA;    void Add(int x1, int x2, int x3)&#xA;    {&#xA;        //...&#xA;    }&#xA;&#xA;    //...&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>it would be possible to initialize it like so:</p>&#xA;&#xA;<pre><code>var x = new c1&#xA;{&#xA;    {1,2,3},&#xA;    {4,5,6}&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>This can be really useful if you need to create static tables of complex objects. For example, if you were just using <code>List&lt;Customer&gt;</code> and you wanted to create a static list of customer objects you would have to create it like so:</p>&#xA;&#xA;<pre><code>var x = new List&lt;Customer&gt;&#xA;{&#xA;    new Customer(&quot;Scott Wisniewski&quot;, &quot;555-555-5555&quot;, &quot;Seattle&quot;, &quot;WA&quot;),&#xA;    new Customer(&quot;John Doe&quot;, &quot;555-555-1234&quot;, &quot;Los Angeles&quot;, &quot;CA&quot;),&#xA;    new Customer(&quot;Michael Scott&quot;, &quot;555-555-8769&quot;, &quot;Scranton PA&quot;),&#xA;    new Customer(&quot;Ali G&quot;, &quot;&quot;, &quot;Staines&quot;, &quot;UK&quot;)&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>However, if you use a customized collection, like this one:</p>&#xA;&#xA;<pre><code>class CustomerList  : List&lt;Customer&gt;&#xA;{&#xA;    public void Add(string name, string phoneNumber, string city, string stateOrCountry)&#xA;    {&#xA;        Add(new Customer(name, phoneNumber, city, stateOrCounter));&#xA;    }&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>You could then initialize the collection using this syntax:</p>&#xA;&#xA;<pre><code>var customers = new CustomerList&#xA;{&#xA;    {&quot;Scott Wisniewski&quot;, &quot;555-555-5555&quot;, &quot;Seattle&quot;, &quot;WA&quot;},&#xA;    {&quot;John Doe&quot;, &quot;555-555-1234&quot;, &quot;Los Angeles&quot;, &quot;CA&quot;},&#xA;    {&quot;Michael Scott&quot;, &quot;555-555-8769&quot;, &quot;Scranton PA&quot;},&#xA;    {&quot;Ali G&quot;, &quot;&quot;, &quot;Staines&quot;, &quot;UK&quot;}&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>This has the advantage of being both easier to type and easier to read because their is no need to retype the element type name for each element. The advantage can be particularly strong if the element type is long or complex. </p>&#xA;&#xA;<p>That being said, this is only useful if you need static collections of data defined in your app. Some types of apps, like compilers, use them all the time. Others, like typical database apps don't because they load all their data from a database.</p>&#xA;&#xA;<p>My advice would be that if you either need to define a static collection of objects, or need to encapsulate away the collection interface,  then create a custom collection class. Otherwise I would just use <code>List&lt;T&gt;</code> directly.</p>&#xA;"
21806,2,21715,"2008-08-22 05:02:08",1,NULL,"<p>I use generic lists for almost all scenarios.  The only time that I would consider using a derived collection anymore is if I add collection specific members.  However, the advent of LINQ has lessened the need for even that.</p>&#xA;"
43133,2,21715,"2008-09-04 03:20:19",-1,NULL,"<p>this is the way:</p>&#xA;&#xA;<p>return arrays, accept <code>IEnumerable&lt;T&gt;</code></p>&#xA;&#xA;<p>=)</p>&#xA;"
75319,2,21715,"2008-09-16 18:15:57",0,NULL,"<p>As someone else pointed out, it is recommended not to expose List publicly, and FxCop will whinge if you do so.  This includes inheriting from List as in:</p>&#xA;&#xA;<pre><code>public MyTypeCollection : List&lt;MyType&gt;&#xA;</code></pre>&#xA;&#xA;<p>In most cases public APIs will expose IList (or ICollection or IEnumerable) as appropriate.</p>&#xA;&#xA;<p>In cases where you want your own custom collection, you can keep FxCop quiet by inheriting from Collection instead of List.   </p>&#xA;"
93950,2,21715,"2008-09-18 16:05:46",0,NULL,"<p>If you choose to create your own collection class you should check out the types in <a href=&quot;http://msdn.microsoft.com/en-us/library/system.collections.objectmodel.aspx&quot; rel=&quot;nofollow&quot;>System.Collections.ObjectModel Namespace</a>. </p>&#xA;&#xA;<p>The namespace defines base classes thare are ment to make it easier for implementers to create a custom collections.</p>&#xA;"
94012,2,21715,"2008-09-18 16:11:13",0,NULL,"<p>I tend to do it with my own collection if I want to shield the access to the actual list. When you are writing business objects, chance is that you need a hook to know if your object is being added/removed, in such sense I think BOCollection is better idea. Of coz if that is not required, List is more lightweight. Also you might want to check using IList to provide additional abstraction interface if you need some kind of proxying (e.g. a fake collection triggers lazy load from database)</p>&#xA;&#xA;<p>But... why not consider Castle ActiveRecord or any other mature ORM framework? :)</p>&#xA;"
94032,2,21715,"2008-09-18 16:13:09",0,NULL,"<p>At the most of the time I simply go with the List way, as it gives me all the functionality I need at the 90% of the time, and when something 'extra' is needed, I inherit from it, and code that extra bit.</p>&#xA;"
192059,2,21715,"2008-10-10 16:07:10",0,NULL,"<p>I would do this:</p>&#xA;&#xA;<pre><code>using BusinessObjectCollection = List&lt;BusinessObject&gt;;&#xA;</code></pre>&#xA;&#xA;<p>This just creates an alias rather than a completely new type.  I prefer it to using List&lt;BusinessObject> directly because it leaves me free to change the underlying structure of the collection at some point in the future without changing code that uses it (as long as I provide the same properties and methods).</p>&#xA;"
394843,2,21715,"2008-12-27 09:45:12",0,NULL,"<p>try out this:</p>&#xA;&#xA;<pre><code>System.Collections.ObjectModel.Collection&lt;BusinessObject&gt;&#xA;</code></pre>&#xA;&#xA;<p>it makes unnecessary to implement basic method like CollectionBase do</p>&#xA;"
483504,2,21715,"2009-01-27 14:07:59",2,NULL,"<p>You can use both. For laziness - I mean productivity - List is a very useful class, it's also &quot;comprehensive&quot; and frankly full of YANGNI members. Coupled with the sensible argument / recommendation put forward by the <a href=&quot;http://blogs.msdn.com/fxcop/archive/2006/04/27/faq-why-does-donotexposegenericlists-recommend-that-i-expose-collection-lt-t-gt-instead-of-list-lt-t-gt-david-kean.aspx&quot; rel=&quot;nofollow&quot;>MSDN article</a> already linked about exposing List as a public member, I prefer the &quot;third&quot; way:</p>&#xA;&#xA;<p>Personally I use the decorator pattern to expose only what I need from List i.e:</p>&#xA;&#xA;<pre><code>public OrderItemCollection : IEnumerable&lt;OrderItem&gt; &#xA;{&#xA;    private readonly List&lt;OrderItem&gt; _orderItems = new List&lt;OrderItem&gt;();&#xA;&#xA;    void Add(OrderItem item)&#xA;    {&#xA;         _orderItems.Add(item)&#xA;    }&#xA;&#xA;    //implement only the list members, which are required from your domain. &#xA;    //ie. sum items, calculate weight etc...&#xA;&#xA;    private IEnumerator&lt;string&gt; Enumerator() {&#xA;        return _orderItems.GetEnumerator();&#xA;    }&#xA;&#xA;    public IEnumerator&lt;string&gt; GetEnumerator() {&#xA;        return Enumerator();&#xA;    }    &#xA;}&#xA;</code></pre>&#xA;&#xA;<p>Further still I'd probably abstract OrderItemCollection into IOrderItemCollection so I can swap my implementation of IOrderItemCollection over in the future in (I may prefer to use a different inner enumerable object such as Collection or more likley for perf use a Key Value Pair collection or Set.</p>&#xA;"
483590,2,21715,"2009-01-27 14:28:20",4,NULL,"<p>Use the type <code>List&lt;BusinessObject&gt;</code> where you have to declare a list of them. However,&#xA;where you return a list of <code>BusinessObject</code>, consider returning <code>IEnumerable&lt;T&gt;</code>, <code>IList&lt;T&gt;</code> or <code>ReadOnlyCollection&lt;T&gt;</code> - i.e. return the weakest possible contract that satisfies the client. </p>&#xA;&#xA;<p>Where you want to &quot;add custom code&quot; to a list, code extension methods on the list type. Again, attach these methods to the weakest possible contract, e.g.</p>&#xA;&#xA;<pre><code>public static int SomeCount(this IEnumerable&lt;BusinessObject&gt; someList)&#xA;</code></pre>&#xA;&#xA;<p>Of course, you can't and shouldn't add state with extension methods, so if you need to add a new property and a field behind it, use a subclass or better, a wrapper class to store this.</p>&#xA;"
24856,2,24853,"2008-08-24 05:21:22",11,NULL,"<p>++i increments the value, then returns it.</p>&#xA;&#xA;<p>i++ returns the value, and then increments it.</p>&#xA;&#xA;<p>It's a subtle difference.</p>&#xA;&#xA;<p>For a for loop, use ++i, as it's slightly faster. i++ will create an extra copy that just gets thrown away.</p>&#xA;"
24858,2,24853,"2008-08-24 05:23:18",411,NULL,"<ul>&#xA;<li><p><code>++i</code> will increment the value of <code>i</code>, and then return the incremented value.</p>&#xA;&#xA;<pre><code> i = 1;&#xA; j = ++i;&#xA; (i is 2, j is 2)&#xA;</code></pre></li>&#xA;<li><p><code>i++</code> will increment the value of <code>i</code>, but return the original value that <code>i</code> held before being incremented.</p>&#xA;&#xA;<pre><code> i = 1;&#xA; j = i++;&#xA; (i is 2, j is 1)&#xA;</code></pre></li>&#xA;</ul>&#xA;&#xA;<p>For a <code>for</code> loop, either works. <code>++i</code> seems more common, perhaps because that is what is used in K&amp;R.</p>&#xA;&#xA;<p>In any case, follow the guideline &quot;prefer <code>++i</code> over <code>i++</code>&quot; and you won't go wrong.</p>&#xA;&#xA;<p>There's a couple of comments regarding the efficiency of <code>++i</code> and <code>i++</code>. In any non-student-project compiler, there will be no performance difference.  You can verify this by looking at the generated code, which will be identical.</p>&#xA;&#xA;<p>The efficiency question is interesting... here's my attempt at an answer:&#xA;<a href=&quot;http://stackoverflow.com/questions/24886/is-there-a-performance-difference-between-i-and-i&quot;>Is there a performance difference between i++ and ++i in C?</a></p>&#xA;&#xA;<p>As <em>On Freund</em> notes, it's different for a C++ object, since <code>operator++()</code> is a function and the compiler can't know to optimize away the creation of a temporary object to hold the intermediate value.</p>&#xA;"
24873,2,24853,"2008-08-24 05:57:30",3,NULL,"<p>Not sure the original poster is interested, but in C++ the difference in performance can be substantial, since the creation of the temporary object might be expensive for a user defined type.</p>&#xA;"
24874,2,24853,"2008-08-24 06:00:54",8,NULL,"<p>The reason ++i <em>can</em> be slightly faster than i++ is that i++ can require a local copy of the value of i before it gets incremented, while ++i never does. In some cases, some compilers will optimize it away if possible... but it's not always possible, and not all compilers do this.</p>&#xA;&#xA;<p>I try not to rely too much on compilers optimizations, so I'd follow Ryan Fox's advice: when I can use both, I use ++i. </p>&#xA;"
65140,2,24853,"2008-09-15 17:55:42",5,NULL,"<p>@Ahinav and Brad Wilson:</p>&#xA;&#xA;<p>The statements</p>&#xA;&#xA;<pre><code>x = i++ + ++i;&#xA;</code></pre>&#xA;&#xA;<p>and</p>&#xA;&#xA;<pre><code>x = ++i + i++;&#xA;</code></pre>&#xA;&#xA;<p>are undefined in C (meaning the compiler can do whatever it wants with them). The standard says:</p>&#xA;&#xA;<blockquote>&#xA;  <p>Between the previous and next sequence point an object shall have its stored value modified at most once by the evaluation of an expression. Furthermore, the prior value shall be accessed only to determine the value to be stored.</p>&#xA;</blockquote>&#xA;&#xA;<p>See <a href=&quot;http://c-faq.com/expr/seqpoints.html&quot; title=&quot;The Comp.Lang.C FAQ Article on Sequence Points&quot;>The Comp.Lang.C FAQ Article on Sequence Points</a></p>&#xA;"
107181,2,24853,"2008-09-20 05:06:46",11,NULL,"<p>Please don't worry about the &quot;efficiency&quot; (speed, really) of which one is faster.  We have compilers these days that take care of these things.  Use whichever one makes sense to use, based on which more clearly shows your intent.</p>&#xA;"
5917266,2,24853,"2011-05-06 21:36:49",6,NULL,"<p>The effective result of using either is identical.  In other words, the loop will do the same exact thing in both instances.</p>&#xA;&#xA;<p>In terms of efficiency, there could be a penalty involved with choosing i++ over ++i.  In terms of the language spec, using the post-increment operator should create an extra copy of the value on which the operator is acting.  This could be a source of extra operations.</p>&#xA;&#xA;<p>However, you should consider two main problems with the preceding logic.</p>&#xA;&#xA;<ol>&#xA;<li><p>Modern compilers are great.  All good compilers are smart enough to realize that it is seeing an integer increment in a for-loop, and it will optimize both methods to the same efficient code.  If using post-increment over pre-increment actually causes your program to have a slower running time, then you are using a <em>terrible</em> compiler.</p></li>&#xA;<li><p>In terms of operational time-complexity, the two methods (even if a copy is actually being performed) are equivalent.  The number of instructions being performed inside of the loop should dominate the number of operations in the increment operation significantly.  Therefore, in any loop of significant size, the penalty of the increment method will be massively overshadowed by the execution of the loop body.  In other words, you are much better off worrying about optimizing the code in the loop rather than the increment.</p></li>&#xA;</ol>&#xA;&#xA;<p>In my opinion, the whole issue simply boils down to a style preference.  If you think pre-increment is more readable, then use it.  Personally, I prefer the post-incrment, but that is probably because it was what I was taught before I knew anything about optimization.</p>&#xA;&#xA;<p>This is a quintessential example of premature optimization, and issues like this have the potential to distract us from serious issues in design.  It is still a good question to ask, however, because there is no uniformity in usage or consensus in &quot;best practice.&quot;</p>&#xA;"
6945779,2,24853,"2011-08-04 17:20:53",1,NULL,"<p>I assume you understand the difference in semantics now (though honestly I wonder why&#xA;people ask 'what does operator X mean' questions on stack overflow rather than reading,&#xA;you know, a book or web tutorial or something.</p>&#xA;&#xA;<p>But anyway, as far as which one to use, ignore questions of performance, which are&#xA;unlikely important even in C++.  This is the principle you should use when deciding&#xA;which to use:</p>&#xA;&#xA;<p>Say what you mean in code.</p>&#xA;&#xA;<p>If you don't need the value-before-increment in your statement, don't use that form of the operator.  It's a minor issue, but unless you are working with a style guide that bans one&#xA;version in favor of the other altogether (aka a bone-headed style guide), you should use&#xA;the form that most exactly expresses what you are trying to do.</p>&#xA;&#xA;<p>QED, use the pre-increment version:</p>&#xA;&#xA;<pre><code>for (int i = 0; i != X; ++i) ...&#xA;</code></pre>&#xA;"
9901848,2,24853,"2012-03-28 05:54:27",70,NULL,"<p><strong>i++</strong> is known as <strong>Post Increment</strong> whereas <strong>++i</strong> is called <strong>Pre Increment.</strong></p>&#xA;&#xA;<p><strong><code>i++</code></strong></p>&#xA;&#xA;<p><code>i++</code> is post increment because it increments <code>i</code>'s value by 1 after the operation is over.</p>&#xA;&#xA;<p>Lets see the following example:</p>&#xA;&#xA;<pre><code>int i = 1, j;&#xA;j = i++;&#xA;</code></pre>&#xA;&#xA;<p>Here value of <code>j = 1</code> but <code>i = 2</code>. Here value of <code>i</code> will be assigned to <code>j</code> first then <code>i</code> will be incremented.</p>&#xA;&#xA;<p><strong><code>++i</code></strong> </p>&#xA;&#xA;<p><code>++i</code> is pre increment because it increments <code>i</code>'s value by 1 before the operation.&#xA;It means <code>j = i;</code> will execute after <code>i++</code>. </p>&#xA;&#xA;<p>Lets see the following example:</p>&#xA;&#xA;<pre><code>int i = 1, j;&#xA;j = ++i;&#xA;</code></pre>&#xA;&#xA;<p>Here value of <code>j = 2</code> but <code>i = 2</code>. Here value of <code>i</code> will be assigned to <code>j</code> after the <code>i</code>  incremention of <code>i</code>.&#xA;Similarly <code>++i</code> will be executed before <code>j=i;</code>.</p>&#xA;&#xA;<p>For your question  <strong>which should be used in the incrementation block of a for loop?</strong> the answer is, you can use any one.. no matter. It will execute your for loop same no. of times.</p>&#xA;&#xA;<pre><code>for(i=0; i&lt;5; i++)&#xA;   printf(&quot;%d &quot;,i);&#xA;</code></pre>&#xA;&#xA;<p>And</p>&#xA;&#xA;<pre><code>for(i=0; i&lt;5; ++i)&#xA;   printf(&quot;%d &quot;,i);&#xA;</code></pre>&#xA;&#xA;<p>Both the loops will produce same output. ie <code>0 1 2 3 4</code>.</p>&#xA;&#xA;<p>It only matters where you are using it.</p>&#xA;&#xA;<pre><code>for(i = 0; i&lt;5;)&#xA;    printf(&quot;%d &quot;,++i);&#xA;</code></pre>&#xA;&#xA;<p>In this case output will be <code>1 2 3 4 5</code>.</p>&#xA;"
14455004,2,24853,"2013-01-22 09:13:53",0,NULL,"<p>a=i++ means i value will be stored in a without incrementing&#xA;a=++i means i value will be stored with incrementing...</p>&#xA;"
17851935,2,24853,"2013-07-25 07:42:31",6,NULL,"<p>i++ :- In this scenario first the value is assigned and then increment happens. </p>&#xA;&#xA;<p>++i :- In this scenario first the increment is done and then value is assigned</p>&#xA;&#xA;<p>Below is the image visualization and also here is a nice practical video ( <a href=&quot;http://www.youtube.com/watch?v=lrtcfgbUXm4&quot;>http://www.youtube.com/watch?v=lrtcfgbUXm4</a>) which demonstrates the same.</p>&#xA;&#xA;<p><img src=&quot;http://i.stack.imgur.com/YTZO8.png&quot; alt=&quot;enter image description here&quot;></p>&#xA;"
18387007,2,24853,"2013-08-22 17:25:35",0,NULL,"<p>Shortly :&#xA;++i and i++ works same if you are not writing them in a function.&#xA;If you use something like function(i++) or function(++i) you can see the difference.</p>&#xA;&#xA;<p>function(++i) says first increment i by 1, after that put this i into the function with new value.</p>&#xA;&#xA;<p>function(i++) says put first i into the function after that increment i by 1.</p>&#xA;&#xA;<pre><code>int i=4;&#xA;printf(&quot;%d\n&quot;,pow(++i,2));//it prints 25 and i is 5 now&#xA;i=4;&#xA;printf(&quot;%d&quot;,pow(i++,2));//it prints 16 i is 5 now&#xA;</code></pre>&#xA;"
18849765,2,24853,"2013-09-17 12:23:46",0,NULL,"<p>++i is pre-increment the other is post-increment</p>&#xA;&#xA;<p>i++: gets the element and then increments it.<br>&#xA;++i: increments i and then returns the element</p>&#xA;&#xA;<p>Example:</p>&#xA;&#xA;<pre><code>int i = 0;&#xA;printf(&quot;i: %d\n&quot;, i);&#xA;printf(&quot;i++: %d\n&quot;, i++);&#xA;printf(&quot;++i: %d\n&quot;, ++i);&#xA;</code></pre>&#xA;&#xA;<p>Output:</p>&#xA;&#xA;<pre><code>i: 0&#xA;i++: 0&#xA;++i: 2&#xA;</code></pre>&#xA;"
19978310,2,24853,"2013-11-14 13:01:23",-1,NULL,"<p>Here is the example to understand the difference</p>&#xA;&#xA;<p>int i=10;&#xA;printf(&quot;%d %d&quot;,i++,++i);</p>&#xA;&#xA;<p>output:10 12/11 11(based on evaluation of parameters in printf statement which vary from compiler to compiler)</p>&#xA;&#xA;<p>Explaination:&#xA;i++->'i' is printed and then increments.(Prints 10 but 'i' will becomes 11)&#xA;++i->'i' value increments and prints the value.(Prints 12 &amp; value of 'i' also 12)</p>&#xA;"
24887,2,24886,"2008-08-24 06:48:59",204,NULL,"<p>Executive summary:  No.</p>&#xA;&#xA;<p>i++ could potentially be slower than ++i, since the old value of i&#xA;might need to be saved for later use, but in practice all modern&#xA;compilers will optimize this away.</p>&#xA;&#xA;<p>We can demonstrate this by looking at the code for this function,&#xA;both with ++i and i++.</p>&#xA;&#xA;<pre><code>$ cat i++.c&#xA;extern void g(int i);&#xA;void f()&#xA;{&#xA;    int i;&#xA;&#xA;    for (i = 0; i &lt; 100; i++)&#xA;        g(i);&#xA;&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>The files are the same, except for ++i and i++:</p>&#xA;&#xA;<pre><code>$ diff i++.c ++i.c&#xA;6c6&#xA;&lt;     for (i = 0; i &lt; 100; i++)&#xA;---&#xA;&gt;     for (i = 0; i &lt; 100; ++i)&#xA;</code></pre>&#xA;&#xA;<p>We'll compile them, and also get the generated assembler:</p>&#xA;&#xA;<pre><code>$ gcc -c i++.c ++i.c&#xA;$ gcc -S i++.c ++i.c&#xA;</code></pre>&#xA;&#xA;<p>And we can see that both the generated object and assembler files are the same.</p>&#xA;&#xA;<pre><code>$ md5 i++.s ++i.s&#xA;MD5 (i++.s) = 90f620dda862cd0205cd5db1f2c8c06e&#xA;MD5 (++i.s) = 90f620dda862cd0205cd5db1f2c8c06e&#xA;&#xA;$ md5 *.o&#xA;MD5 (++i.o) = dd3ef1408d3a9e4287facccec53f7d22&#xA;MD5 (i++.o) = dd3ef1408d3a9e4287facccec53f7d22&#xA;</code></pre>&#xA;"
25077,2,24886,"2008-08-24 14:22:48",0,NULL,"<p>My C is a little rusty, so I apologize in advance.  Speedwise, I can understand the results.  But, I am confused as to how both files came out to the same MD5 hash.  Maybe a for loop runs the same, but wouldn't the following 2 lines of code generate different assembly?</p>&#xA;&#xA;<pre><code>myArray[i++] = &quot;hello&quot;;&#xA;</code></pre>&#xA;&#xA;<p>vs</p>&#xA;&#xA;<pre><code>myArray[++i] = &quot;hello&quot;;&#xA;</code></pre>&#xA;&#xA;<p>The first one writes the value to the array, then increments i.  The second increments i then writes to the array.  I'm no assembly expert, but I just don't see how the same executable would be generated by these 2 different lines of code.</p>&#xA;&#xA;<p>Just my two cents.</p>&#xA;"
25081,2,24886,"2008-08-24 14:29:02",3,NULL,"<p>In C, the compiler can generally optimize them to be the same if the result is unused.</p>&#xA;&#xA;<p>However, in C++ if using other types that provide their own ++ operators, the prefix version is likely to be faster than the postfix version.  So, if you don't need the postfix semantics, it is better to use the prefix operator.</p>&#xA;"
25657,2,24886,"2008-08-25 04:29:03",7,NULL,"<p>Taking a leaf from Scott Meyers, <a href=&quot;http://rads.stackoverflow.com/amzn/click/020163371X&quot;>More Effective c++</a> <em>Item 6: Distinguish between prefix and postfix forms of increment and decrement operations</em>.</p>&#xA;&#xA;<p>The prefix version is always preferred over the postfix in regards to objects, especially in regards to iterators.</p>&#xA;&#xA;<p>The reason for this if you look at the call pattern of the operators.</p>&#xA;&#xA;<pre><code>// Prefix&#xA;Integer&amp; Integer::operator++()&#xA;{&#xA;    *this += 1;&#xA;    return *this;&#xA;}&#xA;&#xA;// Postfix&#xA;const Integer Integer::operator++(int)&#xA;{&#xA;    Integer oldValue = *this;&#xA;    ++(*this);&#xA;    return oldValue;&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>Looking at this example it is easy to see how the prefix operator will always be more efficient than the postfix. Because of the need for a temporary object in the use of the postfix.</p>&#xA;&#xA;<p>This is why when you see examples using iterators they always use the prefix version.</p>&#xA;&#xA;<p>But as you point out for int's there is effectively no difference because of compiler optimisation that can take place.</p>&#xA;"
25668,2,24886,"2008-08-25 04:49:22",19,NULL,"<p>A better answer is that ++i will sometimes be faster but never slower.</p>&#xA;&#xA;<p>Everyone seems to be assuming that 'i' is a regular built-in type such as int. In this case there will be no measurable difference.</p>&#xA;&#xA;<p>However if 'i' is  complex type then you may well find a measurable difference. For i++ you must make a copy of your class before incrementing it. Depending on what's involved in a copy it could indeed be slower since with ++it you can just return the final value.</p>&#xA;&#xA;<pre><code>Foo Foo::operator++()&#xA;{&#xA;  Foo oldFoo = *this; // copy existing value - could be slow&#xA;  // yadda yadda, do increment&#xA;  return oldFoo;&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>Another difference is that with ++i you have the option of returning a reference instead of a value. Again, depending on what's involved in making a copy of your object this could be slower.</p>&#xA;&#xA;<p>A real-world example of where this can occur would be the use of iterators. Copying an iterator is unlikely to be a bottle-neck in your application, but it's still good practice to get into the habit of using ++i instead of i++ where the outcome is not affected.</p>&#xA;"
39286,2,24886,"2008-09-02 11:39:44",8,NULL,"<p>Here's an additional observation if you're worried about micro optimisation. Decrementing loops can 'possibly' be more efficient than incrementing loops (depending on instruction set architecture e.g. ARM), given:</p>&#xA;&#xA;<blockquote>&#xA;  <p>for (i = 0; i &lt; 100; i++)</p>&#xA;</blockquote>&#xA;&#xA;<p>On each loop you you will have one instruction each for:</p>&#xA;&#xA;<ol>&#xA;<li>Adding 1 to i  </li>&#xA;<li>Compare whether i is less than a 100</li>&#xA;<li>A conditional branch if i is less than a 100</li>&#xA;</ol>&#xA;&#xA;<p>Whereas a decrementing loop:</p>&#xA;&#xA;<blockquote>&#xA;  <p>for (i = 100; i != 0; i--)</p>&#xA;</blockquote>&#xA;&#xA;<p>The loop will have an instruction for each of:</p>&#xA;&#xA;<ol>&#xA;<li>Decrement i, setting the CPU register status flag</li>&#xA;<li>A conditional branch depending on CPU register status (Z==0)</li>&#xA;</ol>&#xA;&#xA;<p>Of course this works only when decrementing to zero!</p>&#xA;&#xA;<p>Remembered from the ARM System Developer's Guide.</p>&#xA;"
39306,2,24886,"2008-09-02 11:48:16",53,NULL,"<p>From <a href=&quot;http://www.drdobbs.com/architecture-and-design/efficiency-versus-intent/228700184&quot;>Efficiency versus intent</a> by Andrew Koenig :</p>&#xA;&#xA;<blockquote>&#xA;  <p>First, it is far from obvious that ++i is more efficient than i++, at least where integer variables are concerned.</p>&#xA;</blockquote>&#xA;&#xA;<p>And :</p>&#xA;&#xA;<blockquote>&#xA;  <p>So the question one should be asking is not which of these two operations is faster, it is which of these two operations expresses more accurately what you are trying to accomplish.  I submit that if you are not using the value of the expression, there is never a reason to use i++ instead of ++i, because there is never a reason to copy the value of a variable, increment the variable, and then throw the copy away.</p>&#xA;</blockquote>&#xA;&#xA;<p>So, if the resulting value is not used, I would use ++i. But not because it is more efficient: because it correctly states my intent. </p>&#xA;"
107193,2,24886,"2008-09-20 05:09:18",3,NULL,"<p>Please don't let the question of &quot;which one is faster&quot; be the deciding factor of which to use.  Chances are you're never going to care that much, and besides, programmer reading time is far more expensive than machine time.</p>&#xA;&#xA;<p>Use whichever makes most sense to the human reading the code.</p>&#xA;"
528667,2,24886,"2009-02-09 15:40:45",4,NULL,"<p>@Mark&#xA;Even though the compiler is allowed to optimize away the (stack based) temporary copy of the variable and gcc (in recent versions) is doing so,&#xA;doesn't mean <strong>all</strong> compilers will always do so.</p>&#xA;&#xA;<p>I just tested it with the compilers we use in our current project and 3 out of 4 do not optimize it.</p>&#xA;&#xA;<p>Never assume the compiler gets it right, especially if the possibly faster, but never slower code is as easy to read.</p>&#xA;&#xA;<p>If you don't have a really stupid implementation of one of the operators in your code:</p>&#xA;&#xA;<p><strong>Alwas prefer ++i over i++.</strong></p>&#xA;"
24044354,2,24886,"2014-06-04 17:57:51",0,NULL,"<p>I can think of a situation where postfix is slower than prefix increment:</p>&#xA;&#xA;<p>Imagine a processor with register <code>A</code> is used as accumulator and it's the only register used in many instructions (some small microcontrollers are actually like this).</p>&#xA;&#xA;<p>Now imagine the following program and their translation into a hypothetical assembly:</p>&#xA;&#xA;<p>Prefix increment:</p>&#xA;&#xA;<pre><code>a = ++b + c;&#xA;&#xA;; increment b&#xA;LD    A, [&amp;b]&#xA;INC   A&#xA;ST    A, [&amp;b]&#xA;&#xA;; add with c&#xA;ADD   A, [&amp;c]&#xA;&#xA;; store in a&#xA;ST    A, [&amp;a]&#xA;</code></pre>&#xA;&#xA;<p>Postfix increment:</p>&#xA;&#xA;<pre><code>a = b++ + c;&#xA;&#xA;; load b&#xA;LD    A, [&amp;b]&#xA;&#xA;; add with c&#xA;ADD   A, [&amp;c]&#xA;&#xA;; store in a&#xA;ST    A, [&amp;a]&#xA;&#xA;; increment b&#xA;LD    A, [&amp;b]&#xA;INC   A&#xA;ST    A, [&amp;b]&#xA;</code></pre>&#xA;&#xA;<p>Note how the value of <code>b</code> was forced to be reloaded. With prefix increment, the compiler can just increment the value and go ahead with using it, possibly avoid reloading it since the desired value is already in the register after the increment. However, with postfix increment, the compiler has to deal with two values, one the old and one the incremented value which as I show above results in one more memory access.</p>&#xA;&#xA;<p>Of course, if the value of the increment is not used, such as a single <code>i++;</code> statement, the compiler can (and does) simply generate an increment instruction regardless of postfix or prefix usage.</p>&#xA;&#xA;<hr>&#xA;&#xA;<p>As a side note, I'd like to mention that an expression in which there is a <code>b++</code> cannot simply be converted to one with <code>++b</code> without any additional effort (for example by adding a <code>- 1</code>). So comparing the two if they are part of some expression is not really valid. Often, where you use <code>b++</code> inside an expression you cannot use <code>++b</code>, so even if <code>++b</code> were potentially more efficient, it would simply be wrong. Exception is of course if the expression is begging for it (for example <code>a = b++ + 1;</code> which can be changed to <code>a = ++b;</code>).</p>&#xA;"
24045013,2,24886,"2014-06-04 18:34:44",0,NULL,"<p>First of all: The difference between <code>i++</code> and <code>++i</code> is neglegible in C.</p>&#xA;&#xA;<hr>&#xA;&#xA;<p>To the details.</p>&#xA;&#xA;<h3>1. The well known C++ issue: <code>++i</code> is faster</h3>&#xA;&#xA;<p>In C++, <code>++i</code> is more efficient iff <code>i</code> is some kind of an object with an overloaded increment operator.</p>&#xA;&#xA;<p>Why?<br>&#xA;In <code>++i</code>, the object is first incremented, and can subsequently passed as a const reference to any other function. This is not possible if the expression is <code>foo(i++)</code> because now the increment needs to be done before <code>foo()</code> is called, but the old value needs to be passed to <code>foo()</code>. Consequently, the compiler is forced to make a copy of <code>i</code> before it executes the increment operator on the original. The additional constructor/destructor calls are the bad part.</p>&#xA;&#xA;<p>As noted above, this does not apply to fundamental types.</p>&#xA;&#xA;<h3>2. The little known fact: <code>i++</code> <em>may</em> be faster</h3>&#xA;&#xA;<p>If no constructor/destructor needs to be called, which is always the case in C, <code>++i</code> and <code>i++</code> should be equally fast, right? No. They are virtually equally fast, but there may be small differences, which most other answerers got the wrong way around.</p>&#xA;&#xA;<p>How can <code>i++</code> be faster?<br>&#xA;The point is data dependencies. If the value needs to be loaded from memory, two subsequent operations need to be done with it, incrementing it, and using it. With <code>++i</code>, the incrementation needs to be done <em>before</em> the value can be used. With <code>i++</code>, the use does not depend on the increment, and the CPU may perform the use operation <em>in parallel</em> to the increment operation. The difference is at most one CPU cycle, so it is really neglegible, but it is there. And it is the other way round then many would expect.</p>&#xA;"
26482954,2,24886,"2014-10-21 09:10:27",0,NULL,"<p><em>Short answer:</em> </p>&#xA;&#xA;<p>There is never any difference between i++ and ++i in terms of speed. A good compiler should not generate different code in the two cases.</p>&#xA;&#xA;<p><em>Long answer:</em></p>&#xA;&#xA;<p>What every other answer fail to mention is that the differences between ++i versus i++ only makes sense within the expression it is found. </p>&#xA;&#xA;<p>In the case of <code>for(i=0; i&lt;n; i++)</code>, the i++ is alone in its own expression: there is a sequence point before the i++ and there is one after it. Thus the only machine code generated is &quot;increase i by 1&quot; and it is well-defined how this is sequenced in relation to the rest of the program. So if you would change it to prefix ++, it wouldn't matter in the slightest, you would still just get the machine code &quot;increase i by 1&quot;.</p>&#xA;&#xA;<p>The differences between ++i and i++ only matters in expressions such as <code>array[i++] = x;</code> versus <code>array[++i] = x;</code>. Some may argue and say that the postfix will be slower in such operations because the register where <code>i</code> resides have to be reloaded later. But then note that the compiler is free to order your instructions in any way it pleases, as long as it doesn't &quot;break the behavior of the abstract machine&quot; as the C standard calls it.</p>&#xA;&#xA;<p>So while you may assume that <code>array[i++] = x;</code> gets translated to machine code as:</p>&#xA;&#xA;<ul>&#xA;<li>Store value of i in register A</li>&#xA;<li>Store address of array in register B</li>&#xA;<li>Add A and B, store results in A</li>&#xA;<li>At the address of A, store the value of x.</li>&#xA;<li>Store value of i in register A   // inefficient because extra instruction here, we already did this once</li>&#xA;<li>Increment i</li>&#xA;<li>Store register A in i</li>&#xA;</ul>&#xA;&#xA;<p>the compiler might as well produce the code more efficiently, such as:</p>&#xA;&#xA;<ul>&#xA;<li>Store value of i in register A</li>&#xA;<li>Store address of array in register B</li>&#xA;<li>Add A and B, store results in B</li>&#xA;<li>Increment i</li>&#xA;<li>Store register A in i</li>&#xA;<li>... // rest of the code</li>&#xA;</ul>&#xA;&#xA;<p>Just because you as a C programmer is trained to think that the postfix ++ happens at the end, the machine code doesn't have to be ordered in that way.</p>&#xA;&#xA;<p>So there is no difference between prefix and postfix ++ in C. Now what you as a C programmer should be vary of, is people who inconsistently use prefix in some cases and postfix in other cases, without any rationale why. This suggests that they are uncertain about how C works or that they have incorrect knowledge of the language. This is always a bad sign, it does in turn suggest that they are making other questionable decisions in their program, based on superstition or &quot;religious dogmas&quot;. </p>&#xA;&#xA;<p>&quot;Prefix ++ is always faster&quot; is indeed one such false dogma that is common among would-be C programmers.</p>&#xA;"
24904,2,24901,"2008-08-24 07:23:13",189,NULL,"<p>[Executive Summary: Use <code>++i</code> if you don't have a specific reason to use <code>i++</code>.]</p>&#xA;&#xA;<p>For C++, the answer is a bit more complicated.</p>&#xA;&#xA;<p>If <code>i</code> is a simple type (not an instance of a C++ class), then the answer given for C holds, since the compiler is generating the code.</p>&#xA;&#xA;<p>However, if <code>i</code> is an instance of a C++ class, then <code>i++</code> and <code>++i</code> are making calls to one of the <code>operator++</code> functions. Here's a standard pair of these functions:</p>&#xA;&#xA;<pre><code>Foo&amp; Foo::operator++()   // called for ++i&#xA;{&#xA;    this-&gt;data += 1;&#xA;    return *this;&#xA;}&#xA;&#xA;Foo Foo::operator++(int ignored_dummy_value)   // called for i++&#xA;{&#xA;    Foo tmp(*this);   // variable &quot;tmp&quot; cannot be optimized away by the compiler&#xA;    ++(*this);&#xA;    return tmp;&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>Since the compiler isn't generating code, but just calling an <code>operator++</code> function, there is no way to optimize away the <code>tmp</code> variable and its associated copy constructor. If the copy constructor is expensive, then this can have a significant performance impact.</p>&#xA;&#xA;<p>(Thanks to <a href=&quot;http://stackoverflow.com/users/1687/paul&quot;>Paul</a> for inquiring about the difference between C and C++.)</p>&#xA;"
24910,2,24901,"2008-08-24 07:44:11",37,NULL,"<p>Yes.  There is.</p>&#xA;&#xA;<p>The ++ operator may or may not be defined as a function.  For primitive types (int, double, ...) the operators are built in, so the compiler will probably be able to optimize your code.  But in the case of an object that defines the ++ operator things are different.</p>&#xA;&#xA;<p>The operator++(int) function must create a copy.  That is because postfix ++ is expected to return a different value than what it holds:  it must hold its value in a temp variable, increment its value and return the temp.  In the case of operator++(), prefix ++, there is no need to create a copy:  the object can increment itself and then simply return itself.</p>&#xA;&#xA;<p>Here is an illustration of the point:</p>&#xA;&#xA;<pre><code>struct C&#xA;{&#xA;    C&amp; operator++();      // prefix&#xA;    C  operator++(int);   // postfix&#xA;&#xA;private:&#xA;&#xA;    int i_;&#xA;};&#xA;&#xA;C&amp; C::operator++()&#xA;{&#xA;    ++i_;&#xA;    return *this;   // self, no copy created&#xA;}&#xA;&#xA;C C::operator++(int ignored_dummy_value)&#xA;{&#xA;    C t(*this);&#xA;    ++(*this);&#xA;    return t;   // return a copy&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>Every time you call operator++(int) you must create a copy, and the compiler can't do anything about it.  When given the choice, use operator++();  this way you don't save a copy.  It might be significant in the case of many increments (large loop?) and/or large objects.</p>&#xA;"
25092,2,24901,"2008-08-24 14:41:22",17,NULL,"<p>It's not entirely correct to say that the compiler can't optimize away the temporary variable copy in the postfix case. A quick test with VC shows that it, at least, can do that in certain cases.</p>&#xA;&#xA;<p>In the following example, the code generated is identical for prefix and postfix, for instance:</p>&#xA;&#xA;<pre><code>#include &lt;stdio.h&gt;&#xA;&#xA;class Foo&#xA;{&#xA;public:&#xA;&#xA;	Foo() { myData=0; }&#xA;	Foo(const Foo &amp;rhs) { myData=rhs.myData; }&#xA;&#xA;	const Foo&amp; operator++()&#xA;	{&#xA;		this-&gt;myData++;&#xA;		return *this;&#xA;	}&#xA;&#xA;	const Foo operator++(int)&#xA;	{&#xA;		Foo tmp(*this);&#xA;		this-&gt;myData++;&#xA;		return tmp;&#xA;	}&#xA;&#xA;	int GetData() { return myData; }&#xA;&#xA;private:&#xA;&#xA;	int myData;&#xA;};&#xA;&#xA;int main(int argc, char* argv[])&#xA;{&#xA;	Foo testFoo;&#xA;&#xA;	int count;&#xA;	printf(&quot;Enter loop count: &quot;);&#xA;	scanf(&quot;%d&quot;, &amp;count);&#xA;&#xA;	for(int i=0; i&lt;count; i++)&#xA;	{&#xA;		testFoo++;&#xA;	}&#xA;&#xA;	printf(&quot;Value: %d\n&quot;, testFoo.GetData());&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>Whether you do ++testFoo or testFoo++, you'll still get the same resulting code. In fact, without reading the count in from the user, the optimizer got the whole thing down to a constant. So this:</p>&#xA;&#xA;<pre><code>for(int i=0; i&lt;10; i++)&#xA;{&#xA;	testFoo++;&#xA;}&#xA;&#xA;printf(&quot;Value: %d\n&quot;, testFoo.GetData());&#xA;</code></pre>&#xA;&#xA;<p>Resulted in the following:</p>&#xA;&#xA;<pre><code>00401000  push        0Ah  &#xA;00401002  push        offset string &quot;Value: %d\n&quot; (402104h) &#xA;00401007  call        dword ptr [__imp__printf (4020A0h)]&#xA;</code></pre>&#xA;&#xA;<p>So while it's certainly the case that the postfix version could be slower, it may well be that the optimizer will be good enough to get rid of the temporary copy if you're not using it.</p>&#xA;"
25669,2,24901,"2008-08-25 04:52:46",0,NULL,"<p>An the reason why you ought to use ++i even on built-in types where there's no performance advantage is to create a good habit for yourself.</p>&#xA;"
30745,2,24901,"2008-08-27 18:03:39",0,NULL,"<p>@wilhelmtell</p>&#xA;&#xA;<p>The compiler can elide the temporary. Verbatim from the other thread:</p>&#xA;&#xA;<p>The C++ compiler is allowed to eliminate stack based temporaries even if doing so changes program behavior. MSDN link for VC 8: </p>&#xA;&#xA;<p><a href=&quot;http://msdn.microsoft.com/en-us/library/ms364057(VS.80).aspx&quot; rel=&quot;nofollow&quot;>http://msdn.microsoft.com/en-us/library/ms364057(VS.80).aspx</a></p>&#xA;"
35085,2,24901,"2008-08-29 19:18:22",2,NULL,"<p>There's something about it on <a href=&quot;http://google-styleguide.googlecode.com/svn/trunk/cppguide.xml?showone=Preincrement_and_Predecrement#Preincrement_and_Predecrement&quot; rel=&quot;nofollow&quot;>Google c++ coding style document</a>.</p>&#xA;"
42276,2,24901,"2008-09-03 18:37:26",2,NULL,"<p>@Ketan </p>&#xA;&#xA;<blockquote>&#xA;  <p>...raises over-looked detail regarding intent vs performance. There are times when we want to use iter++ instead of ++iter.</p>&#xA;</blockquote>&#xA;&#xA;<p>Obviously post and pre-increment have different semantics and I'm sure everyone agrees that when the result is used you should use the appropriate operator. I think the question is what should one do when the result is discarded (as in <code>for</code> loops). The answer to <em>this</em> question (IMHO) is that, since the performance considerations are negligible at best, you should do what is more natural. For myself <code>++i</code> is more natural but my experience tells me that I'm in a minority and using <code>i++</code> will cause less metal overhead for <em>most</em> people reading your code. </p>&#xA;&#xA;<p>After all that's the reason the language is not called &quot;<em><code>++C</code></em>&quot;.[*]</p>&#xA;&#xA;<p>[*] Insert obligatory discussion about <code>++C</code> being a more logical name. </p>&#xA;"
71340,2,24901,"2008-09-16 11:21:27",2,NULL,"<p>Mark: Just wanted to point out that operator++'s are good candidates to be inlined, and if the compiler elects to do so, the redundant copy will be eliminated in most cases. (e.g. POD types, which iterators usually are.)</p>&#xA;&#xA;<p>That said, it's still better style to use ++iter in most cases. :-)</p>&#xA;"
445270,2,24901,"2009-01-15 00:54:25",0,NULL,"<p>The intended question was about when the result is unused (that's clear from the question for C). Can somebody fix this since the question is &quot;community wiki&quot;?</p>&#xA;&#xA;<p>About premature optimizations, Knuth is often quoted. That's right. but Donald Knuth would never defend with that the horrible code which you can see in these days. Ever seen a = b + c among Java Integers (not int)? That amounts to 3 boxing/unboxing conversions. Avoiding stuff like that is important. And uselessly writing i++ instead of ++i is the same mistake.&#xA;EDIT: As phresnel nicely puts it in a comment, this can be summed up as &quot;premature optimization is evil, as is premature pessimization&quot;.</p>&#xA;&#xA;<p>Even the fact that people are more used to i++ is an unfortunate C legacy, caused by a conceptual mistake by K&amp;R (if you follow the intent argument, that's a logical conclusion; and defending K&amp;R because they're K&amp;R is meaningless, they're great, but they aren't great as language designers; countless mistakes in the C design exist, ranging from gets() to strcpy(), to the strncpy() API (it should have had the strlcpy() API since day 1)).</p>&#xA;&#xA;<p>Btw, I'm one of those not used enough to C++ to find ++i annoying to read. Still, I use that since I acknowledge that it's right.</p>&#xA;"
1319291,2,24901,"2009-08-23 19:04:57",1,NULL,"<p>@Mark: I deleted my previous answer because it was a bit flip, and deserved a downvote for that alone. I actually think it's a good question in the sense that it asks what's on the minds of a lot of people.</p>&#xA;&#xA;<p>The usual answer is that ++i is faster than i++, and no doubt it is, but the bigger question is &quot;when should you care?&quot;</p>&#xA;&#xA;<p>If the fraction of CPU time spent in incrementing iterators is less than 10%, then you may not care.</p>&#xA;&#xA;<p>If the fraction of CPU time spent in incrementing iterators is greater than 10%, you can look at which statements are doing that iterating. See if you could just increment integers rather than using iterators. Chances are you could, and while it may be in some sense less desirable, chances are pretty good you will save essentially all the time spent in those iterators.</p>&#xA;&#xA;<p>I've seen an example where the iterator-incrementing was consuming well over 90% of the time. In that case, going to integer-incrementing reduced execution time by essentially that amount. (i.e. better than 10x speedup)</p>&#xA;"
5616980,2,24901,"2011-04-11 05:09:01",0,NULL,"<p>Both are as fast ;)&#xA;If you want it is the same calculation for the processor, it's just the order in which it is done that differ.</p>&#xA;&#xA;<p>For example, the following code :</p>&#xA;&#xA;<pre><code>#include &lt;stdio.h&gt;&#xA;&#xA;int main()&#xA;{&#xA;    int a = 0;&#xA;    a++;&#xA;    int b = 0;&#xA;    ++b;&#xA;    return 0;&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>Produce the following assembly :</p>&#xA;&#xA;<blockquote>&#xA;<pre><code> 0x0000000100000f24 &lt;main+0&gt;: push   %rbp&#xA; 0x0000000100000f25 &lt;main+1&gt;: mov    %rsp,%rbp&#xA; 0x0000000100000f28 &lt;main+4&gt;: movl   $0x0,-0x4(%rbp)&#xA; 0x0000000100000f2f &lt;main+11&gt;:    incl   -0x4(%rbp)&#xA; 0x0000000100000f32 &lt;main+14&gt;:    movl   $0x0,-0x8(%rbp)&#xA; 0x0000000100000f39 &lt;main+21&gt;:    incl   -0x8(%rbp)&#xA; 0x0000000100000f3c &lt;main+24&gt;:    mov    $0x0,%eax&#xA; 0x0000000100000f41 &lt;main+29&gt;:    leaveq &#xA; 0x0000000100000f42 &lt;main+30&gt;:    retq&#xA;</code></pre>&#xA;</blockquote>&#xA;&#xA;<p>You see that for a++ and b++ it's an incl mnemonic, so it's the same operation ;)</p>&#xA;"
9519095,2,24901,"2012-03-01 15:38:24",15,NULL,"<p>Here's a benchmark for the case when increment operators are in different translation units. Compiler with g++ 4.5.</p>&#xA;&#xA;<p>Ignore the style issues for now</p>&#xA;&#xA;<pre><code>// a.cc&#xA;#include &lt;ctime&gt;&#xA;#include &lt;array&gt;&#xA;class Something {&#xA;public:&#xA;    Something&amp; operator++();&#xA;    Something operator++(int);&#xA;private:&#xA;    std::array&lt;int,PACKET_SIZE&gt; data;&#xA;};&#xA;&#xA;int main () {&#xA;    Something s;&#xA;&#xA;    for (int i=0; i&lt;1024*1024*30; ++i) ++s; // warm up&#xA;    std::clock_t a = clock();&#xA;    for (int i=0; i&lt;1024*1024*30; ++i) ++s;&#xA;    a = clock() - a;&#xA;&#xA;    for (int i=0; i&lt;1024*1024*30; ++i) s++; // warm up&#xA;    std::clock_t b = clock();&#xA;    for (int i=0; i&lt;1024*1024*30; ++i) s++;&#xA;    b = clock() - b;&#xA;&#xA;    std::cout &lt;&lt; &quot;a=&quot; &lt;&lt; (a/double(CLOCKS_PER_SEC))&#xA;              &lt;&lt; &quot;, b=&quot; &lt;&lt; (b/double(CLOCKS_PER_SEC)) &lt;&lt; '\n';&#xA;    return 0;&#xA;}&#xA;</code></pre>&#xA;&#xA;<hr>&#xA;&#xA;<h1>O(n) increment</h1>&#xA;&#xA;<h2>Test</h2>&#xA;&#xA;<pre><code>// b.cc&#xA;#include &lt;array&gt;&#xA;class Something {&#xA;public:&#xA;    Something&amp; operator++();&#xA;    Something operator++(int);&#xA;private:&#xA;    std::array&lt;int,PACKET_SIZE&gt; data;&#xA;};&#xA;&#xA;&#xA;Something&amp; Something::operator++()&#xA;{&#xA;    for (auto it=data.begin(), end=data.end(); it!=end; ++it)&#xA;        ++*it;&#xA;    return *this;&#xA;}&#xA;&#xA;Something Something::operator++(int)&#xA;{&#xA;    Something ret = *this;&#xA;    ++*this;&#xA;    return ret;&#xA;}&#xA;</code></pre>&#xA;&#xA;<h2>Results</h2>&#xA;&#xA;<p>Results (timings are in seconds) with g++ 4.5 on a virtual machine:</p>&#xA;&#xA;<pre><code>Flags (--std=c++0x)       ++i   i++&#xA;-DPACKET_SIZE=50 -O1      1.70  2.39&#xA;-DPACKET_SIZE=50 -O3      0.59  1.00&#xA;-DPACKET_SIZE=500 -O1    10.51 13.28&#xA;-DPACKET_SIZE=500 -O3     4.28  6.82&#xA;</code></pre>&#xA;&#xA;<hr>&#xA;&#xA;<h1>O(1) increment</h1>&#xA;&#xA;<h2>Test</h2>&#xA;&#xA;<p>Let us now take the following file:</p>&#xA;&#xA;<pre><code>// c.cc&#xA;#include &lt;array&gt;&#xA;class Something {&#xA;public:&#xA;    Something&amp; operator++();&#xA;    Something operator++(int);&#xA;private:&#xA;    std::array&lt;int,PACKET_SIZE&gt; data;&#xA;};&#xA;&#xA;&#xA;Something&amp; Something::operator++()&#xA;{&#xA;    return *this;&#xA;}&#xA;&#xA;Something Something::operator++(int)&#xA;{&#xA;    Something ret = *this;&#xA;    ++*this;&#xA;    return ret;&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>It does nothing in the incrementation. This simulates the case when incrementation has constant complexity.</p>&#xA;&#xA;<h2>Results</h2>&#xA;&#xA;<p>Results now vary extremely:</p>&#xA;&#xA;<pre><code>Flags (--std=c++0x)       ++i   i++&#xA;-DPACKET_SIZE=50 -O1      0.05   0.74&#xA;-DPACKET_SIZE=50 -O3      0.08   0.97&#xA;-DPACKET_SIZE=500 -O1     0.05   2.79&#xA;-DPACKET_SIZE=500 -O3     0.08   2.18&#xA;-DPACKET_SIZE=5000 -O3    0.07  21.90&#xA;</code></pre>&#xA;&#xA;<hr>&#xA;&#xA;<h1>Conclusion</h1>&#xA;&#xA;<h2>Performance-wise</h2>&#xA;&#xA;<p>If you do not need the previous value, make it a habit to use pre-increment. Be consistent even with builtin types, you'll get used to it and do not run risk of suffering unecessary performance loss if you ever replace a builtin type with a custom type.</p>&#xA;&#xA;<h2>Semantic-wise</h2>&#xA;&#xA;<ul>&#xA;<li><code>i++</code> says <code>increment i, I am interested in the previous value, though</code>.</li>&#xA;<li><code>++i</code> says <code>increment i, I am interested in the current value</code> or <code>increment i, no interest in the previous value</code>. Again, you'll get used to it, even if you are not right now.</li>&#xA;</ul>&#xA;&#xA;<h2>Knuth.</h2>&#xA;&#xA;<p>Premature optimization is the root of all evil. As is premature pessimization.</p>&#xA;"
13256938,2,24901,"2012-11-06 18:19:06",0,NULL,"<p>The performance difference between <code>++i</code> and <code>i++</code> will be more apparent when you think of operators as value-returning functions and how they are implemented.  To make it easier to understand what's happening, the following code examples will use <code>int</code> as if it were a <code>struct</code>.</p>&#xA;&#xA;<p><code>++i</code> increments the variable, <em>then</em> returns the result.  This can be done in-place and with minimal CPU time, requiring only one line of code in many cases:</p>&#xA;&#xA;<pre><code>int&amp; int::operator++() { &#xA;     return *this += 1;&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>But the same cannot be said of <code>i++</code>.</p>&#xA;&#xA;<p>Post-incrementing, <code>i++</code>, is often seen as returning the original value <em>before</em> incrementing.  However, <em>a function can only return a result when it is finished</em>.  As a result, it becomes necessary to create a copy of the variable containing the original value, increment the variable, then return the copy holding the original value:</p>&#xA;&#xA;<pre><code>int int::operator++(int&amp; _Val) {&#xA;    int _Original = _Val;&#xA;    _Val += 1;&#xA;    return _Original;&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>When there is no functional difference between pre-increment and post-increment, the compiler can perform optimization such that there is no performance difference between the two.  However, if a composite data type such as a <code>struct</code> or <code>class</code> is involved, the copy constructor will be called on post-increment, and it will not be possible to perform this optimization if a deep copy is needed.  As such, pre-increment generally is faster and requires less memory than post-increment.</p>&#xA;"
27755,2,27745,"2008-08-26 11:06:09",68,NULL,"<blockquote>&#xA;  <p>A single regex to parse and breakup a&#xA;  full URL including query parameters&#xA;  and anchors e.g.</p>&#xA;  &#xA;  <p><a href=&quot;https://www.google.com/dir/1/2/search.html?arg=0-a&amp;arg1=1-b&amp;arg3-c#hash&quot;>https://www.google.com/dir/1/2/search.html?arg=0-a&amp;arg1=1-b&amp;arg3-c#hash</a> </p>&#xA;  &#xA;  <p><code>^((http[s]?|ftp):\/)?\/?([^:\/\s]+)((\/\w+)*\/)([\w\-\.]+[^#?\s]+)(.*)?(#[\w\-]+)?$</code></p>&#xA;  &#xA;  <p>RexEx positions:</p>&#xA;  &#xA;  <p>url: RegExp['$&amp;'], </p>&#xA;  &#xA;  <p>protocol:RegExp.$2,</p>&#xA;  &#xA;  <p>host:RegExp.$3, </p>&#xA;  &#xA;  <p>path:RegExp.$4,</p>&#xA;  &#xA;  <p>file:RegExp.$6, </p>&#xA;  &#xA;  <p>query:RegExp.$7,</p>&#xA;  &#xA;  <p>hash:RegExp.$8</p>&#xA;</blockquote>&#xA;&#xA;<p>you could then further parse the host ('.' delimited) quite easily.</p>&#xA;&#xA;<p>What <strong>I</strong> would do is use something like this:</p>&#xA;&#xA;<pre><code>/*&#xA;    ^(.*:)//([a-z\-.]+)(:[0-9]+)?(.*)$&#xA;*/&#xA;proto $1&#xA;host $2&#xA;port $3&#xA;the-rest $4&#xA;</code></pre>&#xA;&#xA;<p>the further parse 'the rest' to be as specific as possible. Doing it in one regex is, well, a bit crazy.</p>&#xA;"
27756,2,27745,"2008-08-26 11:06:44",4,NULL,"<p>This is not a direct answer but most web libraries have a function that accomplishes this task. The function is often called something similar to <code>CrackUrl</code>. If such a function exists, use it, it is almost guaranteed to be more reliable and more efficient than any hand-crafted code.</p>&#xA;"
27759,2,27745,"2008-08-26 11:10:16",4,NULL,"<p>Try the following:</p>&#xA;&#xA;<pre><code>^((ht|f)tp(s?)\:\/\/|~/|/)?([\w]+:\w+@)?([a-zA-Z]{1}([\w\-]+\.)+([\w]{2,5}))(:[\d]{1,5})?((/?\w+/)+|/?)(\w+\.[\w]{3,4})?((\?\w+=\w+)?(&amp;\w+=\w+)*)?&#xA;</code></pre>&#xA;&#xA;<p>It supports HTTP / FTP, subdomains, folders, files etc.</p>&#xA;&#xA;<p>I found it from a quick google search:</p>&#xA;&#xA;<p><a href=&quot;http://geekswithblogs.net/casualjim/archive/2005/12/01/61722.aspx&quot; rel=&quot;nofollow&quot;>http://geekswithblogs.net/casualjim/archive/2005/12/01/61722.aspx</a></p>&#xA;"
27768,2,27745,"2008-08-26 11:17:29",4,NULL,"<p>subdomain and domain are difficult because the subdomain can have several parts, as can the top level domain, <a href=&quot;http://sub1.sub2.domain.co.uk/&quot; rel=&quot;nofollow&quot;>http://sub1.sub2.domain.co.uk/</a></p>&#xA;&#xA;<pre><code> the path without the file : http://[^/]+/((?:[^/]+/)*(?:[^/]+$)?)  &#xA; the file : http://[^/]+/(?:[^/]+/)*((?:[^/.]+\.)+[^/.]+)$  &#xA; the path with the file : http://[^/]+/(.*)  &#xA; the URL without the path : (http://[^/]+/)&#xA;</code></pre>&#xA;&#xA;<p>(Markdown isn't very friendly to regexes)</p>&#xA;"
27775,2,27745,"2008-08-26 11:23:45",0,NULL,"<p>Using <a href=&quot;http://www.fileformat.info/tool/regex.htm&quot; rel=&quot;nofollow&quot;>http://www.fileformat.info/tool/regex.htm</a> hometoast's regex works great.</p>&#xA;&#xA;<p>But here is the deal, I want to use different regex patterns in different situations in my program.</p>&#xA;&#xA;<p>For example, I have this URL, and I have an enumeration that lists all supported URLs in my program. Each object in the enumeration has a method getRegexPattern that returns the regex pattern which will then be used to compare with a URL. If the particular regex pattern returns true, then I know that this URL is supported by my program. So, each enumeration has it's own regex depending on where it should look inside the URL.</p>&#xA;&#xA;<p>Hometoast's suggestion is great, but in my case, I think it wouldn't help (unless I copy paste the same regex in all enumerations).</p>&#xA;&#xA;<p>That is why I wanted the answer to give the regex for each situation separately. Although +1 for hometoast. ;)</p>&#xA;"
27785,2,27745,"2008-08-26 11:34:49",0,NULL,"<p>I know you're claiming language-agnostic on this, but can you tell us what you're using just so we know what regex capabilities you have?</p>&#xA;&#xA;<p>If you have the capabilities for non-capturing matches, you can modify hometoast's expression so that subexpressions that you aren't interested in capturing are set up like this:</p>&#xA;&#xA;<p><code>(?:SOMESTUFF)</code></p>&#xA;&#xA;<p>You'd still have to copy and paste (and slightly modify) the Regex into multiple places, but this makes sense--you're not just checking to see if the subexpression exists, but rather if it exists <em>as part of a URL</em>. Using the non-capturing modifier for subexpressions can give you what you need and nothing more, which, if I'm reading you correctly, is what you want.</p>&#xA;&#xA;<p>Just as a small, small note, hometoast's expression doesn't need to put brackets around the 's' for 'https', since he only has one character in there. Quantifiers quantify the one character (or character class or subexpression) directly preceding them. So:</p>&#xA;&#xA;<p><code>https?</code></p>&#xA;&#xA;<p>would match 'http' or 'https' just fine.</p>&#xA;"
27821,2,27745,"2008-08-26 11:55:05",1,NULL,"<p>Java offers a URL class that will do this.  <a href=&quot;http://java.sun.com/docs/books/tutorial/networking/urls/urlInfo.html&quot; rel=&quot;nofollow&quot;>Query URL Objects.</a></p>&#xA;&#xA;<p>On a side note, PHP offers <a href=&quot;http://www.php.net/parse_url&quot; rel=&quot;nofollow&quot;>parse_url()</a>.</p>&#xA;"
309360,2,27745,"2008-11-21 16:28:58",20,NULL,"<p>I found the highest voted answer (hometoast's answer) doesn't work perfectly for me. Two problems:</p>&#xA;&#xA;<ol>&#xA;<li>it can't handle port number</li>&#xA;<li>The hash part is broken</li>&#xA;</ol>&#xA;&#xA;<p>The following is a modified version:</p>&#xA;&#xA;<pre><code>^((http[s]?|ftp):\/)?\/?([^:\/\s]+)(:([^\/]*))?((\/\w+)*\/)([\w\-\.]+[^#?\s]+)(\?([^#]*))?(#(.*))?$&#xA;</code></pre>&#xA;&#xA;<p>Position of parts are as follows:</p>&#xA;&#xA;<pre><code>int SCHEMA = 2, DOMAIN = 3, PORT = 5, PATH = 6, FILE = 8, QUERYSTRING = 9, HASH = 12&#xA;</code></pre>&#xA;&#xA;<p>Edit posted by anon user:</p>&#xA;&#xA;<pre><code>function getFileName(path) {&#xA;    return path.match(/^((http[s]?|ftp):\/)?\/?([^:\/\s]+)(:([^\/]*))?((\/[\w/-]+)*\/)([\w\-\.]+[^#?\s]+)(\?([^#]*))?(#(.*))?$/i)[8];&#xA;}&#xA;</code></pre>&#xA;"
441881,2,27745,"2009-01-14 04:13:35",2,NULL,"<pre><code>/^((?P&lt;scheme&gt;https?|ftp):\/)?\/?((?P&lt;username&gt;.*?)(:(?P&lt;password&gt;.*?)|)@)?(?P&lt;hostname&gt;[^:\/\s]+)(?P&lt;port&gt;:([^\/]*))?(?P&lt;path&gt;(\/\w+)*\/)(?P&lt;filename&gt;[-\w.]+[^#?\s]*)?(?P&lt;query&gt;\?([^#]*))?(?P&lt;fragment&gt;#(.*))?$/&#xA;</code></pre>&#xA;&#xA;<p>From my answer on a <a href=&quot;http://stackoverflow.com/questions/441739/regex-for-url-validation-with-parts-capturing#441781&quot;>similar question</a>.  Works better than some of the others mentioned because they had some bugs (such as not supporting username/password, not supporting single-character filenames, fragment identifiers being broken).</p>&#xA;"
1541830,2,27745,"2009-10-09 04:39:52",1,NULL,"<p>You can get all the http/https, host, port, path as well as query by using Uri object in .NET.&#xA;just the difficult task is to break the host into sub domain, domain name and TLD.</p>&#xA;&#xA;<p>There is no standard to do so and can't be simply use string parsing or RegEx to produce the correct result. At first, I am using RegEx function but not all URL can be parse the subdomain correctly. The practice way is to use a list of TLDs. After a TLD for a URL is defined the left part is domain and the remaining is sub domain.</p>&#xA;&#xA;<p>However the list need to maintain it since new TLDs is possible. The current moment I know is publicsuffix.org maintain the latest list and you can use domainname-parser tools from google code to parse the public suffix list and get the sub domain, domain and TLD easily by using DomainName object: domainName.SubDomain, domainName.Domain and domainName.TLD.</p>&#xA;&#xA;<p>This answers also helpfull:&#xA;<a href=&quot;http://stackoverflow.com/questions/288810/get-the-subdomain-from-a-url&quot;>http://stackoverflow.com/questions/288810/get-the-subdomain-from-a-url</a></p>&#xA;&#xA;<p>CaLLMeLaNN</p>&#xA;"
1821918,2,27745,"2009-11-30 19:35:38",1,NULL,"<p>I would recommend not using regex.  An API call like <em>WinHttpCrackUrl()</em> is less error prone.</p>&#xA;&#xA;<p><a href=&quot;http://msdn.microsoft.com/en-us/library/aa384092%28VS.85%29.aspx&quot; rel=&quot;nofollow&quot;>http://msdn.microsoft.com/en-us/library/aa384092%28VS.85%29.aspx</a></p>&#xA;"
3724500,2,27745,"2010-09-16 07:21:22",4,NULL,"<p>This improved version should work as reliably as a parser.</p>&#xA;&#xA;<pre><code>   // Applies to URI, not just URL or URN:&#xA;   //    http://en.wikipedia.org/wiki/Uniform_Resource_Identifier#Relationship_to_URL_and_URN&#xA;   //&#xA;   // http://labs.apache.org/webarch/uri/rfc/rfc3986.html#regexp&#xA;   //&#xA;   // (?:([^:/?#]+):)?(?://([^/?#]*))?([^?#]*)(?:\?([^#]*))?(?:#(.*))?&#xA;   //&#xA;   // http://en.wikipedia.org/wiki/URI_scheme#Generic_syntax&#xA;   //&#xA;   // $@ matches the entire uri&#xA;   // $1 matches scheme (ftp, http, mailto, mshelp, ymsgr, etc)&#xA;   // $2 matches authority (host, user:pwd@host, etc)&#xA;   // $3 matches path&#xA;   // $4 matches query (http GET REST api, etc)&#xA;   // $5 matches fragment (html anchor, etc)&#xA;   //&#xA;   // Match specific schemes, non-optional authority, disallow white-space so can delimit in text, and allow 'www.' w/o scheme&#xA;   // Note the schemes must match ^[^\s|:/?#]+(?:\|[^\s|:/?#]+)*$&#xA;   //&#xA;   // (?:()(www\.[^\s/?#]+\.[^\s/?#]+)|(schemes)://([^\s/?#]*))([^\s?#]*)(?:\?([^\s#]*))?(#(\S*))?&#xA;   //&#xA;   // Validate the authority with an orthogonal RegExp, so the RegExp above won’t fail to match any valid urls.&#xA;   function uriRegExp( flags, schemes/* = null*/, noSubMatches/* = false*/ )&#xA;   {&#xA;      if( !schemes )&#xA;         schemes = '[^\\s:\/?#]+'&#xA;      else if( !RegExp( /^[^\s|:\/?#]+(?:\|[^\s|:\/?#]+)*$/ ).test( schemes ) )&#xA;         throw TypeError( 'expected URI schemes' )&#xA;      return noSubMatches ? new RegExp( '(?:www\\.[^\\s/?#]+\\.[^\\s/?#]+|' + schemes + '://[^\\s/?#]*)[^\\s?#]*(?:\\?[^\\s#]*)?(?:#\\S*)?', flags ) :&#xA;         new RegExp( '(?:()(www\\.[^\\s/?#]+\\.[^\\s/?#]+)|(' + schemes + ')://([^\\s/?#]*))([^\\s?#]*)(?:\\?([^\\s#]*))?(?:#(\\S*))?', flags )&#xA;   }&#xA;&#xA;   // http://en.wikipedia.org/wiki/URI_scheme#Official_IANA-registered_schemes&#xA;   function uriSchemesRegExp()&#xA;   {&#xA;      return 'about|callto|ftp|gtalk|http|https|irc|ircs|javascript|mailto|mshelp|sftp|ssh|steam|tel|view-source|ymsgr'&#xA;   }&#xA;</code></pre>&#xA;"
4099407,2,27745,"2010-11-04 17:28:06",1,NULL,"<p>Sadly, this doesn't work with some URLs. Take, for example, this one: <a href=&quot;http://www.example.org/&amp;value=329&quot; rel=&quot;nofollow&quot;>http://www.example.org/&amp;value=329</a></p>&#xA;&#xA;<p>Neither does &amp;value=329</p>&#xA;&#xA;<p>Or even with no parameters at all (a simple URL)!</p>&#xA;&#xA;<p>I understand that the regex is expecting some seriously complex/long URL, but it should be able to work on simple ones as well, am I right?</p>&#xA;"
11976301,2,27745,"2012-08-15 19:56:29",5,NULL,"<p>I needed a regular Expression to match all urls and made this one:</p>&#xA;&#xA;<pre><code>/(?:([^\:]*)\:\/\/)?(?:([^\:\@]*)(?:\:([^\@]*))?\@)?(?:([^\/\:]*)\.(?=[^\.\/\:]*\.[^\.\/\:]*))?([^\.\/\:]*)(?:\.([^\/\.\:]*))?(?:\:([0-9]*))?(\/[^\?#]*(?=.*?\/)\/)?([^\?#]*)?(?:\?([^#]*))?(?:#(.*))?/&#xA;</code></pre>&#xA;&#xA;<p>It matches all urls, any protocol, even urls like</p>&#xA;&#xA;<pre><code>ftp://user:pass@www.cs.server.com:8080/dir1/dir2/file.php?param1=value1#hashtag&#xA;</code></pre>&#xA;&#xA;<p>The result (in JavaScript) looks like this:</p>&#xA;&#xA;<pre><code>[&quot;ftp&quot;, &quot;user&quot;, &quot;pass&quot;, &quot;www.cs&quot;, &quot;server&quot;, &quot;com&quot;, &quot;8080&quot;, &quot;/dir1/dir2/&quot;, &quot;file.php&quot;, &quot;param1=value1&quot;, &quot;hashtag&quot;]&#xA;</code></pre>&#xA;&#xA;<p>An url like</p>&#xA;&#xA;<pre><code>mailto://admin@www.cs.server.com&#xA;</code></pre>&#xA;&#xA;<p>looks like this:</p>&#xA;&#xA;<pre><code>[&quot;mailto&quot;, &quot;admin&quot;, undefined, &quot;www.cs&quot;, &quot;server&quot;, &quot;com&quot;, undefined, undefined, undefined, undefined, undefined] &#xA;</code></pre>&#xA;"
12470263,2,27745,"2012-09-18 04:10:33",33,NULL,"<p>I realize I'm late to the party, but there is a simple way to let the browser parse a url for you without a regex:</p>&#xA;&#xA;<pre><code>var a = document.createElement('a');&#xA;a.href = 'http://www.example.com:123/foo/bar.html?fox=trot#foo';&#xA;&#xA;['href','protocol','host','hostname','port','pathname','search','hash'].forEach(function(k) {&#xA;    console.log(k+':', a[k]);&#xA;});&#xA;&#xA;/*//Output:&#xA;href: http://www.example.com:123/foo/bar.html?fox=trot#foo&#xA;protocol: http:&#xA;host: www.example.com:123&#xA;hostname: www.example.com&#xA;port: 123&#xA;pathname: /foo/bar.html&#xA;search: ?fox=trot&#xA;hash: #foo&#xA;*/&#xA;</code></pre>&#xA;"
14057711,2,27745,"2012-12-27 16:17:34",0,NULL,"<p>Here is one that is complete, and doesnt rely on any protocol.</p>&#xA;&#xA;<pre><code>function getServerURL(url) {&#xA;        var m = url.match(&quot;(^(?:(?:.*?)?//)?[^/?#;]*)&quot;);&#xA;        console.log(m[1]) // Remove this&#xA;        return m[1];&#xA;    }&#xA;&#xA;getServerURL(&quot;http://dev.test.se&quot;)&#xA;getServerURL(&quot;http://dev.test.se/&quot;)&#xA;getServerURL(&quot;//ajax.googleapis.com/ajax/libs/jquery/1.8.3/jquery.min.js&quot;)&#xA;getServerURL(&quot;//&quot;)&#xA;getServerURL(&quot;www.dev.test.se/sdas/dsads&quot;)&#xA;getServerURL(&quot;www.dev.test.se/&quot;)&#xA;getServerURL(&quot;www.dev.test.se?abc=32&quot;)&#xA;getServerURL(&quot;www.dev.test.se#abc&quot;)&#xA;getServerURL(&quot;//dev.test.se?sads&quot;)&#xA;getServerURL(&quot;http://www.dev.test.se#321&quot;)&#xA;getServerURL(&quot;http://localhost:8080/sads&quot;)&#xA;getServerURL(&quot;https://localhost:8080?sdsa&quot;)&#xA;</code></pre>&#xA;&#xA;<p><strong>Prints</strong></p>&#xA;&#xA;<pre><code>http://dev.test.se&#xA;&#xA;http://dev.test.se&#xA;&#xA;//ajax.googleapis.com&#xA;&#xA;//&#xA;&#xA;www.dev.test.se&#xA;&#xA;www.dev.test.se&#xA;&#xA;www.dev.test.se&#xA;&#xA;www.dev.test.se&#xA;&#xA;//dev.test.se&#xA;&#xA;http://www.dev.test.se&#xA;&#xA;http://localhost:8080&#xA;&#xA;https://localhost:8080&#xA;</code></pre>&#xA;"
14385452,2,27745,"2013-01-17 18:12:51",1,NULL,"<p>None of the above worked for me.  Here's what I ended up using:</p>&#xA;&#xA;<pre><code>/^(?:((?:https?|s?ftp):)\/\/)([^:\/\s]+)(?::(\d*))?(?:\/([^\s?#]+)?([?][^?#]*)?(#.*)?)?/&#xA;</code></pre>&#xA;"
17892757,2,27745,"2013-07-26 23:51:52",2,NULL,"<p>Propose a much more readable solution (in Python, but applies to any regex):</p>&#xA;&#xA;<pre><code>def url_path_to_dict(path):&#xA;    pattern = (r'^'&#xA;               r'((?P&lt;schema&gt;.+?)://)?'&#xA;               r'((?P&lt;user&gt;.+?)(:(?P&lt;password&gt;.*?))?@)?'&#xA;               r'(?P&lt;host&gt;.*?)'&#xA;               r'(:(?P&lt;port&gt;\d+?))?'&#xA;               r'(?P&lt;path&gt;/.*?)?'&#xA;               r'(?P&lt;query&gt;[?].*?)?'&#xA;               r'$'&#xA;               )&#xA;    regex = re.compile(pattern)&#xA;    m = regex.match(path)&#xA;    d = m.groupdict() if m is not None else None&#xA;&#xA;    return d&#xA;&#xA;def main():&#xA;    print url_path_to_dict('http://example.example.com/example/example/example.html')&#xA;</code></pre>&#xA;&#xA;<p>Prints: </p>&#xA;&#xA;<pre><code>{&#xA;'host': 'example.example.com', &#xA;'user': None, &#xA;'path': '/example/example/example.html', &#xA;'query': None, &#xA;'password': None, &#xA;'port': None, &#xA;'schema': 'http'&#xA;}&#xA;</code></pre>&#xA;"
24527267,2,27745,"2014-07-02 09:16:47",0,NULL,"<p>I was trying to solve this in javascript, which should be handled by:</p>&#xA;&#xA;<pre><code>var url = new URL('http://a:b@example.com:890/path/wah@t/foo.js?foo=bar&amp;bingobang=&amp;king=kong@kong.com#foobar/bing/bo@ng?bang');&#xA;</code></pre>&#xA;&#xA;<p>since (in Chrome, at least) it parses to:</p>&#xA;&#xA;<pre><code>{&#xA;  &quot;hash&quot;: &quot;#foobar/bing/bo@ng?bang&quot;,&#xA;  &quot;search&quot;: &quot;?foo=bar&amp;bingobang=&amp;king=kong@kong.com&quot;,&#xA;  &quot;pathname&quot;: &quot;/path/wah@t/foo.js&quot;,&#xA;  &quot;port&quot;: &quot;890&quot;,&#xA;  &quot;hostname&quot;: &quot;example.com&quot;,&#xA;  &quot;host&quot;: &quot;example.com:890&quot;,&#xA;  &quot;password&quot;: &quot;b&quot;,&#xA;  &quot;username&quot;: &quot;a&quot;,&#xA;  &quot;protocol&quot;: &quot;http:&quot;,&#xA;  &quot;origin&quot;: &quot;http://example.com:890&quot;,&#xA;  &quot;href&quot;: &quot;http://a:b@example.com:890/path/wah@t/foo.js?foo=bar&amp;bingobang=&amp;king=kong@kong.com#foobar/bing/bo@ng?bang&quot;&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>However, this isn't cross browser (<a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/URL&quot; rel=&quot;nofollow&quot;>https://developer.mozilla.org/en-US/docs/Web/API/URL</a>), so I cobbled this together to pull the same parts out as above:</p>&#xA;&#xA;<pre><code>^(?:(?:(([^:\/#\?]+:)?(?:(?:\/\/)(?:(?:(?:([^:@\/#\?]+)(?:\:([^:@\/#\?]*))?)@)?(([^:\/#\?\]\[]+|\[[^\/\]@#?]+\])(?:\:([0-9]+))?))?)?)?((?:\/?(?:[^\/\?#]+\/+)*)(?:[^\?#]*)))?(\?[^#]+)?)(#.*)?&#xA;</code></pre>&#xA;&#xA;<p>Credit for this regex goes to <a href=&quot;https://gist.github.com/rpflorence&quot; rel=&quot;nofollow&quot;>https://gist.github.com/rpflorence</a> who posted this jsperf <a href=&quot;http://jsperf.com/url-parsing&quot; rel=&quot;nofollow&quot;>http://jsperf.com/url-parsing</a> (originally found here: <a href=&quot;https://gist.github.com/jlong/2428561#comment-310066&quot; rel=&quot;nofollow&quot;>https://gist.github.com/jlong/2428561#comment-310066</a>) who came up with the regex this was originally based on.</p>&#xA;&#xA;<p>The parts are in this order:</p>&#xA;&#xA;<pre><code>var keys = [&#xA;    &quot;href&quot;,                    // http://user:pass@host.com:81/directory/file.ext?query=1#anchor&#xA;    &quot;origin&quot;,                  // http://user:pass@host.com:81&#xA;    &quot;protocol&quot;,                // http:&#xA;    &quot;username&quot;,                // user&#xA;    &quot;password&quot;,                // pass&#xA;    &quot;host&quot;,                    // host.com:81&#xA;    &quot;hostname&quot;,                // host.com&#xA;    &quot;port&quot;,                    // 81&#xA;    &quot;pathname&quot;,                // /directory/file.ext&#xA;    &quot;search&quot;,                  // ?query=1&#xA;    &quot;hash&quot;                     // #anchor&#xA;];&#xA;</code></pre>&#xA;&#xA;<p>There is also a small library which wraps it and provides query params:</p>&#xA;&#xA;<p><a href=&quot;https://github.com/sadams/lite-url&quot; rel=&quot;nofollow&quot;>https://github.com/sadams/lite-url</a> (also available on bower)</p>&#xA;&#xA;<p>If you have an improvement, please create a pull request with more tests and I will accept and merge with thanks.</p>&#xA;"
26766402,2,27745,"2014-11-05 20:22:51",1,NULL,"<p>I'm a few years late to the party, but I'm surprised no one has mentioned the Uniform Resource Identifier specification has a <a href=&quot;https://tools.ietf.org/html/rfc3986#appendix-B&quot; rel=&quot;nofollow&quot;>section on parsing URIs with a regular expression</a>. The regular expression, written by Berners-Lee, et al., is:</p>&#xA;&#xA;<blockquote>&#xA;  <p><code>^(([^:/?#]+):)?(//([^/?#]*))?([^?#]*)(\?([^#]*))?(#(.*))?</code></p>&#xA;  &#xA;  <p>The numbers in the second line above are only to assist readability;&#xA;  they indicate the reference points for each subexpression (i.e., each&#xA;  paired parenthesis).  We refer to the value matched for subexpression&#xA;   as $.  For example, matching the above expression to</p>&#xA;  &#xA;  <p><code>http://www.ics.uci.edu/pub/ietf/uri/#Related</code></p>&#xA;  &#xA;  <p>results in the following subexpression matches:</p>&#xA;&#xA;<pre><code>$1 = http:&#xA;$2 = http&#xA;$3 = //www.ics.uci.edu&#xA;$4 = www.ics.uci.edu&#xA;$5 = /pub/ietf/uri/&#xA;$6 = &lt;undefined&gt;&#xA;$7 = &lt;undefined&gt;&#xA;$8 = #Related&#xA;$9 = Related&#xA;</code></pre>&#xA;</blockquote>&#xA;&#xA;<p>For what it's worth, I found that I had to escape the forward slashes in JavaScript:</p>&#xA;&#xA;<p><code>^(([^:\/?#]+):)?(\/\/([^\/?#]*))?([^?#]*)(\?([^#]*))?(#(.*))?</code></p>&#xA;"
29871,2,29869,"2008-08-27 10:45:36",1,NULL,"<p>Assuming that this will work in PERL as it does in languages that claim to use PERL-compatible syntax:</p>&#xA;&#xA;<p><code>/&lt;\/?[^p][^&gt;]*&gt;/</code></p>&#xA;&#xA;<p>EDIT:</p>&#xA;&#xA;<p>But that won't match a <code>&lt;pre&gt;</code> or <code>&lt;param&gt;</code> tag, unfortunately.</p>&#xA;&#xA;<p>This, perhaps?</p>&#xA;&#xA;<pre><code>/&lt;\/?(?!p&gt;|p )[^&gt;]+&gt;/&#xA;</code></pre>&#xA;&#xA;<p>That should cover <code>&lt;p&gt;</code> tags that have attributes, too.</p>&#xA;"
29875,2,29869,"2008-08-27 10:47:18",0,NULL,"<p>Try this, it should work:</p>&#xA;&#xA;<pre><code>/&lt;\/?([^p](\s.+?)?|..+?)&gt;/&#xA;</code></pre>&#xA;&#xA;<p>Explanation: it matches either a single letter except “p”, followed by an optional whitespace and more characters, or multiple letters (at least two).</p>&#xA;&#xA;<p>/EDIT: I've added the ability to handle attributes in <code>p</code> tags.</p>&#xA;"
29887,2,29869,"2008-08-27 10:53:30",2,NULL,"<p>Since HTML is not a regular language I would not expect a regular expression to do a very good job at matching it. They might be up to this task (though I'm not convinced), but I would consider looking elsewhere; I'm sure perl must have some off-the-shelf libraries for manipulating HTML.</p>&#xA;&#xA;<p>Anyway, I would think that what you want to match is &lt;/?(p.+|.*)(\s*.*)&gt; non-greedily (I don't know the vagaries of perl's regexp syntax so I cannot help further).  I am assuming that \s means whitespace.  Perhaps it doesn't. Either way, you want something that'll match attributes offset from the tag name by whitespace.  But it's more difficult than that as people often put unescaped angle brackets inside scripts and comments and perhaps even quoted attribute values, which you don't want to match against.</p>&#xA;&#xA;<p>So as I say, I don't really think regexps are the right tool for the job.</p>&#xA;"
29892,2,29869,"2008-08-27 10:54:59",2,NULL,"<blockquote>&#xA;  <p>Since HTML is not a regular language</p>&#xA;</blockquote>&#xA;&#xA;<p>HTML isn't but HTML tags are and they can be adequatly described by regular expressions.</p>&#xA;"
29911,2,29869,"2008-08-27 11:13:40",-1,NULL,"<p>You should probably also remove any attributes on the &lt;p> tag, since someone bad could do something like:</p>&#xA;&#xA;<pre><code>&lt;p onclick=&quot;document.location.href='http://www.evil.com'&quot;&gt;Clickable text&lt;/p&gt;&#xA;</code></pre>&#xA;&#xA;<p>The easiest way to do this, is to use the regex people suggest here to search for &amp;ltp> tags with attributes, and replace them with &lt;p> tags without attributes. Just to be on the safe side.</p>&#xA;"
29917,2,29869,"2008-08-27 11:26:13",7,NULL,"<p>I came up with this:</p>&#xA;&#xA;<pre><code>&lt;(?!\/?p(?=&gt;|\s.*&gt;))\/?.*?&gt;&#xA;&#xA;x/&#xA;&lt;   		# Match open angle bracket&#xA;(?! 		# Negative lookahead (Not matching and not consuming)&#xA;    \/? 	# 0 or 1 /&#xA;    p   		# p&#xA;    (?= 	# Positive lookahead (Matching and not consuming)&#xA;    &gt;		# &gt; - No attributes&#xA;        |		# or&#xA;    \s		# whitespace&#xA;    .*		# anything up to &#xA;    &gt;		# close angle brackets - with attributes&#xA;    )   		# close positive lookahead&#xA;)   		# close negative lookahead&#xA;    		# if we have got this far then we don't match&#xA;    		# a p tag or closing p tag&#xA;    		# with or without attributes&#xA;\/? 		# optional close tag symbol (/)&#xA;.*? 		# and anything up to&#xA;&gt;   		# first closing tag&#xA;/&#xA;</code></pre>&#xA;&#xA;<p>This will now deal with p tags with or without attributes and the closing p tags, but will match pre and similar tags, with or without attributes.</p>&#xA;&#xA;<p>It doesn't strip out attributes, but my source data does not put them in.  I may change this later to do this, but this will suffice for now.</p>&#xA;"
29965,2,29869,"2008-08-27 12:17:14",3,NULL,"<p>Not sure why you are wanting to do this - regex for HTML sanitisation isn't always the best method (you need to remember to sanitise attributes and such, remove javascript: hrefs and the likes)... but, a regex to match HTML tags that aren't <code>&lt;p&gt;&lt;/p&gt;</code>:</p>&#xA;&#xA;<p><code>(&lt;[^pP].*?&gt;|&lt;/[^pP]&gt;)</code></p>&#xA;&#xA;<p>Verbose:</p>&#xA;&#xA;<pre><code>(&#xA;    &lt;               # &lt; opening tag&#xA;        [^pP].*?    # p non-p character, then non-greedy anything&#xA;    &gt;               # &gt; closing tag&#xA;|                   #   ....or....&#xA;    &lt;/              # &lt;/&#xA;        [^pP]       # a non-p tag&#xA;    &gt;               # &gt;&#xA;)&#xA;</code></pre>&#xA;"
29985,2,29869,"2008-08-27 12:31:36",33,NULL,"<p>If you <em>insist</em> on using a regex, something like this will work in most cases:</p>&#xA;&#xA;<pre><code># Remove all HTML except &quot;p&quot; tags&#xA;$html =~ s{&lt;(?&gt;/?)(?:[^pP]|[pP][^\s&gt;/])[^&gt;]*&gt;}{}g;&#xA;</code></pre>&#xA;&#xA;<p>Explanation:</p>&#xA;&#xA;<pre><code>s{&#xA;  &lt;             # opening angled bracket&#xA;  (?&gt;/?)        # ratchet past optional / &#xA;  (?:&#xA;    [^pP]       # non-p tag&#xA;    |           # ...or...&#xA;    [pP][^\s&gt;/] # longer tag that begins with p (e.g., &lt;pre&gt;)&#xA;  )&#xA;  [^&gt;]*         # everything until closing angled bracket&#xA;  &gt;             # closing angled bracket&#xA; }{}gx; # replace with nothing, globally&#xA;</code></pre>&#xA;&#xA;<p>But really, save yourself some headaches and use a parser instead.  CPAN has several modules that are suitable.  Here's an example using the <a href=&quot;http://search.cpan.org/dist/HTML-Parser/lib/HTML/TokeParser.pm&quot;>HTML::TokeParser</a> module that comes with the extremely capable <a href=&quot;http://search.cpan.org/dist/HTML-Parser&quot;>HTML::Parser</a> CPAN distribution:</p>&#xA;&#xA;<pre><code>use strict;&#xA;&#xA;use HTML::TokeParser;&#xA;&#xA;my $parser = HTML::TokeParser-&gt;new('/some/file.html')&#xA;  or die &quot;Could not open /some/file.html - $!&quot;;&#xA;&#xA;while(my $t = $parser-&gt;get_token)&#xA;{&#xA;  # Skip start or end tags that are not &quot;p&quot; tags&#xA;  next  if(($t-&gt;[0] eq 'S' || $t-&gt;[0] eq 'E') &amp;&amp; lc $t-&gt;[1] ne 'p');&#xA;&#xA;  # Print everything else normally (see HTML::TokeParser docs for explanation)&#xA;  if($t-&gt;[0] eq 'T')&#xA;  {&#xA;    print $t-&gt;[1];&#xA;  }&#xA;  else&#xA;  {&#xA;    print $t-&gt;[-1];&#xA;  }&#xA;}&#xA;</code></pre>&#xA;&#xA;<p><a href=&quot;http://search.cpan.org/dist/HTML-Parser&quot;>HTML::Parser</a> accepts input in the form of a file name, an open file handle, or a string.  Wrapping the above code in a library and making the destination configurable (i.e., not just <code>print</code>ing as in the above) is not hard.  The result will be much more reliable, maintainable, and possibly also faster (HTML::Parser uses a C-based backend) than trying to use regular expressions.</p>&#xA;"
30044,2,29869,"2008-08-27 13:11:05",1,NULL,"<p>You also might want to allow for whitespace before the &quot;p&quot; in the p tag. Not sure how often you'll run into this, but &lt; p> is perfectly valid HTML.</p>&#xA;"
30193,2,29869,"2008-08-27 14:01:28",16,NULL,"<p>In my opinion, trying to parse HTML with anything other than an HTML parser is just asking for a world of pain. HTML is a <em>really</em> complex language (which is one of the major reasons that XHTML was created, which is much simpler than HTML).</p>&#xA;&#xA;<p>For example, this:</p>&#xA;&#xA;<pre><code>&lt;HTML /&#xA;  &lt;HEAD /&#xA;    &lt;TITLE / &gt; /&#xA;    &lt;P / &gt;&#xA;</code></pre>&#xA;&#xA;<p>is a complete, 100% well-formed, 100% valid HTML document. (Well, it's missing the DOCTYPE declaration, but other than that ...)</p>&#xA;&#xA;<p>It is semantically equivalent to</p>&#xA;&#xA;<pre><code>&lt;html&gt;&#xA;  &lt;head&gt;&#xA;    &lt;title&gt;&#xA;      &amp;gt;&#xA;    &lt;/title&gt;&#xA;  &lt;/head&gt;&#xA;  &lt;body&gt;&#xA;    &lt;p&gt;&#xA;      &amp;gt;&#xA;    &lt;/p&gt;&#xA;  &lt;/body&gt;&#xA;&lt;/html&gt;&#xA;</code></pre>&#xA;&#xA;<p>But it's nevertheless valid HTML that you're going to have to deal with. You <em>could</em>, of course, devise a regex to parse it, but, as others already suggested, using an actual HTML parser is just sooo much easier.</p>&#xA;"
100722,2,29869,"2008-09-19 09:26:46",1,NULL,"<p>The original regex can be made to work with very little effort:</p>&#xA;&#xA;<pre><code> &lt;(?&gt;/?)(?!p).+?&gt;&#xA;</code></pre>&#xA;&#xA;<p>The problem was that the /? (or \?) gave up what it matched when the assertion after it failed. Using a non-backtracking group (?>...) around it takes care that it never releases the matched slash, so the (?!p) assertion is always anchored to the start of the tag text.</p>&#xA;&#xA;<p>(That said I agree that generally parsing HTML with regexes is not the way to go).</p>&#xA;"
2928149,2,29869,"2010-05-28 10:15:31",2,NULL,"<p>I used Xetius regex and it works fine. Except for some flex generated tags which can be : <BR/> with no spaces inside. I tried ti fix it with a simple <em>?</em> after <em>\s</em> and it looks like it's working :</p>&#xA;&#xA;<pre><code>&lt;(?!\/?p(?=&gt;|\s?.*&gt;))\/?.*?&gt;&#xA;</code></pre>&#xA;&#xA;<p>I'm using it to clear tags from flex generated html text so i also added more excepted tags :</p>&#xA;&#xA;<pre><code>&lt;(?!\/?(p|a|b|i|u|br)(?=&gt;|\s?.*&gt;))\/?.*?&gt;&#xA;</code></pre>&#xA;"
23641607,2,29869,"2014-05-13 21:08:11",1,NULL,"<p>Xetius, resurrecting this ancient question because it had a simple solution that wasn't mentioned. (Found your question while doing some research for a <a href=&quot;http://stackoverflow.com/q/23589174&quot;>regex bounty quest</a>.)</p>&#xA;&#xA;<p>With all the disclaimers about using regex to parse html, here is a simple way to do it.</p>&#xA;&#xA;<pre><code>#!/usr/bin/perl&#xA;$regex = '(&lt;\/?p[^&gt;]*&gt;)|&lt;[^&gt;]*&gt;';&#xA;$subject = 'Bad html &lt;a&gt; &lt;/I&gt; &lt;p&gt;My paragraph&lt;/p&gt; &lt;i&gt;Italics&lt;/i&gt; &lt;p class=&quot;blue&quot;&gt;second&lt;/p&gt;';&#xA;($replaced = $subject) =~ s/$regex/$1/eg;&#xA;print $replaced . &quot;\n&quot;;&#xA;</code></pre>&#xA;&#xA;<p>See this <a href=&quot;http://ideone.com/nOLTN6&quot; rel=&quot;nofollow&quot;>live demo</a></p>&#xA;&#xA;<p><strong>Reference</strong> </p>&#xA;&#xA;<p><a href=&quot;http://stackoverflow.com/q/23589174&quot;>How to match pattern except in situations s1, s2, s3</a></p>&#xA;&#xA;<p><a href=&quot;http://www.rexegg.com/regex-best-trick.html&quot; rel=&quot;nofollow&quot;>How to match a pattern unless...</a></p>&#xA;"
30255,2,30251,"2008-08-27 14:21:09",1,NULL,"<p>I believe just tabular content. For example, if you printed out a database table or spreadsheet-like data to HTML.</p>&#xA;"
30259,2,30251,"2008-08-27 14:22:16",6,NULL,"<p>I will usually opt for tables to display form-type information (First Name, Last Name, Address, etc.) where lining labels and fields across multiple rows is important. DIVs I use for layout.</p>&#xA;&#xA;<p>Of course the table is wrapped in a DIV :)</p>&#xA;"
30262,2,30251,"2008-08-27 14:22:48",48,NULL,"<p>When the data I am presenting is, indeed, tabular. </p>&#xA;&#xA;<p>I find it ridiculous that some web designers used divs on tabular data on some sites.</p>&#xA;&#xA;<p>One other use I would have for it would be forms, particularly label : textbox pairs. This could technically be done in div boxes, but it's much, much easier to do this in tables, and one can argue that label:textbox pairs are in fact tabular in nature.</p>&#xA;"
30263,2,30251,"2008-08-27 14:22:49",19,NULL,"<p>Usually whenever you're not using the table to provide a layout.</p>&#xA;&#xA;<p>Tables -> data</p>&#xA;&#xA;<p>Divs -> layout</p>&#xA;&#xA;<p>(mainly)</p>&#xA;"
30264,2,30251,"2008-08-27 14:22:52",1,NULL,"<p>If you would like to have semantically correct HTML, then you should use tables only for tabular data. </p>&#xA;&#xA;<p>Otherwise you use tables for everything you want, but there probably is a way to do the same thing using <code>div</code>s and CSS.</p>&#xA;"
30265,2,30251,"2008-08-27 14:23:03",4,NULL,"<p>Tables were designed for tabular content, not for layout.</p>&#xA;&#xA;<p>So, don't ever feel bad if you use them to display data.</p>&#xA;"
30266,2,30251,"2008-08-27 14:23:04",2,NULL,"<p>1) For displaying tabular data.  A calendar is one example of tabular data that isn't always obvious at first.</p>&#xA;&#xA;<p>2) I work for a medical billing company, and nearly all of the layout for our internal work is done using CSS.  However, from time to time we get paper forms from insurance companies that our billers have to use, and a program will convert them to an html format that they can fill out and print via the intranet.  To make sure the forms are accepted they need to match the original paper version very closely.  For these it's just simple to fall back to tables.</p>&#xA;"
30269,2,30251,"2008-08-27 14:23:56",8,NULL,"<p>Agree with Thomas -- the general rule of thumb is if it makes sense on a spreedsheet, you can use a table.  Otherwise not.  </p>&#xA;&#xA;<p>Just don't use tables as your layout for the page, that's the main problem people have with them.</p>&#xA;"
30271,2,30251,"2008-08-27 14:25:12",174,NULL,"<p>The whole &quot;Tables vs Divs&quot; thing just barely misses the mark.  It's not &quot;table&quot; or &quot;div&quot;.  It's about using semantic html.</p>&#xA;&#xA;<p>Even the div tag plays only a small part in a well laid out page.  Don't overuse it.  You shouldn't need that many if you put your html together correctly.  Things like lists, field sets, legends, labels, paragraphs, etc can replace much of what a div or span is often used to accomplish.  Div should be used primarily when it makes sense to indicate a logical *<em><b>div</b></em>*ision, and only appropriated for extra layout when absolutely necessary.  The same is true for table; use it when you have tabular data, but not otherwise.</p>&#xA;&#xA;<p>Then you have a more semantic page and you don't need quite as many classes defined in your CSS; you can target the tags directly instead.  Possibly most importantly, you have a page that will score much better with Google (anecdotally) than the equivalent table or div-heavy page. Most of all it will help you better connect with a portion of your audience.</p>&#xA;&#xA;<p>So if we go back and look at it in terms of table vs div, it's my opinion that we've actually come to the point where div is over-used and table is under-used.  Why? Because when you really think about it, there are a lot of things out there that fall into the category of &quot;tabular data&quot; that tend to be overlooked.  Answers and comments on this very web page, for example.  They consist of multiple records, each with the same set of fields. They're even stored in a sql server table, for crying out loud. This is the exact definition of tabular data. This means an html table tag would absolutely be a good semantic choice to layout something like the posts here on StackOverflow. The same principle applies to many other things as well. It may not be a good idea to use a table tag to set up a three column layout, but it's certainly just fine to use it for grids and lists... except, of course, when you can actually use the ol or ul (list) tags.</p>&#xA;"
30274,2,30251,"2008-08-27 14:26:28",10,NULL,"<p>As many posters have already mentioned, you should use tables to display for tabular data.</p>&#xA;&#xA;<p>Tables were introduced in <a href=&quot;http://www.w3.org/TR/REC-html32.html#body&quot; rel=&quot;nofollow&quot;>HTML 3.2</a> here is the relevant paragraph from the spec on their usage:</p>&#xA;&#xA;<blockquote>&#xA;  <p>[tables] can be used to markup tabular material or for layout purposes...</p>&#xA;</blockquote>&#xA;"
30317,2,30251,"2008-08-27 14:43:18",4,NULL,"<p>I use tables in two cases:</p>&#xA;&#xA;<p>1) Tabular data</p>&#xA;&#xA;<p>2) Any time I want my layout to dynamically size itself to its contents</p>&#xA;"
30595,2,30251,"2008-08-27 16:34:37",3,NULL,"<p>If your data can be laid out in a two-dimensional grid, use <code>&lt;table&gt;</code>. If it can't, don't. Using <code>&lt;table&gt;</code> for anything else is a hack (though frequently not one with proper alternatives, especially when it comes to compatibility with older browsers). <em>Not</em> using <code>&lt;table&gt;</code> <em>for</em> something that clearly should be one is equally bad. <code>&lt;div&gt;</code> and <code>&lt;span&gt;</code> aren't for everything; in fact, being completely meaningless on a semantic level, they are to be avoided at all costs in favor of more semantic alternatives.</p>&#xA;"
42275,2,30251,"2008-09-03 18:37:06",0,NULL,"<blockquote>&#xA;  <p>One other use I would have for it&#xA;  would be forms, particularly label :&#xA;  textbox pairs. This could technically&#xA;  be done in div boxes, but it's much,&#xA;  much easier to do this in tables, and&#xA;  one can argue that label:textbox pairs&#xA;  are in fact tabular in nature.</p>&#xA;</blockquote>&#xA;&#xA;<p>I see that  a fair amount, especially among MS developers.  And I've done it a fair amount in the past.  It works, but it ignores some accessibility and best-practice factors.  You should use labels, inputs, fieldsets, legends, and CSS to layout your forms.  Why?  Because that's what they are for, it's more efficient, and I think accessibility is important.  But that's just my personal preference.  I think everyone should try it that way first before condemning it.  It's quick, easy, and clean.  </p>&#xA;"
42329,2,30251,"2008-09-03 19:10:31",1,NULL,"<p>@<a href=&quot;#42280&quot; rel=&quot;nofollow&quot;>Marius</a>:</p>&#xA;&#xA;<p>Is the layout tabular data? No, while it was standard a few years ago it's not now :-)</p>&#xA;&#xA;<blockquote>&#xA;  <p>One other use I would have for it would be forms, particularly label : textbox pairs. This could technically be done in div boxes, but it's much, much easier to do this in tables, and one can argue that label:textbox pairs are in fact tabular in nature.</p>&#xA;</blockquote>&#xA;&#xA;<p>I tend to give the label a fixed width, or display it on the line above.</p>&#xA;"
42374,2,30251,"2008-09-03 19:34:54",12,NULL,"<p>I would make a distinction between HTML for public websites (tables no-no-no, divs yes-yes-yes) and HTML for semi-public or private web applications, where I tend to prefer tables even for page layout.</p>&#xA;&#xA;<p>Most of the respectable reasons why &quot;Tables are bad&quot; are usually an issue only for public websites, but not so much of a problem with webapps. If I can get the same layout and have a more consistent look across browsers by using a TABLE than a complicated CSS+DIV, then I usually go ahead and aprove the TABLE.</p>&#xA;"
46289,2,30251,"2008-09-05 16:52:32",5,NULL,"<p>I can see the argument for tables for forms, but there is a nicer alternative... you just have to roll up your sleeves and learn CSS.</p>&#xA;&#xA;<p>for example:</p>&#xA;&#xA;&#xA;&#xA;<pre class=&quot;lang-html prettyprint-override&quot;><code>&lt;fieldset&gt;&#xA;  &lt;legend&gt;New Blog Post&lt;/legend&gt;&#xA;&#xA;  &lt;label for=&quot;title&quot;&gt;Title:&lt;/label&gt;&#xA;  &lt;input type=&quot;text&quot; name=&quot;title&quot; /&gt;&#xA;&#xA;  &lt;label for=&quot;body&quot;&gt;Body:&lt;/label&gt;&#xA;  &lt;textarea name=&quot;body&quot; rows=&quot;6&quot; cols=&quot;40&quot;&gt;&#xA;  &lt;/textarea&gt;&#xA;&lt;/fieldset&gt;&#xA;</code></pre>&#xA;&#xA;<p>You can take that html and layout the form either side-by-side labels, or labels on top of the textboxes (which is easier).  Having the flexibility really helps.  It's also less HTML than the table equivalent of either.</p>&#xA;&#xA;<p>For some excellent examples of CSS forms, check out these excellent examples:</p>&#xA;&#xA;<p><a href=&quot;http://jeffhowden.com/code/css/forms/&quot; rel=&quot;nofollow&quot;>http://jeffhowden.com/code/css/forms/</a></p>&#xA;&#xA;<p><a href=&quot;http://www.sitepoint.com/article/fancy-form-design-css/&quot; rel=&quot;nofollow&quot;>http://www.sitepoint.com/article/fancy-form-design-css/</a></p>&#xA;&#xA;<p><a href=&quot;http://www.smashingmagazine.com/2006/11/11/css-based-forms-modern-solutions/&quot; rel=&quot;nofollow&quot;>http://www.smashingmagazine.com/2006/11/11/css-based-forms-modern-solutions/</a></p>&#xA;"
46307,2,30251,"2008-09-05 16:59:27",1,NULL,"<p>@<a href=&quot;#30262&quot; rel=&quot;nofollow&quot;>Jon Limjap</a></p>&#xA;&#xA;<p>For  label : textbox, neither divs nor tables are appropriate: <code>&lt;dl&gt;</code>s are </p>&#xA;"
51237,2,30251,"2008-09-09 04:46:38",2,NULL,"<p>Tables are used for tabular data. If it makes sense to put it in a spreadsheet then use a table.  Otherwise there is a better tag for you to be using such as div, span, ul, etc.</p>&#xA;"
67249,2,30251,"2008-09-15 21:37:04",17,NULL,"<p>Ideally HTML tables should only be used for tabular data. However tables are also the simplest way to create some specific types of grid-based layouts, which are hard to emulate in cross-bowser compatible CSS. <a href=&quot;http://olav.dk/articles/tables.html&quot;>This article</a> describes the issue in more details.</p>&#xA;&#xA;<p>The CSS spec does support grid-based layouts equivalent to table markup using the display:table|table-cell property. However this part of the spec is not supported in Internet Explorer (although all other modern browsers support it.) </p>&#xA;&#xA;<p>This leaves you with a dilemma: Either use HTML tables for layout - which is bad style because it is presentational markup. Or try to emulate a grid with floats and abolute positioning in CSS. This often turns into convoluted and hard to maintain CSS.</p>&#xA;&#xA;<p>If accessibility or semantic purity is important for you, go with pure CSS. If you just want your layout-grid to work without too much hassle, you should probably use a table.</p>&#xA;"
492938,2,30251,"2009-01-29 19:00:14",20,NULL,"<p>I used to do pure CSS but I abandoned that pursuit in favor of hybrid table/css approach as the most pragmatic approach. Ironically, it's also because of accessibility. Ever try doing CSS on Sidekick? What a nightmare! Ever seen how CSS-based websites are rendered on new browsers? Elements would overlap or just don't display correctly that I had to turn off the CSS. Ever try resizing CSS-based websites? They look awful and often detrimental to the blind if they use zooming features in the browser! If you do that with tables, they scale much better. When people talk about accessibility, I find that many have no clue and it annoys me because I am disabled and they aren't. Have they really worked with the blind? The deaf? If accessibility is a main concern, why the hell are 99% of videos not closed captioned? Many CSS purists use AJAX but fail to realize that AJAX often makes content inaccessible. </p>&#xA;&#xA;<p>Pragmatically, it's ok to use a single table as a main layout as LONG as you provide the information in a logical flow if the cells are stacked (something you'd see on mobiles). The CSS theory sounds great but <em>partially</em> workable in real life with too many hacks, something that is against the ideals of &quot;purity.&quot; </p>&#xA;&#xA;<p>Since using the CSS with tables approach, I've saved so much time designing a website and maintanance is much easier. Fewer hacks, more intuitive. I get fewer calls from people saying &quot;I inserted a DIV and now it looks all screwed up!&quot; And even more importantly, absolutely NO accessibility issues. </p>&#xA;"
493648,2,30251,"2009-01-29 22:01:07",2,NULL,"<p>On this subject, I thought <a href=&quot;http://shouldiusetablesforlayout.com/&quot; rel=&quot;nofollow&quot;>this</a> site was pretty funny.</p>&#xA;"
975878,2,30251,"2009-06-10 14:16:46",0,NULL,"<p>When ever a page containg tables is loaded by any browser it takes more time for the browser to render properly the  tag. Where as if the div is used ,the browser takes less time as it is lighter. And more over we can apply the css to make the divs appear as table,</p>&#xA;&#xA;<p>The tables are normally heavy wieght and div are light weight.</p>&#xA;"
2801955,2,30251,"2010-05-10 10:40:04",0,NULL,"<p>Divs are simple 'divisions', they are mean't to be used to group sections of the page that are in a semantic sense linked. They carry no implicit meaning other than that.</p>&#xA;&#xA;<p>Tables were originally intended to display scientific data, such as lab results on screen. Dave Raggett certainly didn't intend them to become used to implement layout.</p>&#xA;&#xA;<p>I find it keeps it fairly clear in your mind if you remember the above, if its something you would normally expect to read in a table, then that's the appropriate tag, if its pure layout, then use something else to accomplish your needs.</p>&#xA;"
3153153,2,30251,"2010-06-30 20:30:47",0,NULL,"<p>It is clear that the DIV are used for Layout but It happened to me to being &quot;forced&quot; to use spreadsheets to do a grid layout within a div structure for this reasons:</p>&#xA;&#xA;<blockquote>&#xA;  <p>the addition of percentage values did not allow a proper alignment with the div, while the same values expressed on cells of tables gave the expected result.</p>&#xA;</blockquote>&#xA;&#xA;<p>So I think that tables are still useful not only for data, but also for the situation above, on top of that, tables are still W3C compliant browser and alternative browsers (for the disabled for example) interpret theirs correctly.</p>&#xA;"
30384,2,30373,"2008-08-27 15:07:52",4,NULL,"<p>The book <em><a href=&quot;http://www.semantics.org/cpp_gotchas/&quot; rel=&quot;nofollow&quot;>C++ Gotchas</a></em> may prove useful.</p>&#xA;"
30391,2,30373,"2008-08-27 15:09:10",7,NULL,"<p>The web page <em><a href=&quot;http://developer.kde.org/~wheeler/cpp-pitfalls.html&quot; rel=&quot;nofollow&quot;>C++ Pitfalls</a></em> by Scott Wheeler covers some of the main C++ pitfalls.</p>&#xA;"
30412,2,30373,"2008-08-27 15:15:18",16,NULL,"<p>Some must have C++ books that will help you avoid common C++ pitfalls:</p>&#xA;&#xA;<p><a href=&quot;http://rads.stackoverflow.com/amzn/click/0321334876&quot; rel=&quot;nofollow&quot;>Effective C++</a><br />&#xA;<a href=&quot;http://rads.stackoverflow.com/amzn/click/020163371X&quot; rel=&quot;nofollow&quot;>More Effective C++</a><br />&#xA;<a href=&quot;http://rads.stackoverflow.com/amzn/click/0201749629&quot; rel=&quot;nofollow&quot;>Effective STL</a></p>&#xA;&#xA;<p>The Effective STL book explains the vector of bools issue :)</p>&#xA;"
30420,2,30373,"2008-08-27 15:17:16",72,NULL,"<p>A short list might be:</p>&#xA;&#xA;<ul>&#xA;<li>Avoid memory leaks through use shared pointers to manage memory allocation and cleanup</li>&#xA;<li>Use the <a href=&quot;https://en.wikipedia.org/wiki/Resource_Acquisition_Is_Initialization&quot; rel=&quot;nofollow&quot;>Resource Acquisition Is Initialization</a> (RAII) idiom to manage resource cleanup - especially in the presence of exceptions</li>&#xA;<li>Avoid calling virtual functions in constructors</li>&#xA;<li>Employ minimalist coding techniques where possible - for example, declaring variables only when needed, scoping variables, and early-out design where possible. </li>&#xA;<li>Truly understand the exception handling in your code - both with regard to exceptions you throw, as well as ones thrown by classes you may be using indirectly. This is especially important in the presence of templates.</li>&#xA;</ul>&#xA;&#xA;<p>RAII, shared pointers and minimalist coding are of course not specific to C++, but they help avoid problems that do frequently crop up when developing in the language. </p>&#xA;&#xA;<p>Some excellent books on this subject are:</p>&#xA;&#xA;<ul>&#xA;<li>Effective C++ - Scott Meyers</li>&#xA;<li>More Effective C++ - Scott Meyers</li>&#xA;<li>C++ Coding Standards - Sutter &amp; Alexandrescu</li>&#xA;<li>C++ FAQs - Cline</li>&#xA;</ul>&#xA;&#xA;<p>Reading these books has helped me more than anything else to avoid the kind of pitfalls you are asking about.</p>&#xA;"
30426,2,30373,"2008-08-27 15:21:24",3,NULL,"<p>The most important pitfalls for beginning developers is to avoid confusion between C and C++. C++ should never be treated as a mere better C or C with classes because this prunes its power and can make it even dangerous (especially when using memory as in C).</p>&#xA;"
30449,2,30373,"2008-08-27 15:29:05",3,NULL,"<p>Check out <a href=&quot;http://boost.org&quot; rel=&quot;nofollow&quot;>boost.org</a>.  It provides a lot of additional functionality, especially their smart pointer implementations.</p>&#xA;"
30470,2,30373,"2008-08-27 15:37:14",6,NULL,"<p>I've already mentioned it a few times, but Scott Meyers' books <a href=&quot;http://rads.stackoverflow.com/amzn/click/0321334876&quot; rel=&quot;nofollow&quot;>Effective C++</a> and <a href=&quot;http://rads.stackoverflow.com/amzn/click/0201749629&quot; rel=&quot;nofollow&quot;>Effective STL</a> are really worth their weight in gold for helping with C++.</p>&#xA;&#xA;<p>Come to think of it, Steven Dewhurst's <a href=&quot;http://rads.stackoverflow.com/amzn/click/0321125185&quot; rel=&quot;nofollow&quot;>C++ Gotchas</a> is also an excellent &quot;from the trenches&quot; resource. His item on rolling your own exceptions and how they should be constructed really helped me in one project.</p>&#xA;"
34064,2,30373,"2008-08-29 06:39:54",6,NULL,"<p>Two gotchas that I wish I hadn't learned the hard way:</p>&#xA;&#xA;<p>(1) A lot of output (such as printf) is buffered by default.  If you're debugging crashing code, and you're using buffered debug statements, the last output you see may <em>not</em> really be the last print statement encountered in the code.  The solution is to flush the buffer after each debug print (or turn off the buffering altogether).</p>&#xA;&#xA;<p>(2) Be careful with initializations - (a) avoid class instances as globals / statics; and (b) try to initialize all your member variables to some safe value in a ctor, even if it's a trivial value such as NULL for pointers.</p>&#xA;&#xA;<p>Reasoning: the ordering of global object initialization is not guaranteed (globals includes static variables), so you may end up with code that seems to fail nondeterministically since it depends on object X being initialized before object Y.  If you don't explicitly initialize a primitive-type variable, such as a member bool or enum of a class, you'll end up with different values in surprising situations -- again, the behavior can seem very nondeterministic.</p>&#xA;"
37369,2,30373,"2008-09-01 02:03:57",2,NULL,"<p>PRQA have <a href=&quot;http://www.codingstandard.com/&quot; rel=&quot;nofollow&quot;>an excellent and free C++ coding standard</a> based on books from Scott Meyers, Bjarne Stroustrop and Herb Sutter. It brings all this information together in one document.</p>&#xA;"
48676,2,30373,"2008-09-07 18:48:54",4,NULL,"<p>Here are a few pits I had the misfortune to fall into. All these have good reasons which I only understood after being bitten by behaviour that surprised me. </p>&#xA;&#xA;<ul>&#xA;<li><p><code>virtual</code> functions in constructors <a href=&quot;http://stackoverflow.com/questions/36832&quot; title=&quot;Virtual functions in constructors, why do languages differ?&quot;>aren't</a>.</p></li>&#xA;<li><p>Don't violate the <a href=&quot;http://en.wikipedia.org/wiki/One_Definition_Rule&quot; rel=&quot;nofollow&quot;>ODR (One Definition Rule)</a>, that's what anonymous namespaces are for (among other things).</p></li>&#xA;<li><p>Order of initialization of members depends on the order in which they are declared.</p>&#xA;&#xA;<pre><code>class bar {&#xA;    vector&lt;int&gt; vec_;&#xA;    unsigned size_; // Note size_ declared *after* vec_&#xA;public:&#xA;    bar(unsigned size)&#xA;        : size_(size)&#xA;        , vec_(size_) // size_ is uninitialized&#xA;        {}&#xA;};&#xA;</code></pre></li>&#xA;<li><p>Default values and <code>virtual</code> have different semantics.</p>&#xA;&#xA;<pre><code>class base {&#xA;public:&#xA;    virtual foo(int i = 42) { cout &lt;&lt; &quot;base &quot; &lt;&lt; i; }&#xA;};&#xA;&#xA;class derived : public base {&#xA;public:&#xA;    virtual foo(int i = 12) { cout &lt;&lt; &quot;derived &quot;&lt;&lt; i; }&#xA;};&#xA;&#xA;derived d;&#xA;base&amp; b = d;&#xA;b.foo(); // Outputs `derived 42`&#xA;</code></pre></li>&#xA;</ul>&#xA;"
48708,2,30373,"2008-09-07 19:34:10",2,NULL,"<p>Be careful when using smart pointers and container classes.</p>&#xA;"
71386,2,30373,"2008-09-16 11:29:52",12,NULL,"<p>Brian has a great list: I'd add &quot;Always mark single argument constructors explicit (except in those rare cases you want automatic casting).&quot;</p>&#xA;"
117741,2,30373,"2008-09-22 21:25:17",8,NULL,"<p>Not really a specific tip, but a general guideline: check your sources.  C++ is an old language, and it has changed a lot over the years.  Best practices have changed with it, but unfortunately there's still a lot of old information out there.  There have been some very good book recommendations on here - I can second buying every one of Scott Meyers C++ books.  Become familiar with Boost and with the coding styles used in Boost - the people involved with that project are on the cutting edge of C++ design.</p>&#xA;&#xA;<p>Do not reinvent the wheel.  Become familiar with the STL and Boost, and use their facilities whenever possible rolling your own.  In particular, use STL strings and collections unless you have a very, very good reason not to.  Get to know auto_ptr and the Boost smart pointers library very well, understand under which circumstances each type of smart pointer is intended to be used, and then use smart pointers everywhere you might otherwise have used raw pointers.  Your code will be just as efficient and a lot less prone to memory leaks.</p>&#xA;&#xA;<p>Use static_cast, dynamic_cast, const_cast, and reinterpret_cast instead of C-style casts.  Unlike C-style casts they will let you know if you are really asking for a different type of cast than you think you are asking for.  And they stand out viisually, alerting the reader that a cast is taking place.</p>&#xA;"
117788,2,30373,"2008-09-22 21:34:25",2,NULL,"<p>Avoid <a href=&quot;http://www.idinews.com/quasiClass.pdf&quot; rel=&quot;nofollow&quot;>pseudo classes and quasi classes</a>... Overdesign basically.</p>&#xA;"
117801,2,30373,"2008-09-22 21:37:03",3,NULL,"<ol>&#xA;<li>Not reading the <a href=&quot;http://www.parashift.com/c++-faq-lite/&quot; rel=&quot;nofollow&quot;>C++ FAQ Lite</a>. It explains many bad (and good!) practices.</li>&#xA;<li>Not using <a href=&quot;http://en.wikipedia.org/wiki/Boost_%28C%2B%2B_libraries%29&quot; rel=&quot;nofollow&quot;>Boost</a>. You'll save yourself a lot of frustration by taking advantage of Boost where possible.</li>&#xA;</ol>&#xA;"
117820,2,30373,"2008-09-22 21:40:24",1,NULL,"<p>Read the book <em><a href=&quot;http://rads.stackoverflow.com/amzn/click/0321125185&quot; rel=&quot;nofollow&quot;>C++ Gotchas: Avoiding Common Problems in Coding and Design</a></em>.</p>&#xA;"
281451,2,30373,"2008-11-11 16:46:28",6,NULL,"<p>Using C++ like C. Having a create-and-release cycle in the code.</p>&#xA;&#xA;<p>In C++, this is not exception safe and thus the release may not be executed. In C++, we use <a href=&quot;https://en.wikipedia.org/wiki/Resource_Acquisition_Is_Initialization&quot; rel=&quot;nofollow&quot;>RAII</a> to solve this problem.</p>&#xA;&#xA;<p>All resources that have a manual create and release should be wrapped in an object so these actions are done in the constructor/destructor.</p>&#xA;&#xA;<pre><code>// C Code&#xA;void myFunc()&#xA;{&#xA;    Plop*   plop = createMyPlopResource();&#xA;&#xA;    // Use the plop&#xA;&#xA;    releaseMyPlopResource(plop);&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>In C++, this should be wrapped in an object:</p>&#xA;&#xA;<pre><code>// C++&#xA;class PlopResource&#xA;{&#xA;    public:&#xA;        PlopResource()&#xA;        {&#xA;            mPlop=createMyPlopResource();&#xA;            // handle exceptions and errors.&#xA;        }&#xA;        ~PlopResource()&#xA;        {&#xA;             releaseMyPlopResource(mPlop);&#xA;        }&#xA;    private:&#xA;        Plop*  mPlop;&#xA; };&#xA;&#xA;void myFunc()&#xA;{&#xA;    PlopResource  plop;&#xA;&#xA;    // Use the plop&#xA;    // Exception safe release on exit.&#xA;}&#xA;</code></pre>&#xA;"
281487,2,30373,"2008-11-11 17:00:35",0,NULL,"<p>Always check a pointer before you dereference it.  In C, you could usually count on a crash at the point where you dereference a bad pointer; in C++, you can create an invalid reference which will crash at a spot far removed from the source of the problem.</p>&#xA;&#xA;<pre><code>class SomeClass&#xA;{&#xA;    ...&#xA;    void DoSomething()&#xA;    {&#xA;        ++counter;    // crash here!&#xA;    }&#xA;    int counter;&#xA;};&#xA;&#xA;void Foo(SomeClass &amp; ref)&#xA;{&#xA;    ...&#xA;    ref.DoSomething();    // if DoSomething is virtual, you might crash here&#xA;    ...&#xA;}&#xA;&#xA;void Bar(SomeClass * ptr)&#xA;{&#xA;    Foo(*ptr);    // if ptr is NULL, you have created an invalid reference&#xA;                  // which probably WILL NOT crash here&#xA;}&#xA;</code></pre>&#xA;"
281562,2,30373,"2008-11-11 17:25:51",0,NULL,"<p>Intention is <code>(x == 10)</code>:</p>&#xA;&#xA;<pre><code>if (x = 10) {&#xA;    //Do something&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>I thought I would never make this mistake myself, but I actually did it recently.</p>&#xA;"
281593,2,30373,"2008-11-11 17:38:46",1,NULL,"<p>Keep the name spaces straight (including struct, class, namespace, and using).  That's my number-one frustration when the program just doesn't compile.</p>&#xA;"
281609,2,30373,"2008-11-11 17:43:24",1,NULL,"<p>To mess up, use straight pointers a lot.  Instead, use RAII for almost anything, making sure of course that you use the right smart pointers.  If you write &quot;delete&quot; anywhere outside a handle or pointer-type class, you're very likely doing it wrong.</p>&#xA;"
282070,2,30373,"2008-11-11 20:40:00",1,NULL,"<blockquote>&#xA;  <ul>&#xA;  <li><code>static_cast</code> downcast on a virtual base class</li>&#xA;  </ul>&#xA;</blockquote>&#xA;&#xA;<p>Not really... Now about my misconception: I thought that <code>A</code> in the following was a virtual base class when in fact it's not; it's, according to 10.3.1, a <em>polymorphic class</em>. Using <code>static_cast</code> here seems to be fine.</p>&#xA;&#xA;<pre><code>struct B { virtual ~B() {} };&#xA;&#xA;struct D : B { };&#xA;</code></pre>&#xA;&#xA;<p>In summary, yes, this is a dangerous pitfall.</p>&#xA;"
282921,2,30373,"2008-11-12 03:22:42",-1,NULL,"<pre><code>#include &lt;boost/shared_ptr.hpp&gt;&#xA;class A {&#xA;public:&#xA;  void nuke() {&#xA;     boost::shared_ptr&lt;A&gt; (this);&#xA;  }&#xA;};&#xA;&#xA;int main(int argc, char** argv) {&#xA;  A a;&#xA;  a.nuke();&#xA;  return(0);&#xA;}&#xA;</code></pre>&#xA;"
285100,2,30373,"2008-11-12 19:47:01",2,NULL,"<p>Forgetting to define a base class destructor virtual. This means that calling <code>delete</code> on a Base* won't end up destructing the derived part.</p>&#xA;"
293047,2,30373,"2008-11-15 21:02:15",45,NULL,"<h2>Pitfalls in decreasing order of their importance</h2>&#xA;&#xA;<p>First of all, you should visit the award winning <a href=&quot;http://www.parashift.com/c++-faq-lite/&quot; rel=&quot;nofollow&quot;>C++ FAQ Light</a>. It has many good answers to pitfalls. If you have further questions, visit <code>##c++</code> on <code>irc.freenode.org</code> in <a href=&quot;http://en.wikipedia.org/wiki/Internet_Relay_Chat&quot; rel=&quot;nofollow&quot;>IRC</a>. We are glad to help you, if we can. Note all the following pitfalls are originally written. They are not just copied from random sources.</p>&#xA;&#xA;<hr>&#xA;&#xA;<blockquote>&#xA;  <p>delete<code>[]</code> on new, <code>delete</code> on <code>new[]</code></p>&#xA;</blockquote>&#xA;&#xA;<p><strong>Solution</strong>: Doing the above yields to undefined behavior: Everything could happen. Understand your code and what it does, and always <code>delete[]</code> what you <code>new[]</code>, and <code>delete</code> what you <code>new</code>, then that won't happen.</p>&#xA;&#xA;<p><strong>Exception</strong>:</p>&#xA;&#xA;<pre><code>typedef T type[N]; T * pT = new type; delete[] pT;&#xA;</code></pre>&#xA;&#xA;<p>You need to <code>delete[]</code> even though you <code>new</code>, since you new'ed an array. So if you are working with <code>typedef</code>, take special care.</p>&#xA;&#xA;<hr>&#xA;&#xA;<blockquote>&#xA;  <p>Calling a virtual function in a constructor or destructor</p>&#xA;</blockquote>&#xA;&#xA;<p><strong>Solution</strong>: Calling a virtual function won't call the overriding functions in the derived classes. Calling a <em>pure virtual function</em> in a constructor or desctructor is undefined behavior.</p>&#xA;&#xA;<hr>&#xA;&#xA;<blockquote>&#xA;  <p>Calling <code>delete</code> or <code>delete[]</code> on an already deleted pointer</p>&#xA;</blockquote>&#xA;&#xA;<p><strong>Solution</strong>: Assign 0 to every pointer you delete. Calling <code>delete</code> or <code>delete[]</code> on a null-pointer does nothing.</p>&#xA;&#xA;<hr>&#xA;&#xA;<blockquote>&#xA;  <p>Taking the sizeof of a pointer, when the number of elements of an 'array' is to be calculated.</p>&#xA;</blockquote>&#xA;&#xA;<p><strong>Solution</strong>: Pass the number of elements alongside the pointer when you need to pass an array as a pointer into a function. Use the function proposed <a href=&quot;http://stackoverflow.com/questions/275994/whats-the-best-way-to-do-a-backwards-loop-in-ccc#276053&quot;>here</a> if you take the sizeof of an array that is supposed to be really an array.</p>&#xA;&#xA;<hr>&#xA;&#xA;<blockquote>&#xA;  <p>Using an array as if it were a pointer. Thus, using <code>T **</code> for a two dimentional array.</p>&#xA;</blockquote>&#xA;&#xA;<p><strong>Solution</strong>: See <a href=&quot;http://stackoverflow.com/questions/274865/pointer-question-in-c#274943&quot;>here</a> for why they are different and how you handle them.</p>&#xA;&#xA;<hr>&#xA;&#xA;<blockquote>&#xA;  <p>Writing to a string literal: <code>char * c = &quot;hello&quot;; *c = 'B';</code></p>&#xA;</blockquote>&#xA;&#xA;<p><strong>Solution</strong>: Allocate an array that is initialized from the data of the string literal, then you can write to it:</p>&#xA;&#xA;<pre><code>char c[] = &quot;hello&quot;; *c = 'B';&#xA;</code></pre>&#xA;&#xA;<p>Writing to a string literal is undefined behavior. Anyway, the above conversion from a string literal to <code>char *</code> is deprecated. So compilers will probably warn if you increase the warning level.</p>&#xA;&#xA;<hr>&#xA;&#xA;<blockquote>&#xA;  <p>Creating resources, then forgetting to free them when something throws.</p>&#xA;</blockquote>&#xA;&#xA;<p><strong>Solution</strong>: Use smart pointers like <a href=&quot;http://en.cppreference.com/w/cpp/memory/unique_ptr&quot; rel=&quot;nofollow&quot;><code>std::unique_ptr</code></a> or <a href=&quot;http://en.cppreference.com/w/cpp/memory/shared_ptr&quot; rel=&quot;nofollow&quot;><code>std::shared_ptr</code></a> as pointed out by other answers.</p>&#xA;&#xA;<hr>&#xA;&#xA;<blockquote>&#xA;  <p>Modifying an object twice like in this example: <code>i = ++i;</code></p>&#xA;</blockquote>&#xA;&#xA;<p><strong>Solution</strong>: The above was supposed to assign to <code>i</code> the value of <code>i+1</code>. But what it does is not defined. Instead of incrementing <code>i</code> and assigning the result, it changes <code>i</code> on the right side as well. Changing an object between two sequence points is undefined behavior. Sequence points include <code>||</code>, <code>&amp;&amp;</code>, <code>comma-operator</code>, <code>semicolon</code> and <code>entering a function</code> (non exhaustive list!). Change the code to the following to make it behave correctly: <code>i = i + 1;</code></p>&#xA;&#xA;<hr>&#xA;&#xA;<h2>Misc Issues</h2>&#xA;&#xA;<blockquote>&#xA;  <p>Forgetting to flush streams before calling a blocking function like <code>sleep</code>.</p>&#xA;</blockquote>&#xA;&#xA;<p><strong>Solution</strong>: Flush the stream by streaming either <code>std::endl</code> instead of <code>\n</code> or by calling <code>stream.flush();</code>.</p>&#xA;&#xA;<hr>&#xA;&#xA;<blockquote>&#xA;  <p>Declaring a function instead of a variable.</p>&#xA;</blockquote>&#xA;&#xA;<p><strong>Solution</strong>: The issue arises because the compiler interprets for example</p>&#xA;&#xA;<pre><code>Type t(other_type(value));&#xA;</code></pre>&#xA;&#xA;<p>as a function declaration of a function <code>t</code> returning <code>Type</code> and having a parameter of type <code>other_type</code> which is called <code>value</code>. You solve it by putting parentheses around the first argument. Now you get a variable <code>t</code> of type <code>Type</code>:</p>&#xA;&#xA;<pre><code>Type t((other_type(value)));&#xA;</code></pre>&#xA;&#xA;<hr>&#xA;&#xA;<blockquote>&#xA;  <p>Calling the function of a free object that is only declared in the current translation unit (<code>.cpp</code> file).</p>&#xA;</blockquote>&#xA;&#xA;<p><strong>Solution</strong>: The standard doesn't define the order of creation of free objects (at namespace scope) defined across different translation units. Calling a member function on an object not yet constructed is undefined behavior. You can define the following function in the object's translation unit instead and call it from other ones:</p>&#xA;&#xA;<pre><code>House &amp; getTheHouse() { static House h; return h; }&#xA;</code></pre>&#xA;&#xA;<p>That would create the object on demand and leave you with a fully constructed object at the time you call functions on it.</p>&#xA;&#xA;<hr>&#xA;&#xA;<blockquote>&#xA;  <p>Defining a template in a <code>.cpp</code> file, while it's used in a different <code>.cpp</code> file.</p>&#xA;</blockquote>&#xA;&#xA;<p><strong>Solution</strong>: Almost always you will get errors like <code>undefined reference to ...</code>. Put all the template definitions in a header, so that when the compiler is using them, it can already produce the code needed.</p>&#xA;&#xA;<hr>&#xA;&#xA;<blockquote>&#xA;  <p><code>static_cast&lt;Derived*&gt;(base);</code> if base is a pointer to a virtual base class of <code>Derived</code>.</p>&#xA;</blockquote>&#xA;&#xA;<p><strong>Solution</strong>: A virtual base class is a base which occurs only once, even if it is inherited more than once by different classes indirectly in an inheritance tree. Doing the above is not allowed by the Standard. Use dynamic_cast to do that, and make sure your base class is polymorphic.</p>&#xA;&#xA;<hr>&#xA;&#xA;<blockquote>&#xA;  <p><code>dynamic_cast&lt;Derived*&gt;(ptr_to_base);</code> if base is non-polymorphic</p>&#xA;</blockquote>&#xA;&#xA;<p><strong>Solution</strong>: The standard doesn't allow a downcast of a pointer or reference when the object passed is not polymorphic. It or one of its base classes has to have a virtual function.</p>&#xA;&#xA;<hr>&#xA;&#xA;<blockquote>&#xA;  <p>Making your function accept <code>T const **</code></p>&#xA;</blockquote>&#xA;&#xA;<p><strong>Solution</strong>: You might think that's safer than using <code>T **</code>, but actually it will cause headache to people that want to pass <code>T**</code>: The standard doesn't allow it. It gives a neat example of why it is disallowed:</p>&#xA;&#xA;<pre><code>int main() {&#xA;    char const c = ’c’;&#xA;    char* pc;&#xA;    char const** pcc = &amp;pc; //1: not allowed&#xA;    *pcc = &amp;c;&#xA;    *pc = ’C’; //2: modifies a const object&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>Always accept <code>T const* const*;</code> instead.</p>&#xA;&#xA;<h2></h2>&#xA;&#xA;<p>Another (closed) pitfalls thread about C++, so people looking for them will find them, is Stack Overflow question <em><a href=&quot;http://stackoverflow.com/questions/280531&quot;>C++ pitfalls</a></em>.</p>&#xA;"
293080,2,30373,"2008-11-15 21:34:30",0,NULL,"<p>The essay/article <em><a href=&quot;http://www.goingware.com/tips/parameters/&quot; rel=&quot;nofollow&quot;>Pointers, references and Values</a></em> is very useful. It talks avoid avoiding pitfalls and good practices. You can browse the whole site too, which contains programming tips, mainly for C++.</p>&#xA;"
754364,2,30373,"2009-04-16 00:46:18",0,NULL,"<p>I spent many years doing C++ development. I wrote a <a href=&quot;http://btstout.blogspot.com/2005_09_01_archive.html&quot; rel=&quot;nofollow&quot;>quick summary</a> of problems I had with it years ago. Standards-compliant compilers are not really a problem anymore, but I suspect the other pitfalls outlined are still valid.</p>&#xA;"
3986213,2,30373,"2010-10-21 09:52:39",0,NULL,"<p>Forgetting an <code>&amp;</code> and thereby creating a copy instead of a reference.</p>&#xA;&#xA;<p>This happened to me twice in different ways:</p>&#xA;&#xA;<ul>&#xA;<li><p>One instance was in an argument list, which caused a large object to be put on the stack with the result of a stack overflow and crash of the embedded system.</p></li>&#xA;<li><p>I forgot the <code>&amp;</code> on an instance variable, with the effect that the object was copied. After registering as a listener to the copy I wondered why I never got the callbacks from the original object.</p></li>&#xA;</ul>&#xA;&#xA;<p>Both where rather hard to spot, because the difference is small and hard to see, and otherwise objects and references are used syntactically in the same way.</p>&#xA;"
32287,2,32282,"2008-08-28 13:36:46",6,NULL,"<p><a href=&quot;http://www.regexbuddy.com/&quot; rel=&quot;nofollow&quot;>RegexBuddy</a> is a weapon of choice</p>&#xA;"
32288,2,32282,"2008-08-28 13:36:47",16,NULL,"<p><a href=&quot;http://www.regexbuddy.com/&quot;>RegexBuddy</a></p>&#xA;"
32290,2,32282,"2008-08-28 13:37:34",75,NULL,"<p>The most powerful free online regexp testing tool is by far <a href=&quot;http://regex101.com/&quot; rel=&quot;nofollow&quot;>http://regex101.com/</a> - lets you select the RE engine (PCRE, JavaScript, Python), has a debugger, colorizes the matches, explains the regexp on the fly, can create permalinks to the regex playground.</p>&#xA;&#xA;<p>Other online tools:</p>&#xA;&#xA;<ul>&#xA;<li><a href=&quot;http://www.rexv.org/&quot; rel=&quot;nofollow&quot;>http://www.rexv.org/</a> - supports PHP and Perl PCRE, Posix, Python, JavaScript, and Node.js</li>&#xA;<li><a href=&quot;http://refiddle.com/&quot; rel=&quot;nofollow&quot;>http://refiddle.com/</a> - Inspired by jsfiddle, but for regular expressions. Supports JavaScript, Ruby and .NET expressions.</li>&#xA;<li><a href=&quot;http://regexpal.com/&quot; rel=&quot;nofollow&quot;>http://regexpal.com/</a> - powered by the <a href=&quot;http://xregexp.com/&quot; rel=&quot;nofollow&quot;>XRegExp</a> JavaScript library</li>&#xA;<li><a href=&quot;http://www.rubular.com/&quot; rel=&quot;nofollow&quot;>http://www.rubular.com/</a> - Ruby-based</li>&#xA;<li><a href=&quot;http://www.perlfect.com/articles/regextutor.shtml&quot; rel=&quot;nofollow&quot;>Perl Regex Tutor</a> - uses PCRE</li>&#xA;</ul>&#xA;&#xA;<p>Windows desktop tools:</p>&#xA;&#xA;<ul>&#xA;<li><a href=&quot;http://www.weitz.de/regex-coach/&quot; rel=&quot;nofollow&quot;>The Regex Coach</a> - free Windows application</li>&#xA;<li><a href=&quot;http://www.regexbuddy.com/&quot; rel=&quot;nofollow&quot;>RegexBuddy</a> recommended by most, costs US$ 39.95</li>&#xA;</ul>&#xA;&#xA;<p>Jeff Atwood [wrote about regular expressions]( post:).</p>&#xA;&#xA;<p>Other tools recommended by SO users include:</p>&#xA;&#xA;<ul>&#xA;<li><a href=&quot;http://www.txt2re.com/&quot; rel=&quot;nofollow&quot;><a href=&quot;http://www.txt2re.com/&quot; rel=&quot;nofollow&quot;>http://www.txt2re.com/</a></a> Online free tool to generate regular expressions for multiple language  (@<a href=&quot;http://stackoverflow.com/questions/4736/learning-regular-expressions#4763&quot;>palmsey</a> another thread)</li>&#xA;<li>The Added Bytes <a href=&quot;http://www.addedbytes.com/cheat-sheets/regular-expressions-cheat-sheet/&quot; rel=&quot;nofollow&quot;>Regular Expressions Cheat Sheet</a> (@<a href=&quot;http://stackoverflow.com/questions/4736/learning-regular-expressions#4739&quot;>GateKiller</a> another thread)</li>&#xA;<li><a href=&quot;http://regexhero.net/&quot; rel=&quot;nofollow&quot;>http://regexhero.net/</a> - The Online .NET Regular Expression Tester. Not free.</li>&#xA;</ul>&#xA;"
32291,2,32282,"2008-08-28 13:37:36",1,NULL,"<p>Regexbuddy does all this. <a href=&quot;http://www.regexbuddy.com/&quot; rel=&quot;nofollow&quot;>http://www.regexbuddy.com/</a></p>&#xA;"
32292,2,32282,"2008-08-28 13:38:13",1,NULL,"<p>see the accepted answer to this question: <a href=&quot;http://stackoverflow.com/questions/4736/learning-regular-expressions#4741&quot; rel=&quot;nofollow&quot;>Learning Regular Expressions</a></p>&#xA;"
32294,2,32282,"2008-08-28 13:38:50",2,NULL,"<p><a href=&quot;http://www.regexbuddy.com/&quot; rel=&quot;nofollow&quot;>RegexBuddy</a> is great!!!</p>&#xA;"
32298,2,32282,"2008-08-28 13:39:32",7,NULL,"<p><a href=&quot;http://www.rubular.com/&quot;>Rubular</a> is free, easy to use and looks nice.</p>&#xA;"
32300,2,32282,"2008-08-28 13:40:23",10,NULL,"<p>I use Expresso (<a href=&quot;http://www.ultrapico.com/&quot;>www.ultrapico.com</a>).  It has a lot of nice features for the developer.  The Regulator used to be my favorite, but it hasn't been updated in so long and I constantly ran into crashes with complicated RegExs.</p>&#xA;"
32319,2,32282,"2008-08-28 13:47:27",0,NULL,"<p>RegExBuddy so far I concur with and endorse.</p>&#xA;"
32327,2,32282,"2008-08-28 13:49:28",2,NULL,"<p>I agree on RegExBuddy, but if you want free or when I'm working somewhere and not on my own system <a href=&quot;http://gskinner.com/RegExr/&quot; rel=&quot;nofollow&quot;>RegExr</a> is a great online (Flash) tool that has lots of pre-built regex segments to work with and does real-time pattern matching for your testing.</p>&#xA;"
32354,2,32282,"2008-08-28 14:14:31",8,NULL,"<p>If you are an Emacs user, the command <code>re-builder</code> lets you type an Emacs regex and shows on the fly the matching strings in the current buffer, with colors to mark groups. It's free as Emacs.</p>&#xA;"
32365,2,32282,"2008-08-28 14:17:32",9,NULL,"<p>Here are some for the Mac: (<em>Note: don't judge the tools by their websites</em>)</p>&#xA;&#xA;<ul>&#xA;<li><a href=&quot;http://homepage.mac.com/roger_jolly/software/&quot;>RegExhibit</a> - My Favorite, powerful and easy</li>&#xA;<li><a href=&quot;http://code.google.com/p/reggy/&quot;>Reggy</a> - Simple and Clean</li>&#xA;<li><a href=&quot;http://robrohan.com/2008/06/25/mac-os-x-regex-widget-update-17/&quot;>RegexWidget</a> - A Dashboard Widget for quick testing</li>&#xA;</ul>&#xA;"
32398,2,32282,"2008-08-28 14:25:37",1,NULL,"<p>I'll add to the vote of <a href=&quot;http://reggyapp.com/&quot; rel=&quot;nofollow&quot;>Reggy</a> for the Mac, gonna try out some of the other ones that Joseph suggested and upvote that post tomorrow when my limit gets reset.</p>&#xA;"
32591,2,32282,"2008-08-28 15:29:16",1,NULL,"<p>for online: <a href=&quot;http://regexpal.com/&quot; rel=&quot;nofollow&quot;>http://regexpal.com/</a>&#xA;for desktop: <a href=&quot;http://www.weitz.de/regex-coach/&quot; rel=&quot;nofollow&quot;>The Regex Coach</a></p>&#xA;"
32641,2,32282,"2008-08-28 15:50:40",1,NULL,"<p>+1 For Regex Coach here.  Free and does the job really well.</p>&#xA;&#xA;<p><a href=&quot;http://www.weitz.de/regex-coach/&quot; rel=&quot;nofollow&quot;>http://www.weitz.de/regex-coach/</a></p>&#xA;"
32903,2,32282,"2008-08-28 17:50:40",1,NULL,"<p>I am still a big <a href=&quot;http://weblogs.asp.net/rosherove/pages/tools-and-frameworks-by-roy-osherove.aspx&quot; rel=&quot;nofollow&quot;>The Regulator</a> fan.<br />&#xA;There are some stability problems but these can be fixed by disableing the Intellisense.  It gets mad with some expressions and typos in building an expression.</p>&#xA;&#xA;<p>Would love it if <a href=&quot;http://weblogs.asp.net/rosherove/default.aspx&quot; rel=&quot;nofollow&quot;>Roy Osherove</a> updated, but looks like he is busy with other things.</p>&#xA;"
32913,2,32282,"2008-08-28 17:53:45",3,NULL,"<p>couple of eclipse plugins for those using eclipse,<BR>&#xA;<a href=&quot;http://www.brosinski.com/regex/&quot; rel=&quot;nofollow&quot;>http://www.brosinski.com/regex/</a></p>&#xA;&#xA;<p><a href=&quot;http://www.bastian-bergerhoff.com/eclipse/features/web/QuickREx/toc.html&quot; rel=&quot;nofollow&quot;>http://www.bastian-bergerhoff.com/eclipse/features/web/QuickREx/toc.html</a></p>&#xA;"
32965,2,32282,"2008-08-28 18:12:23",0,NULL,"<p><a href=&quot;http://gskinner.com/RegExr/&quot; rel=&quot;nofollow&quot;>RegExr</a> for testing with the Actionscript 3 (whichever standard that may be)</p>&#xA;"
71304,2,32282,"2008-09-16 11:15:41",1,NULL,"<p>I like to use this online one:&#xA;<a href=&quot;http://www.cuneytyilmaz.com/prog/jrx/&quot; rel=&quot;nofollow&quot;>http://www.cuneytyilmaz.com/prog/jrx/</a>&#xA;Of course, it'll be javascript regexp, but I've never yet done anything clever enough to notice the difference.</p>&#xA;"
72951,2,32282,"2008-09-16 14:32:02",1,NULL,"<p>How much is your time worth? Pay the $40 and get RegexBuddy. I did, and I even upgraded from 2.x version to 3.x. It has paid for itself many times over.</p>&#xA;"
133395,2,32282,"2008-09-25 13:39:58",6,NULL,"<p>I use the excellent and free <a href=&quot;http://www.radsoftware.com.au/regexdesigner/&quot;>Rad Software Regular Expression Designer</a>.</p>&#xA;&#xA;<p>If you just want to write a regular expression, have a little help with the syntax and test the RE's matching and replacing then this fairly light-footprint tool is ideal.</p>&#xA;"
678051,2,32282,"2009-03-24 15:53:38",2,NULL,"<p>In the standard <strong>Python</strong> installation there is a &quot;Tools/scripts&quot; directory containing <strong>redemo.py</strong>. </p>&#xA;&#xA;<p>This creates an <em>interactive</em> Tkinter window in which you can experiment with regexs.</p>&#xA;"
842003,2,32282,"2009-05-08 21:57:21",2,NULL,"<p>In the past I preferred The Regex Coach for its simplistic layout, instantaneous highlighting and its price (free).</p>&#xA;&#xA;<p>Every once in awhile though I run into an issue with it when trying to test .NET regular expressions.  For that, it turns out, it's better to use a tool that actually uses the .NET regular expression engine.  That was my whole reason to build <a href=&quot;http://regexhero.net/&quot; rel=&quot;nofollow&quot;>Regex Hero</a> last year.  It runs in Silverlight, and as such, runs off of the .NET Regex Class library directly.</p>&#xA;"
870654,2,32282,"2009-05-15 20:10:37",3,NULL,"<p><a href=&quot;http://kodos.sourceforge.net/&quot; rel=&quot;nofollow&quot;>Kodos</a> of course. Cause it's Pythonic. ;)</p>&#xA;"
1755538,2,32282,"2009-11-18 12:03:02",1,NULL,"<p>I personally like the <a href=&quot;https://addons.mozilla.org/en-US/firefox/addon/2077&quot; rel=&quot;nofollow&quot;>Regular Expression Tester</a>.</p>&#xA;&#xA;<p>It's a free firefox plugin, so always on!</p>&#xA;"
1874257,2,32282,"2009-12-09 14:27:32",1,NULL,"<p>Also <strong><a href=&quot;http://myregexp.com/eclipsePlugin.html&quot; rel=&quot;nofollow&quot;>this regex plugin</a></strong> can be useful for <strong><a href=&quot;http://eclipse.org&quot; rel=&quot;nofollow&quot;>eclipse</a></strong> and <strong><a href=&quot;http://www.jetbrains.com/idea/&quot; rel=&quot;nofollow&quot;>idea</a></strong> users.</p>&#xA;"
4411942,2,32282,"2010-12-10 18:13:41",1,NULL,"<p>I like <a href=&quot;http://regexhero.net/tester/&quot; rel=&quot;nofollow&quot;>http://regexhero.net/tester/</a> a lot</p>&#xA;"
5691709,2,32282,"2011-04-17 05:35:35",1,NULL,"<p>Check out <a href=&quot;http://alexandershapovalov.com/regular-expressions-tester-regex-master-74/&quot; rel=&quot;nofollow&quot;>Regex Master</a> which is free and open source <a href=&quot;http://alexandershapovalov.com/regular-expressions-tester-regex-master-74/&quot; rel=&quot;nofollow&quot;>regular expression tester</a></p>&#xA;"
9800537,2,32282,"2012-03-21 07:51:23",0,NULL,"<p><a href=&quot;http://rgx-extract-replace.appspot.com&quot; rel=&quot;nofollow&quot;>http://rgx-extract-replace.appspot.com</a>&#xA;has the functionality to enlist the captured regex groups formatted in columns and&#xA;optionally can replace the matched patterns in the input text.</p>&#xA;"
24241199,2,32282,"2014-06-16 10:06:01",1,NULL,"<p>This regex tester able to test javascript, php and python&#xA;<a href=&quot;http://www.piliapp.com/regex-tester/&quot; rel=&quot;nofollow&quot;>http://www.piliapp.com/regex-tester/</a></p>&#xA;"
33315,2,33265,"2008-08-28 20:28:55",14,NULL,"<p>The page you link to  <a href=&quot;http://msdn.microsoft.com/en-us/library/6x6y6z4d.aspx&quot;>http://msdn.microsoft.com/en-us/library/6x6y6z4d.aspx</a> says what they were for, which was a way of handling nullable bools before nullable value types were introduced.</p>&#xA;&#xA;<p>I'd guess nowadays they're good for the same sort of stuff as ArrayList - i.e. absolutely nothing.</p>&#xA;"
33337,2,33265,"2008-08-28 20:36:11",3,NULL,"<p>It appears from the MSDN article you linked to it was provided to allow for nullable boolean types prior to the Nullable (i.e. int?, bool?, etc.) type being introducted into the language in C#2. Thus you would store an internal value indicating whether the value is true or false or null, i.e. in your example >0 for true, &lt;0 for false and ==0 for null, and then you'd get SQL-style null semantics. You would also have to implement a .IsNull method or property in order that nullity could be checked explicitly. </p>&#xA;&#xA;<p>Comparing to SQL, imagine a table Table with 3 rows with value Foo set to true, 3 rows with value Foo set to false and 3 rows with value Foo set to null.</p>&#xA;&#xA;<pre><code>SELECT COUNT(*) FROM Table WHERE Foo = TRUE OR Foo = FALSE&#xA;6&#xA;</code></pre>&#xA;&#xA;<p>In order to count all rows you'd have to do the following:-</p>&#xA;&#xA;<pre><code>SELECT COUNT(*) FROM Table WHERE Foo = TRUE OR Foo = FALSE OR Foo IS NULL&#xA;9&#xA;</code></pre>&#xA;&#xA;<p>This 'IS NULL' syntax would have equivilent code in your class as .IsNull().</p>&#xA;&#xA;<p>LINQ makes the comparison to C# even clearer:-</p>&#xA;&#xA;<pre><code>int totalCount = (from s in MyTypeEnumerable&#xA;                 where s || !s&#xA;                 select s).Count();&#xA;</code></pre>&#xA;&#xA;<p>Imagining that MyTypeEnumberable has exactly the same contents of the database, i.e. 3 values equal to true, 3 values equal to false and 3 values equal to null. In this case totalCount would evaluate to 6 in this case. However, if we re-wrote the code as:-</p>&#xA;&#xA;<pre><code>int totalCount = (from s in MyTypeEnumerable&#xA;                 where s || !s || s.IsNull()&#xA;                 select s).Count();&#xA;</code></pre>&#xA;&#xA;<p>Then totalCount would evaluate to 9.</p>&#xA;&#xA;<p>The DBNull example given in the linked MSDN article on the false operator demonstrates a class in the BCL which has this exact behaviour.</p>&#xA;&#xA;<p>In effect the conclusion is you shouldn't use this unless you're completely sure you want this type of behaviour, it's better to just use the far simpler nullable syntax!!</p>&#xA;&#xA;<p><strong>Update:</strong> I just noticed you need to manually override the logic operators !, || and &amp;&amp; to make this work properly. I believe the false operator feeds into these logical operators, i.e. indicating truth, falsity or 'otherwise'. As noted in another comment !x won't work off the bat; you have to overload !. Weirdness!</p>&#xA;"
33339,2,33265,"2008-08-28 20:36:17",5,NULL,"<p>AFAIK, it would be used in a test for false, such as when the <code>&amp;&amp;</code> operator comes into play. Remember, &amp;&amp; short-circuits, so in the expression</p>&#xA;&#xA;<pre><code>if ( mFalse &amp;&amp; mTrue) &#xA;{&#xA;   // ... something&#xA;}&#xA;</code></pre>&#xA;&#xA;<p><code>mFalse.false()</code> is called, and upon returning <code>true</code> the expression is reduced to a call to 'mFalse.true()' (which should then return <code>false</code>, or things will get weird).</p>&#xA;&#xA;<p>Note that you must implement the <code>&amp;</code> operator in order for that expression to compile, since it's used if <code>mFalse.false()</code> returns <code>false</code>.</p>&#xA;&#xA;<p>@<a href=&quot;http://stackoverflow.com/questions/33265/whats-the-false-operator-in-c-good-for#33391&quot; rel=&quot;nofollow&quot;>nird.myopenid.com</a> - wow, that's cool! And horrible! But cool...</p>&#xA;"
33391,2,33265,"2008-08-28 21:02:48",50,NULL,"<p>You can use it to override the &amp;&amp; and || operators.</p>&#xA;&#xA;<p>The &amp;&amp; and || operators can't be overridden, but if you override |, &amp;, true and false in exactly the right way the compiler will call | and &amp; when you write || and &amp;&amp;</p>&#xA;&#xA;<p>for example, look at this code (from <a href=&quot;http://www.ayende.com/Blog/archive/2006/08/04/7381.aspx&quot;>http://www.ayende.com/Blog/archive/2006/08/04/7381.aspx</a> - where I found out about this trick):</p>&#xA;&#xA;<p><strong>EDIT</strong>: The URL was broken. Here is a link to the archive of that URL: <a href=&quot;http://web.archive.org/web/20080613013350/http://www.ayende.com/Blog/archive/2006/08/04/7381.aspx&quot;>http://web.archive.org/web/20080613013350/http://www.ayende.com/Blog/archive/2006/08/04/7381.aspx</a></p>&#xA;&#xA;<pre><code>public static AbstractCriterion operator &amp;(AbstractCriterion lhs, AbstractCriterion rhs)&#xA;{&#xA;       return new AndExpression(lhs, rhs);&#xA;}&#xA;&#xA;public static AbstractCriterion operator |(AbstractCriterion lhs, AbstractCriterion rhs)&#xA;{&#xA;       return new OrExpression(lhs, rhs);&#xA;}&#xA;&#xA;public static bool operator false(AbstractCriterion criteria)&#xA;{&#xA;       return false;&#xA;}&#xA;public static bool operator true(AbstractCriterion criteria)&#xA;{&#xA;       return false;&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>This is obviously a side effect and not the way it's intended to be used, but it is useful.</p>&#xA;"
33437,2,33265,"2008-08-28 21:23:27",13,NULL,"<p><a href=&quot;#33339&quot;>Shog9</a> and <a href=&quot;#33391&quot;>Nir</a>:&#xA;thanks for your answers. Those answers pointed me to <a href=&quot;http://steve.emxsoftware.com/NET/Overloading+the++and++operators&quot;>Steve Eichert article</a> and it pointed me to <a href=&quot;http://msdn.microsoft.com/en-us/library/aa691312.aspx&quot;>msdn</a>:</p>&#xA;&#xA;<blockquote>&#xA;  <p>The operation x &amp;&amp; y is evaluated as T.false(x) ? x : T.&amp;(x, y), where T.false(x) is an invocation of the operator false declared in T, and T.&amp;(x, y) is an invocation of the selected operator &amp;. In other words, x is first evaluated and operator false is invoked on the result to determine if x is definitely false. Then, if x is definitely false, the result of the operation is the value previously computed for x. Otherwise, y is evaluated, and the selected operator &amp; is invoked on the value previously computed for x and the value computed for y to produce the result of the operation.</p>&#xA;</blockquote>&#xA;"
34586,2,34571,"2008-08-29 16:14:20",224,NULL,"<p>The best way to test a private method is via another public method. If this cannot be done, then one of the following conditions is true:</p>&#xA;&#xA;<ol>&#xA;<li>The private method is dead code</li>&#xA;<li>There is a design smell near the class that you are testing</li>&#xA;<li>The method that you are trying to test should not be private</li>&#xA;</ol>&#xA;"
34590,2,34571,"2008-08-29 16:14:55",45,NULL,"<p>Generally a unit test is intended to exercise the public interface of a class or unit. Therefore, private methods are implementation detail that you would not expect to test explicitly.</p>&#xA;"
34594,2,34571,"2008-08-29 16:15:30",29,NULL,"<p>The private methods are called by a public method, so the inputs to your public methods should also test private methods that are called by those public methods. When a public method fails, then that could be a failure in the private method.</p>&#xA;"
34598,2,34571,"2008-08-29 16:16:20",100,NULL,"<p>From this article: <a href=&quot;http://www.artima.com/suiterunner/private.html&quot;>Testing Private Methods with JUnit and SuiteRunner</a> (Bill Venners), you basically have 4 options:</p>&#xA;&#xA;<blockquote>&#xA;  <ul>&#xA;  <li>Don't test private methods.</li>&#xA;  <li>Give the methods package access.</li>&#xA;  <li>Use a nested test class.</li>&#xA;  <li>Use reflection. </li>&#xA;  </ul>&#xA;</blockquote>&#xA;"
34630,2,34571,"2008-08-29 16:23:46",0,NULL,"<p>I tend not to test private methods.  There lies madness.  Personally, I believe you should only test your publicly exposed interfaces (and that includes protected and internal methods).  </p>&#xA;"
34644,2,34571,"2008-08-29 16:30:04",1,NULL,"<p>I'd use <a href=&quot;http://docs.oracle.com/javase/tutorial/reflect/index.html&quot; rel=&quot;nofollow&quot;>reflection</a>, since I don't like the idea of changing the access to a package on the declared method just for the sake of testing. However, I usually just test the public methods which should also ensure the the private methods are working correctly.</p>&#xA;&#xA;<blockquote>&#xA;  <p>you can't use reflection to get private methods from outside the owner class, the private modifier affects reflection also</p>&#xA;</blockquote>&#xA;&#xA;<p>This is not true. You most certainly can, as mentioned in <a href=&quot;http://stackoverflow.com/questions/34571/whats-the-best-way-of-unit-testing-private-methods#34658&quot;>Cem Catikkas's answer</a>.</p>&#xA;"
34658,2,34571,"2008-08-29 16:35:12",579,NULL,"<p>If you have somewhat of a legacy application, and you're not allowed to change the visibility of your methods, the best way to test private methods is to use <a href=&quot;http://en.wikipedia.org/wiki/Reflection_%28computer_programming%29&quot;>reflection</a>. </p>&#xA;&#xA;<p>Internally we're using helpers to get/set <code>private</code> and <code>private static</code> variables as well as invoke <code>private</code> and <code>private static</code> methods. The following patterns will let you do pretty much anything related to the private methods and fields. Of course you can't change <code>private static final</code> variables through reflection.</p>&#xA;&#xA;<pre><code>Method method = targetClass.getDeclaredMethod(methodName, argClasses);&#xA;method.setAccessible(true);&#xA;return method.invoke(targetObject, argObjects);&#xA;</code></pre>&#xA;&#xA;<p>And for fields:</p>&#xA;&#xA;<pre><code>Field field = targetClass.getDeclaredField(fieldName);&#xA;field.setAccessible(true);&#xA;field.set(object, value);&#xA;</code></pre>&#xA;&#xA;<p>Notes:<br>&#xA;*  <code>targetClass.getDeclaredMethod(methodName, argClasses)</code> lets you look into <code>private</code> methods. The same thing applies for <code>getDeclaredField</code>.<br>&#xA;*  The <code>setAccessible(true)</code> is required to play around with privates.  </p>&#xA;"
38425,2,34571,"2008-09-01 20:58:47",12,NULL,"<p>EDIT: Having tried Cem Catikkas' <a href=&quot;http://stackoverflow.com/questions/34571/whats-the-best-way-of-unit-testing-private-methods#34658&quot;>solution using reflection</a>, I'd have to say his was a more elegant solution than I have described here. However, if you're looking for an alternative to using reflection, and have access to the source you're testing, this will still be an option.</p>&#xA;&#xA;<p>There is possible merit in testing private methods of a class, particularly with <a href=&quot;http://en.wikipedia.org/wiki/Test-driven_development&quot;>test driven development</a>, where you would like to design small tests before you write any code. </p>&#xA;&#xA;<p>Creating a test with access to private members and methods can test areas of code which are difficult to target specifically with access only to public methods. If a public method has several steps involved, it can consist of several private methods, which can then be tested individually. </p>&#xA;&#xA;<p>Advantages:</p>&#xA;&#xA;<ul>&#xA;<li>can test to a finer granularity</li>&#xA;</ul>&#xA;&#xA;<p>Disadvantages:</p>&#xA;&#xA;<ul>&#xA;<li>test code must reside in the same&#xA;file as source code, which can be&#xA;more difficult to maintain</li>&#xA;<li>similarly with .class output files, they must remain within the same package as declared in source code</li>&#xA;</ul>&#xA;&#xA;<p>However, if continuous testing requires this method, it may be a signal that the private methods should be extracted, which could be tested in the traditional, public way.</p>&#xA;&#xA;<p>Here is a convoluted example of how this would work:</p>&#xA;&#xA;<pre><code>// import statements and package declarations&#xA;&#xA;public class ClassToTest &#xA;{&#xA;    private int decrement(int toDecrement) {&#xA;    	toDecrement--;&#xA;    	return toDecrement;&#xA;    }&#xA;&#xA;    // constructor and rest of class&#xA;&#xA;    public static class StaticInnerTest extends TestCase&#xA;    {&#xA;    	public StaticInnerTest(){&#xA;    		super();&#xA;    	}&#xA;&#xA;    	public void testDecrement(){&#xA;    		int number = 10;&#xA;    		ClassToTest toTest= new ClassToTest();&#xA;    		int decremented = toTest.decrement(number);&#xA;    		assertEquals(9, decremented);&#xA;    	}&#xA;&#xA;    	public static void main(String[] args) {&#xA;    		junit.textui.TestRunner.run(StaticInnerTest.class);&#xA;    	}&#xA;&#xA;    }&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>Inner class would be compiled to <code>ClassToTest$StaticInnerTest</code>.</p>&#xA;&#xA;<p>See also:&#xA;<a href=&quot;http://www.javaworld.com/javaworld/javatips/jw-javatip106.html&quot;>http://www.javaworld.com/javaworld/javatips/jw-javatip106.html</a></p>&#xA;"
46255,2,34571,"2008-09-05 16:39:45",13,NULL,"<p>If you're trying to test existing code that you're reluctant or unable to change, reflection is a good choice.</p>&#xA;&#xA;<p>If the class's design is still flexible and you've got a complicated private method that you'd like to test separately, I suggest you pull it out into a separate class and test that class separately. This doesn't have to change the public interface of the original class, it can internally create an instance of the helper class and call the helper method.</p>&#xA;&#xA;<p>If you want to test difficult error conditions coming from the helper method, you can go a step further. Extract an interface from the helper class, add a public getter and setter to the original class to inject the helper class (used through its interface), and then inject a mock version of the helper class into the original class to test how the original class responds to exceptions from the helper. This approach is also helpful if you want to test the original class without also testing the helper class.</p>&#xA;"
51192,2,34571,"2008-09-09 03:50:57",6,NULL,"<p>If you want to test private methods of a legacy application where you can't change the code, one option is <a href=&quot;http://code.google.com/p/jmockit/&quot; rel=&quot;nofollow&quot;>jMockit</a>, which will allow you to create mocks to an object even when they're private to the class.</p>&#xA;"
52054,2,34571,"2008-09-09 14:43:05",125,NULL,"<p>When I have private methods in a class that is sufficiently complicated that I feel the need to test the private methods directly, that is a code smell: my class is too complicated.  </p>&#xA;&#xA;<p>My usual approach to addressing it is to tease out a new class that contains the interesting bits.  Often, this method and the fields it interacts with, and maybe another method or two can be extracted in to a new class.  </p>&#xA;&#xA;<p>The new class exposes these methods as 'public', so they're accessible for unit testing.  The new and old classes are now both simpler than the original class, which is great for me (I need to keep things simple, or I get lost!).</p>&#xA;&#xA;<p>Note that I'm not suggesting that anyone create classes without using their brain!  The point here is to use the forces of unit testing to help you find good new classes.  </p>&#xA;"
53571,2,34571,"2008-09-10 07:48:43",4,NULL,"<p>As many above have suggested, a good way is to test them via your public interfaces.</p>&#xA;&#xA;<p>If you do this, it's a good idea to use a code coverage tool (like Emma) to see if your private methods are in fact being executed from your tests.</p>&#xA;"
57795,2,34571,"2008-09-11 22:20:28",9,NULL,"<p>Since you're using JUnit, have you looked at <a href=&quot;http://junit-addons.sourceforge.net/&quot;>junit-addons</a>?  It has the ability to ignore the java security model and access private methods and attributes.</p>&#xA;"
91206,2,34571,"2008-09-18 09:29:51",3,NULL,"<p>First, I'll throw this question out:  why do your private members need isolated testing? Are they that complex, providing such complicated behaviors as to require testing apart from public surface?  It's unit testing, not 'line-of-code' testing.  Don't sweat the small stuff.</p>&#xA;&#xA;<p>If they are that big, big enough that these private members are each a 'unit' large in complexity -- consider refactoring such private members out of this class.  </p>&#xA;&#xA;<p>If refactoring is inappropriate or infeasible, can you use the strategy pattern to replace access to these private member functions / member classes when under unit test?  Under unit test, the strategy would provide added validation, but in release builds it would be simple pass-thru.</p>&#xA;"
190338,2,34571,"2008-10-10 06:44:02",6,NULL,"<p>Testing private methods breaks the encapsulation of your class because every time you change the internal implementation you break client code (in this case, the tests).</p>&#xA;&#xA;<p>So don't test private methods.</p>&#xA;"
549551,2,34571,"2009-02-14 18:53:04",12,NULL,"<p>As others have said... don't test private methods directly.  Here are a few thoughts:</p>&#xA;&#xA;<ol>&#xA;<li>keep all methods small and focused (easy to test, easy to find what is wrong)</li>&#xA;<li>use code coverage tools, I like <a href=&quot;http://cobertura.sourceforge.net/index.html&quot; rel=&quot;nofollow&quot;>Cobertura</a> (oh happy day, looks like a new version is out!)</li>&#xA;</ol>&#xA;&#xA;<p>Run the code coverage on the unit tests.  If you see that methods are not fully tested add to the tests to get the coverage up.  Aim for 100% code coverage but realize that you probably won't get it.</p>&#xA;"
549558,2,34571,"2009-02-14 18:54:45",0,NULL,"<p>You can turn off access restrictions for reflection so that private means nothing. </p>&#xA;&#xA;<p>The <code>setAccessible(true)</code> call does that.  </p>&#xA;&#xA;<p>The only restriction is that a ClassLoader may disallow you from doing that.</p>&#xA;&#xA;<p>See <a href=&quot;http://www.onjava.com/pub/a/onjava/2003/11/12/reflection.html&quot; rel=&quot;nofollow&quot;>Subverting Java Access Protection for Unit Testing</a> (Ross Burton) for a way to do this in Java </p>&#xA;"
549592,2,34571,"2009-02-14 19:11:02",1,NULL,"<p>In C# you could have used System.Reflection, though in Java I don't know. Though I feel the urge to answer this anyway since if you &quot;feel you need to unit test private methods&quot; my guess is that there is something else which is wrong...</p>&#xA;&#xA;<p>I would seriously consider looking at my architecture again with fresh eyes....</p>&#xA;"
1038507,2,34571,"2009-06-24 13:49:44",0,NULL,"<p>What if your test classes are in the same package as the class that should be tested?</p>&#xA;&#xA;<p>But in a different directory of course, <code>src</code> &amp; <code>classes</code> for your source code, <code>test/src</code> and <code>test/classes</code> for your test classes. And let <code>classes</code> and <code>test/classes</code> be in your classpath.</p>&#xA;"
1043013,2,34571,"2009-06-25 10:01:13",53,NULL,"<p>I have used <a href=&quot;http://en.wikipedia.org/wiki/Reflection_%28computer_programming%29&quot;>reflection</a> to do this in the past, and in my opinion it was a big mistake.</p>&#xA;&#xA;<p>Strictly speaking, you should <em>not</em> be writing unit tests that directly test private methods. What you <em>should</em> be testing is the public contract that the class has with other objects; you should never directly test an object's internals. If another developer wants to make a small internal change to the class, which doesn't affect the classes public contract, he/she then has to modify your reflection based test to ensure that it works. If you do this repeatedly throughout a project unit tests and then stop being a useful measurement of code health, and start to become a hindrance to development, and an annoyance to the development team.</p>&#xA;&#xA;<p>What I recommend doing instead is using a code coverage tool such as Cobertura, to ensure that the unit tests you write provide decent coverage of the code in private methods. That way, you indirectly test what the private methods are doing, and maintain a higher level of agility.</p>&#xA;"
3177465,2,34571,"2010-07-05 06:10:14",23,NULL,"<p>Just two examples of where I would want to test a private method:</p>&#xA;&#xA;<ol>&#xA;<li><strong>Decryption routines</strong> - I would not&#xA;want to make them visible to anyone to see just for&#xA;the sake of testing, else anyone can&#xA;use them to decrypt. But they are&#xA;intrinsic to the code, complicated,&#xA;and need to always work. (the obvious exception is reflection which can be used to view even private methods in most cases, when <code>SecurityManager</code> is not configured to prevent this)</li>&#xA;<li><strong>Creating an SDK</strong> for community&#xA;consumption. Here public takes on a&#xA;wholly different meaning, since this&#xA;is code that the whole world may see&#xA;(not just internal to my app). I put&#xA;code into private methods if I don't&#xA;want the SDK users to see it - I&#xA;don't see this as code smell, merely&#xA;as how SDK programming works. But of&#xA;course I still need to test my&#xA;private methods, and they are where&#xA;the functionality of my SDK actually&#xA;lives.</li>&#xA;</ol>&#xA;&#xA;<p>I understand the idea of only testing the &quot;contract&quot;. But I don't see one can advocate actually not testing code - ymmv.</p>&#xA;&#xA;<p>So my tradeoff involves complicating the JUnits with reflection, rather than compromising my security &amp; SDK.</p>&#xA;"
4667692,2,34571,"2011-01-12 10:27:21",14,NULL,"<p>To test legacy code with large and quirky classes, it is often very helpful to be able to test the one private (or public) method I'm writing <em>right now</em>.</p>&#xA;&#xA;<p>I use the <strong>junitx.util.PrivateAccessor</strong>-package. Lots of helpful one-liners for accessing private methods and private fields.</p>&#xA;&#xA;<pre><code>import junitx.util.PrivateAccessor;&#xA;&#xA;PrivateAccessor.setField(myObjectReference, &quot;myCrucialButHardToReachPrivateField&quot;, myNewValue);&#xA;PrivateAccessor.invoke(myObjectReference, &quot;privateMethodName&quot;, java.lang.Class[] parameterTypes, java.lang.Object[] args);&#xA;</code></pre>&#xA;&#xA;<p>Hope that was helpful :)</p>&#xA;"
5083041,2,34571,"2011-02-22 19:41:11",2,NULL,"<p>To answer your question, I've developed <a href=&quot;http://dp4j.com&quot; rel=&quot;nofollow&quot;>dp4j</a>; All you need is add dp4j.jar to your classpath (see instructions on website for eclipse).</p>&#xA;&#xA;<p>NB: it's the first release, patches are welcome (there are known limitations to be addressed in next releases)!</p>&#xA;"
5820700,2,34571,"2011-04-28 15:01:48",0,NULL,"<p>I only test the public interface, but I have been known to make specific private methods protected so I can either mock them out entirely, or add in additional steps specific for unit testing purposes. A general case is to hook in flags I can set from the unit test to make certain methods intentionally cause an exception to be able to test fault paths; the exception triggering code is only in the test path in an overridden implementation of the protected method.</p>&#xA;&#xA;<p>I minimize the need for this though and I always document the precise reasons to avoid confusion.</p>&#xA;"
8139572,2,34571,"2011-11-15 16:22:36",1,NULL,"<p>I am not sure whether this is a good technique but I developed the following pattern to unit test private methods:</p>&#xA;&#xA;<p>I don't modify the visibility of the method that I want to test and add an additional method. Instead I am adding an additional public method for every private method I want to test. I call this additional method Test-Port and denote them with the prefix t_. This Test-Port method then simply accesses the according private method.</p>&#xA;&#xA;<p>Additionally I add a boolian flag to the Test-Port method to decide whether I grant access to the private method through the Test-Port method from outside. This flag is then set globally in a static class where I place e.g. other global settings for the application. So I can switch the access to the private methods on and off in one place e.g. in the corresponding unit test.</p>&#xA;"
8704898,2,34571,"2012-01-02 20:12:55",-1,NULL,"<p>Groovy has a <a href=&quot;http://jira.codehaus.org/browse/GROOVY-1875&quot; rel=&quot;nofollow&quot;>bug/feature</a>, through which you can invoke private methods as if they were public.  So if you're able to use Groovy in your project, it's an option you can use in lieu of reflection.  Check out <a href=&quot;http://marciogarcia.com/?p=80&quot; rel=&quot;nofollow&quot;>this page</a> for an example.</p>&#xA;"
15192546,2,34571,"2013-03-04 00:07:44",0,NULL,"<p>JML has a spec_public comment annotation syntax that allows you to specify a method as public during tests:</p>&#xA;&#xA;<pre><code>private /*@ spec_public @*/ int methodName(){&#xA;...&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>This syntax is discussed at <a href=&quot;http://www.eecs.ucf.edu/~leavens/JML/jmlrefman/jmlrefman_2.html#SEC12&quot; rel=&quot;nofollow&quot;>http://www.eecs.ucf.edu/~leavens/JML/jmlrefman/jmlrefman_2.html#SEC12</a>. There also exists a program that translates JML specifications into JUnit tests. I'm not sure how well that works or what its capabilities are, but it doesn't appear to be necessary since JML is a viable testing framework on its own.</p>&#xA;"
18859235,2,34571,"2013-09-17 20:23:50",3,NULL,"<p>Wooww, takes some guts to add an answer here :) </p>&#xA;&#xA;<p>Today, I pushed a library to help testing private methods and fields.It has been designed with Android in mind but can really be used for any Java project.</p>&#xA;&#xA;<p>If you got some code with private methods or fields or constructors, you can use <a href=&quot;https://github.com/stephanenicolas/boundbox&quot; rel=&quot;nofollow&quot;><strong>BoundBox</strong></a>. It does exactly what you are looking for.&#xA;Here below is an example of a test that accesses 2 private fields of an Android activity to test it : </p>&#xA;&#xA;<pre><code>@UiThreadTest&#xA;public void testCompute() {&#xA;    // given&#xA;    boundBoxOfMainActivity = new BoundBoxOfMainActivity(getActivity());&#xA;&#xA;    // when&#xA;    boundBoxOfMainActivity.boundBox_getButtonMain().performClick();&#xA;&#xA;    // then&#xA;    assertEquals(&quot;42&quot;, boundBoxOfMainActivity.boundBox_getTextViewMain().getText());&#xA;}&#xA;</code></pre>&#xA;&#xA;<p><strong>BoundBox</strong> makes it easy to test private/protected fields, methods and constructors. You can even access stuff that is hidden by inheritance. Indeed, BoundBox breaks encapsulation. It will give you access to all that through reflection, <strong>BUT</strong> every thing is checked at compile time.</p>&#xA;&#xA;<p>Ideal for testing some legacy code. Use it carefully. ;)</p>&#xA;&#xA;<p><a href=&quot;https://github.com/stephanenicolas/boundbox&quot; rel=&quot;nofollow&quot;>https://github.com/stephanenicolas/boundbox</a></p>&#xA;"
20337937,2,34571,"2013-12-02 21:12:54",5,NULL,"<p>Private methods are consumed by public ones, otherwise, they're dead code. That's why you test the public method, asserting the expected results of the public method and thereby, the private methods it consumes.</p>&#xA;&#xA;<p>Testing private methods should be tested by debugging before running your unit tests on public methods.</p>&#xA;&#xA;<p>They may also be debugged using test driven development, debugging your unit tests until all your assertions are met.</p>&#xA;&#xA;<p>I personally believe it is better to create classes using TDD; creating the public method stubs, then generating unit tests with <strong>all</strong> the assertions defined in advance, so the expected outcome of the method is determined before you code it. This way, you don't go down the wrong path of making the unit test assertions fit the results. Your class is then robust and meets requirements when all your unit tests pass.</p>&#xA;"
20990300,2,34571,"2014-01-08 08:22:39",2,NULL,"<p>here is my generic function to test private fields:</p>&#xA;&#xA;<pre><code>protected &lt;F&gt; F getPrivateField( String fieldName, Object obj)&#xA;    throws NoSuchFieldException, IllegalAccessException {&#xA;    Field field = &#xA;        obj.getClass().getDeclaredField( fieldName );&#xA;&#xA;    field.setAccessible( true );&#xA;    return (F)field.get( obj );&#xA;}&#xA;</code></pre>&#xA;"
23441118,2,34571,"2014-05-03 06:33:19",1,NULL,"<p>A private method only be accessed within the same class. So there is no way to test a “private” method of a target class from any test class. A way out is that you can perform unit testing manually or can change your method from “private” to “protected”.</p>&#xA;&#xA;<p>And then A protected method can only be accessed within the same package where the class is defined. So, testing a protected method of a target class means we need to define your test class in the same package as the target class.</p>&#xA;&#xA;<p>if all the above is Not suits your requirement Use the <a href=&quot;http://stackoverflow.com/questions/11483647/how-to-access-private-methods-and-private-data-members-via-reflection&quot;><strong>reflection</strong></a> to access the private method  </p>&#xA;"
26855013,2,34571,"2014-11-10 23:36:00",2,NULL,"<p>If using Spring, <a href=&quot;http://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/test/util/ReflectionTestUtils.html&quot; rel=&quot;nofollow&quot;>ReflectionTestUtils</a> provides some handy tools that help out here with minimal effort. For example, to set up a mock on a private member without being forced to add an undesirable public setter:</p>&#xA;&#xA;<pre><code>ReflectionTestUtils.setField(theClass, &quot;theUnsettableField&quot;, theMockObject);&#xA;</code></pre>&#xA;"
35711,2,35699,"2008-08-30 05:44:35",9,NULL,"<p>Your simplest answer lies in the next version of css (3), which currently no browser supports.</p>&#xA;&#xA;<p>For now you are relegated to calculating heights in javascript and setting them on the left side. </p>&#xA;&#xA;<p>If the navigation is so important to be positioned in such a way, run it along the top.</p>&#xA;&#xA;<p>you could also do a visual trick by moving the borders to the container and the bigger inner, and make it appear to be the same size.</p>&#xA;&#xA;<p>this makes it look the same, but it isn't.</p>&#xA;&#xA;<pre><code>&lt;div style=&quot;border-left:solid 1px black;border-bottom:solid 1px black;&quot;&gt;&#xA;  &lt;div style=&quot;float:left; width: 150px; border-top: 1px solid;&quot;&gt;&#xA;    &lt;ul&gt;&#xA;     &lt;li&gt;nav1&lt;/li&gt;&#xA;     &lt;li&gt;nav2&lt;/li&gt;&#xA;     &lt;li&gt;nav3&lt;/li&gt;&#xA;     &lt;li&gt;nav4&lt;/li&gt;&#xA;    &lt;/ul&gt;&#xA; &lt;/div&gt;&#xA; &lt;div style=&quot;float:left; width: 250px; border:solid 1px black;border-bottom:0;&quot;&gt;&#xA;  Lorem ipsum dolor sit amet, consectetur adipisicing elit,&#xA;  sed do eiusmod tempor incididunt ut labore et dolore magna&#xA;  Lorem ipsum dolor sit amet, consectetur adipisicing elit,&#xA;  ...&#xA; &lt;/div&gt;&#xA; &lt;div style=&quot;clear:both;&quot; &gt;&lt;/div&gt;&#xA;&lt;/div&gt;&#xA;</code></pre>&#xA;"
35718,2,35699,"2008-08-30 05:52:04",0,NULL,"<p>@hoyhoy</p>&#xA;&#xA;<p>If a designer can make this work in html, then he can have this design. If he is a true master of web design, he will realize that this is a limitation of the media, as video is not possible in magazine ads.</p>&#xA;&#xA;<p>If he would like to simulate weight by giving the 2 columns equal importance, than change the borders, so that they appear to be of the same weight, and make the colors of the borders contrast to the font color of the columns.  </p>&#xA;&#xA;<p>But as for making the physical elements the same height, you can only do that with a table construct, or setting the heights, at this point in time. To simulate them appearing the same size, they don't have to be the same size.</p>&#xA;"
35880,2,35699,"2008-08-30 11:04:11",4,NULL,"<p>You can do it in jQuery really simple, but I am not sure JS should be used for such things. The best way is to do it with pure css.</p>&#xA;&#xA;<ol>&#xA;<li><p>Take a look at <a href=&quot;http://www.alistapart.com/articles/fauxcolumns/&quot; rel=&quot;nofollow&quot;>faux columns</a> or even <a href=&quot;http://www.communitymx.com/content/article.cfm?cid=AFC58&quot; rel=&quot;nofollow&quot;>Fluid Faux Columns</a></p></li>&#xA;<li><p>Also another technique(doesn't work on the beautiful IE6) is to position:relative the parent container. The child container(the nav list in your case) should be positioned absolute and forced to occupy the whole space with 'top:0; bottom:0;'</p></li>&#xA;</ol>&#xA;"
47403,2,35699,"2008-09-06 12:12:16",2,NULL,"<p>This is one of those perfectly reasonable, simple things that CSS can't do. Faux Columns, as suggested by Silviu, is a hacky but functional workaround.&#xA;It would be lovely if someday there was a way to say</p>&#xA;&#xA;<pre>&#xA;div.foo {&#xA;height: $(div.blah.height);&#xA;}&#xA;</pre>&#xA;"
53010,2,35699,"2008-09-09 22:02:23",8,NULL,"<p>It can be done in CSS! Don't let people tell you otherwise.</p>&#xA;&#xA;<p>The easiest, most pain-free way to do it is to use the <a href=&quot;http://www.alistapart.com/articles/fauxcolumns/&quot;>Faux Columns</a> method.</p>&#xA;&#xA;<p>However, if that solution doesn't work for you, you'll want to read up on <a href=&quot;http://www.positioniseverything.net/articles/onetruelayout/equalheight&quot;>this technique</a>. But be warned, this is the kind of CSS hackery that will make you wake up in a cold sweat in the middle of the night.</p>&#xA;&#xA;<p>The gist of it is that you assign a large amount of padding to the bottom of the column, and a negative margin of the same size. Then you place your columns in a container that has <code>overflow: hidden</code> set. More or less the padding/margin values allow the box to keep expanding until it reaches the end of the wrapper (which is determined by the column with the most content), and any extra space generated by the padding is cut off as overflow. It doesn't make much sense, I know...</p>&#xA;&#xA;<pre><code>&lt;div id=&quot;wrapper&quot;&gt;&#xA;  &lt;div id=&quot;col1&quot;&gt;Content&lt;/div&gt;&#xA;  &lt;div id=&quot;col2&quot;&gt;Longer Content&lt;/div&gt;&#xA;&lt;/div&gt;&#xA;&#xA;#wrapper {&#xA;  overflow: hidden;&#xA;}&#xA;&#xA;#col1, #col2 {&#xA;  padding-bottom: 9999px;&#xA;  margin-bottom: -9999px;&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>Be sure to read the entire article I linked to, there are a number of caveats and other implementation issues. It's not a pretty technique, but it works fairly well.</p>&#xA;"
54779,2,35699,"2008-09-10 17:27:44",0,NULL,"<p>Come to think of it, I've never done it with a bottom border on the column. It's probably just overflowing, and getting cut off. You might want to have the bottom border come from a separate element that's part of the column content.</p>&#xA;&#xA;<p>Anyway, I know it's not a perfect magic bullet solution. You might just have to play with it, or hack around its shortcomings.</p>&#xA;"
396350,2,35699,"2008-12-28 16:17:20",0,NULL,"<p>There is also a Javascript based solution. If you have jQuery, you can use the below plugin.</p>&#xA;&#xA;<pre><code>&lt;script type=&quot;text/javascript&quot;&gt;&#xA;// plugin&#xA;jQuery.fn.equalHeights=function() {&#xA;	var maxHeight=0;&#xA;&#xA;	this.each(function(){&#xA;		if (this.offsetHeight&gt;maxHeight) {maxHeight=this.offsetHeight;}&#xA;	});&#xA;&#xA;	this.each(function(){&#xA;		$(this).height(maxHeight + &quot;px&quot;);&#xA;		if (this.offsetHeight&gt;maxHeight) {&#xA;			$(this).height((maxHeight-(this.offsetHeight-maxHeight))+&quot;px&quot;);&#xA;		}&#xA;	});&#xA;};&#xA;&#xA;// usage&#xA;$(function() {&#xA;    $('.column1, .column2, .column3').equalHeights();&#xA;});&#xA;&lt;/script&gt;&#xA;</code></pre>&#xA;"
594021,2,35699,"2009-02-27 08:54:22",0,NULL,"<p>I use this to align 2 columns with ID &quot;center&quot; and &quot;right&quot;:</p>&#xA;&#xA;<pre><code>var c = $(&quot;#center&quot;);&#xA;var cp = parseInt(c.css(&quot;padding-top&quot;), 10) + parseInt(c.css(&quot;padding-bottom&quot;), 10) + parseInt(c.css(&quot;borderTopWidth&quot;), 10) + parseInt(c.css(&quot;borderBottomWidth&quot;), 10);&#xA;var r = $(&quot;#right&quot;);&#xA;var rp = parseInt(r.css(&quot;padding-top&quot;), 10) + parseInt(r.css(&quot;padding-bottom&quot;), 10) + parseInt(r.css(&quot;borderTopWidth&quot;), 10) + parseInt(r.css(&quot;borderBottomWidth&quot;), 10);&#xA;&#xA;if (c.outerHeight() &lt; r.outerHeight()) {&#xA;    c.height(r.height () + rp - cp);&#xA;} else {&#xA;    r.height(c.height () + cp - rp);&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>Hope it helps.</p>&#xA;"
1842279,2,35699,"2009-12-03 19:24:25",3,NULL,"<p>Use jQuery for this problem; just call this function in your ready function:</p>&#xA;&#xA;<pre><code>function setHeight(){&#xA;  var height = $(document).height(); //optionally, subtract some from the height&#xA;  $(&quot;#leftDiv&quot;).css(&quot;height&quot;, height + &quot;px&quot;);&#xA;}&#xA;</code></pre>&#xA;"
22628960,2,35699,"2014-03-25 08:27:08",0,NULL,"<p>To grow the <strong><em>left menu div</em></strong> with same height as the right content div.</p>&#xA;&#xA;<pre><code>&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot; &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;&#xA;&#xA;&#xA;&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot;&gt;&#xA;&lt;head&gt;&#xA;&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=UTF-8&quot; /&gt;&#xA;&lt;title&gt;Untitled Document&lt;/title&gt;&#xA;&lt;script src=&quot;http://ajax.googleapis.com/ajax/libs/jquery/1.10.2/jquery.min.js&quot;&gt;&#xA;&lt;/script&gt;&#xA;&lt;script&gt;&#xA;    $(document).ready(function () {&#xA;        var height = $(document).height(); //optionally, subtract some from the height&#xA;        $(&quot;#menu&quot;).css(&quot;height&quot;, (height) + &quot;px&quot;);&#xA;        $(&quot;#content&quot;).css(&quot;height&quot;, (height) + &quot;px&quot;);&#xA;    });&#xA;&lt;/script&gt;&#xA;&lt;style type=&quot;text/css&quot;&gt;&#xA;    &lt;!--&#xA;&#xA;    html, body {&#xA;        font-family: Arial;&#xA;        font-size: 12px;&#xA;    }&#xA;&#xA;&#xA;    #header {&#xA;        background-color: #F9C;&#xA;        height: 200px;&#xA;        width: 100%;&#xA;        float: left;&#xA;        position: relative;&#xA;    }&#xA;&#xA;    #menu {&#xA;        background-color: #6CF;&#xA;        float: left;&#xA;        min-height: 100%;&#xA;        height: auto;&#xA;        width: 10%;&#xA;        position: relative;&#xA;    }&#xA;&#xA;    #content {&#xA;        background-color: #6f6;&#xA;        float: right;&#xA;        height: auto;&#xA;        width: 90%;&#xA;        position: relative;&#xA;    }&#xA;&#xA;    #footer {&#xA;        background-color: #996;&#xA;        float: left;&#xA;        height: 100px;&#xA;        width: 100%;&#xA;        position: relative;&#xA;    }&#xA;    --&gt;&#xA;&lt;/style&gt;&#xA;&lt;/head&gt;&#xA;&#xA;&#xA;&lt;body&gt;&#xA;&lt;div id=&quot;header&quot;&gt;&#xA;    i am a header&#xA;&lt;/div&gt;&#xA;&lt;div id=&quot;menu&quot;&gt;&#xA;    i am a menu&#xA;&lt;/div&gt;&#xA;&lt;div id=&quot;content&quot;&gt;&#xA;    I am an example of how to do layout with css rules and divs.&#xA;    &lt;p&gt; I am an example of how to do layout with css rules and divs. &lt;/p&gt;&#xA;    &lt;p&gt; I am an example of how to do layout with css rules and divs. &lt;/p&gt;&#xA;    &lt;p&gt; I am an example of how to do layout with css rules and divs. &lt;/p&gt;&#xA;    &lt;p&gt; I am an example of how to do layout with css rules and divs. &lt;/p&gt;&#xA;    &lt;p&gt; I am an example of how to do layout with css rules and divs. &lt;/p&gt;&#xA;    &lt;p&gt; I am an example of how to do layout with css rules and divs. &lt;/p&gt;&#xA;    &lt;p&gt; I am an example of how to do layout with css rules and divs. &lt;/p&gt;&#xA;&#xA;&lt;/div&gt;&#xA;&lt;div id=&quot;footer&quot;&gt;&#xA;    footer&#xA;&lt;/div&gt;&#xA;&#xA;&#xA;&lt;/body&gt;&#xA;&lt;/html&gt;&#xA;</code></pre>&#xA;"
36837,2,36832,"2008-08-31 12:47:35",7,NULL,"<p>Both ways can lead to unexpected results.  Your best bet is to not call a virtual function in your constructor at all. </p>&#xA;&#xA;<p>The C++ way I think makes more sense, but leads to expectation problems when someone reviews your code.  If you are aware of this situation, you should purposely not put your code in this situation for later debugging's sake.</p>&#xA;"
36844,2,36832,"2008-08-31 12:56:28",1,NULL,"<p>I think C++ offers the best semantics in terms of having the 'most correct' behavior ... however it is more work for the compiler and the code is definitiely non-intuitive to someone reading it later.</p>&#xA;&#xA;<p>With the .NET approach the function must be very limited not to rely on any derived object state.</p>&#xA;"
37322,2,36832,"2008-09-01 00:57:42",2,NULL,"<blockquote>&#xA;  <p>Virtual functions in constructors, why do languages differ?</p>&#xA;</blockquote>&#xA;&#xA;<p>Because there's no one good behaviour.  I find the C++ behaviour makes more sense (since base class c-tors are called first, it stands to reason that they should call base class virtual functions--after all, the derived class c-tor hasn't run yet, so it may not have set up the right preconditions for the derived class virtual function).</p>&#xA;&#xA;<p>But sometimes, where I want to use the virtual functions to initialize state (so it doesn't matter that they're being called with the state uninitialized) the C#/Java behaviour is nicer.</p>&#xA;"
75026,2,36832,"2008-09-16 17:50:12",0,NULL,"<p>Delphi makes good use of virtual constructors in the VCL GUI framework: </p>&#xA;&#xA;<pre><code>type&#xA;  TComponent = class&#xA;  public&#xA;    constructor Create(AOwner: TComponent); virtual; // virtual constructor&#xA;  end;&#xA;&#xA;  TMyEdit = class(TComponent)&#xA;  public&#xA;    constructor Create(AOwner: TComponent); override; // override virtual constructor&#xA;  end;&#xA;&#xA;  TMyButton = class(TComponent)&#xA;  public&#xA;    constructor Create(AOwner: TComponent); override; // override virtual constructor&#xA;  end;&#xA;&#xA;  TComponentClass = class of TComponent;&#xA;&#xA;function CreateAComponent(ComponentClass: TComponentClass; AOwner: TComponent): TComponent;&#xA;begin&#xA;  Result := ComponentClass.Create(AOwner);&#xA;end;&#xA;&#xA;var&#xA;  MyEdit: TMyEdit;&#xA;  MyButton: TMyButton;&#xA;begin&#xA;  MyEdit := CreateAComponent(TMyEdit, Form) as TMyEdit;&#xA;  MyButton := CreateAComponent(TMyButton, Form) as TMyButton;&#xA;end;&#xA;</code></pre>&#xA;"
75654,2,36832,"2008-09-16 18:49:55",9,NULL,"<p>There's a fundamental difference in how the languages define an object's life time. In Java and .Net the object members are zero/null initialized before any constructor is run and is at this point that the object life time begins. So when you enter the constructor you've already got an initialized object.</p>&#xA;&#xA;<p>In C++ the object life time only begins when the constructor finishes (although member variables and base classes are fully constructed before it starts). This explains the behaviour when virtual functions are called and also why the destructor isn't run if there's an exception in the constructor's body.</p>&#xA;&#xA;<p>The problem with the Java/.Net definition of object lifetime is that it's harder to make sure the object always meets its invariant without having to put in special cases for when the object is initialized but the constructor hasn't run. The problem with the C++ definition is that you have this odd period where the object is in limbo and not fully constructed.</p>&#xA;"
38552,2,38549,"2008-09-01 22:38:44",40,NULL,"<p>A inner join only shows rows if there is a matching record on the other (right) side of the join.</p>&#xA;&#xA;<p>A (left) outer join shows rows for each record on the left hand side, even if there are no matching rows on the other (right) side of the join. If there is no matching row, the columns for the other (right) side would show NULLs.</p>&#xA;"
38565,2,38549,"2008-09-01 22:47:39",23,NULL,"<p>Inner joins require that a record with a related ID exist in the joined table.</p>&#xA;&#xA;<p>Outer joins will return records for the left side even if nothing exists for the right side.</p>&#xA;&#xA;<p>For instance, you have an Orders and an OrderDetails table. They are related by an &quot;OrderID&quot;.</p>&#xA;&#xA;<p><strong>Orders</strong></p>&#xA;&#xA;<ul>&#xA;<li>OrderID</li>&#xA;<li>CustomerName</li>&#xA;</ul>&#xA;&#xA;<p><strong>OrderDetails</strong></p>&#xA;&#xA;<ul>&#xA;<li>OrderDetailID</li>&#xA;<li>OrderID</li>&#xA;<li>ProductName</li>&#xA;<li>Qty</li>&#xA;<li>Price</li>&#xA;</ul>&#xA;&#xA;<p>The request</p>&#xA;&#xA;<pre><code>SELECT Orders.OrderID, Orders.CustomerName FROM Orders &#xA;INNER JOIN OrderDetails ON Orders.OrderID = OrderDetails.OrderID&#xA;</code></pre>&#xA;&#xA;<p>will only return Orders that also have something in the OrderDetails table.</p>&#xA;&#xA;<p>If you change it to OUTER LEFT JOIN</p>&#xA;&#xA;<pre><code>SELECT Orders.OrderID, Orders.CustomerName FROM Orders &#xA;LEFT JOIN OrderDetails ON Orders.OrderID = OrderDetails.OrderID&#xA;</code></pre>&#xA;&#xA;<p>then it will return records from the Orders table even if they have no OrderDetails records.</p>&#xA;&#xA;<p>You can use this to find Orders that do not have any OrderDetails indicating a possible orphaned order by adding a where clause like <code>WHERE OrderDetails.OrderID IS NULL</code>.</p>&#xA;"
38578,2,38549,"2008-09-01 22:59:35",2914,NULL,"<p>Assuming you're joining on columns with no duplicates, which is a very common case:</p>&#xA;&#xA;<ul>&#xA;<li><p>An inner join of A and B gives the result of A intersect B, i.e. the inner part of a venn diagram intersection.</p></li>&#xA;<li><p>An outer join of A and B gives the results of A union B, i.e. the outer parts of a <a href=&quot;http://en.wikipedia.org/wiki/Venn_diagram&quot;>Venn diagram</a> union.</p></li>&#xA;</ul>&#xA;&#xA;<p><strong>Examples</strong></p>&#xA;&#xA;<p>Suppose you have two tables, with a single column each, and data as follows:</p>&#xA;&#xA;<pre><code>A    B&#xA;-    -&#xA;1    3&#xA;2    4&#xA;3    5&#xA;4    6&#xA;</code></pre>&#xA;&#xA;<p>Note that (1,2) are unique to A, (3,4) are common, and (5,6) are unique to B.</p>&#xA;&#xA;<p><strong>Inner join</strong></p>&#xA;&#xA;<p>An inner join using either of the equivalent queries gives the intersection of the two tables, i.e. the two rows they have in common.</p>&#xA;&#xA;<pre><code>select * from a INNER JOIN b on a.a = b.b;&#xA;select a.*,b.*  from a,b where a.a = b.b;&#xA;&#xA;a | b&#xA;--+--&#xA;3 | 3&#xA;4 | 4&#xA;</code></pre>&#xA;&#xA;<p><strong>Left outer join</strong></p>&#xA;&#xA;<p>A left outer join will give all rows in A, plus any common rows in B.</p>&#xA;&#xA;<pre><code>select * from a LEFT OUTER JOIN b on a.a = b.b;&#xA;select a.*,b.*  from a,b where a.a = b.b(+);&#xA;&#xA;a |  b&#xA;--+-----&#xA;1 | null&#xA;2 | null&#xA;3 |    3&#xA;4 |    4&#xA;</code></pre>&#xA;&#xA;<p><strong>Full outer join</strong></p>&#xA;&#xA;<p>A full outer join will give you the union of A and B, i.e. all the rows in A and all the rows in B. If something in A doesn't have a corresponding datum in B, then the B portion is null, and vice versa.</p>&#xA;&#xA;<pre><code>select * from a FULL OUTER JOIN b on a.a = b.b;&#xA;&#xA; a   |  b&#xA;-----+-----&#xA;   1 | null&#xA;   2 | null&#xA;   3 |    3&#xA;   4 |    4&#xA;null |    6&#xA;null |    5&#xA;</code></pre>&#xA;"
1353724,2,38549,"2009-08-30 11:52:37",386,NULL,"<p>I recommend <a href=&quot;http://blog.codinghorror.com/a-visual-explanation-of-sql-joins/&quot;>Jeff's blog article</a>. The best description I've ever seen, plus there is a visualization, e.g.:</p>&#xA;&#xA;<p><strong>Inner Join:</strong></p>&#xA;&#xA;<p><img src=&quot;http://i.stack.imgur.com/e3Q9q.png&quot; alt=&quot;enter image description here&quot;></p>&#xA;&#xA;<p><strong>Full Outer Join:</strong></p>&#xA;&#xA;<p><img src=&quot;http://i.stack.imgur.com/3Ll1h.png&quot; alt=&quot;enter image description here&quot;></p>&#xA;"
3625912,2,38549,"2010-09-02 09:49:29",16,NULL,"<p><code>INNER JOIN</code> requires there is at least a match in comparing the two tables. For example, table A and table B which implies A ٨ B (A intersection B).</p>&#xA;&#xA;<p><code>LEFT OUTER JOIN</code> and <code>LEFT JOIN</code> are the same. It gives all the records matching in both tables and all possibilities of the left table.</p>&#xA;&#xA;<p>Similarly, <code>RIGHT OUTER JOIN</code> and <code>RIGHT JOIN</code> are the same. It gives all the records matching in both tables and all possibilities of the right table.</p>&#xA;&#xA;<p><code>FULL JOIN</code> is the combination of <code>LEFT OUTER JOIN</code> and <code>RIGHT OUTER JOIN</code> without duplication.</p>&#xA;"
4989246,2,38549,"2011-02-14 05:53:53",169,NULL,"<p>The following was taken from the article &quot;<a href=&quot;http://www.wellho.net/mouth/158_MySQL-LEFT-JOIN-and-RIGHT-JOIN-INNER-JOIN-and-OUTER-JOIN.html&quot;>MySQL - LEFT JOIN and RIGHT JOIN, INNER JOIN and OUTER JOIN</a>&quot; by Graham Ellis on his blog Horse's Mouth.</p>&#xA;&#xA;<p>In a database such as MySQL, data is divided into a number of tables which are then connected (<code>Joined</code>) together by <code>JOIN</code> in <code>SELECT</code> commands to read records from multiple tables. Read this example to see how it works.</p>&#xA;&#xA;<p>First, some sample data:</p>&#xA;&#xA;<pre><code>people&#xA;    mysql&gt; select * from people;&#xA;    +------------+--------------+------+&#xA;    | name       | phone        | pid  |&#xA;    +------------+--------------+------+&#xA;    | Mr Brown   | 01225 708225 |    1 |&#xA;    | Miss Smith | 01225 899360 |    2 |&#xA;    | Mr Pullen  | 01380 724040 |    3 |&#xA;    +------------+--------------+------+&#xA;    3 rows in set (0.00 sec)&#xA;&#xA;property&#xA;    mysql&gt; select * from property;&#xA;    +------+------+----------------------+&#xA;    | pid  | spid | selling              |&#xA;    +------+------+----------------------+&#xA;    |    1 |    1 | Old House Farm       |&#xA;    |    3 |    2 | The Willows          |&#xA;    |    3 |    3 | Tall Trees           |&#xA;    |    3 |    4 | The Melksham Florist |&#xA;    |    4 |    5 | Dun Roamin           |&#xA;    +------+------+----------------------+&#xA;    5 rows in set (0.00 sec)&#xA;</code></pre>&#xA;&#xA;<p><strong>REGULAR JOIN</strong></p>&#xA;&#xA;<p>If we do a regular JOIN (with none of the keywords INNER, OUTER, LEFT or RIGHT), then we get all records that match in the appropriate way in the two tables, and records in both incoming tables that do not match are not reported:</p>&#xA;&#xA;<pre><code>mysql&gt; select name, phone, selling &#xA;from people join property &#xA;on people.pid = property.pid;&#xA;+-----------+--------------+----------------------+&#xA;| name      | phone        | selling              |&#xA;+-----------+--------------+----------------------+&#xA;| Mr Brown  | 01225 708225 | Old House Farm       |&#xA;| Mr Pullen | 01380 724040 | The Willows          |&#xA;| Mr Pullen | 01380 724040 | Tall Trees           |&#xA;| Mr Pullen | 01380 724040 | The Melksham Florist |&#xA;+-----------+--------------+----------------------+&#xA;4 rows in set (0.01 sec)&#xA;</code></pre>&#xA;&#xA;<p><strong>LEFT JOIN</strong></p>&#xA;&#xA;<p>If we do a LEFT JOIN, we get all records that match in the same way and IN ADDITION we get an extra record for each unmatched record in the left table of the join - thus ensuring (in this example) that every PERSON gets a mention:</p>&#xA;&#xA;<pre><code>   mysql&gt; select name, phone, selling &#xA;    from people left join property &#xA;    on people.pid = property.pid; &#xA;    +------------+--------------+----------------------+&#xA;    | name       | phone        | selling              |&#xA;    +------------+--------------+----------------------+&#xA;    | Mr Brown   | 01225 708225 | Old House Farm       |&#xA;    | Miss Smith | 01225 899360 | NULL &lt;&lt;-- unmatch    |&#xA;    | Mr Pullen  | 01380 724040 | The Willows          |&#xA;    | Mr Pullen  | 01380 724040 | Tall Trees           |&#xA;    | Mr Pullen  | 01380 724040 | The Melksham Florist |&#xA;    +------------+--------------+----------------------+&#xA;    5 rows in set (0.00 sec)&#xA;</code></pre>&#xA;&#xA;<p><strong>RIGHT JOIN</strong></p>&#xA;&#xA;<p>If we do a RIGHT JOIN, we get all the records that match and IN ADDITION  an extra record for each unmatched record in the right table of the join - in my example, that means that each property gets a mention even if we don't have seller details:</p>&#xA;&#xA;<pre><code>mysql&gt; select name, phone, selling &#xA;from people right join property &#xA;on people.pid = property.pid;&#xA;+-----------+--------------+----------------------+&#xA;| name      | phone        | selling              |&#xA;+-----------+--------------+----------------------+&#xA;| Mr Brown  | 01225 708225 | Old House Farm       |&#xA;| Mr Pullen | 01380 724040 | The Willows          |&#xA;| Mr Pullen | 01380 724040 | Tall Trees           |&#xA;| Mr Pullen | 01380 724040 | The Melksham Florist |&#xA;| NULL      | NULL         | Dun Roamin           |&#xA;+-----------+--------------+----------------------+&#xA;5 rows in set (0.00 sec)&#xA;</code></pre>&#xA;&#xA;<p>An INNER JOIN does a full join, just like the first example, and the word OUTER may be added after the word LEFT or RIGHT in the last two examples - it's provided for ODBC compatibility and doesn't add an extra capabilities.</p>&#xA;"
12616294,2,38549,"2012-09-27 07:33:12",16,NULL,"<p>You use INNER JOIN to return all rows from both tables where there is a match. ie. in the resulting table all the rows and colums will have values.</p>&#xA;&#xA;<p>In OUTER JOIN the relulting table may have empty colums. Outer join may be either LEFT or RIGHT</p>&#xA;&#xA;<p>LEFT OUTER JOIN returns all the rows from the first table, even if there are no matches in the second table.</p>&#xA;&#xA;<p>RIGHT OUTER JOIN returns all the rows from the second table, even if there are no matches in the first table..</p>&#xA;"
14292739,2,38549,"2013-01-12 11:07:41",35,NULL,"<p>In simple words:</p>&#xA;&#xA;<p>An <strong>inner join</strong> retrieve the matched rows only.</p>&#xA;&#xA;<p>Whereas an <strong>outer join</strong> retrieve the matched rows from one table and all rows in other table ....the result depends on which one you are using:</p>&#xA;&#xA;<ul>&#xA;<li><p><strong>Left</strong>: Matched rows in the right table and all rows in the left table</p></li>&#xA;<li><p><strong>Right</strong>: Matched rows in the left table and all rows in the right table or </p></li>&#xA;<li><p><strong>Full</strong>: All rows in all tables. It doesn't matter if there is a match or not</p></li>&#xA;</ul>&#xA;"
16598900,2,38549,"2013-05-16 23:03:35",1152,NULL,"<p>Also you can consider the following schema for different join types;</p>&#xA;&#xA;<p><img src=&quot;http://i.stack.imgur.com/1UKp7.png&quot; alt=&quot;visual explanation of joins&quot;></p>&#xA;&#xA;<p>Source: <strong><a href=&quot;http://www.codeproject.com/Articles/33052/Visual-Representation-of-SQL-Joins&quot;>Visual-Representation-of-SQL-Joins</a></strong> explained in detail by <strong><a href=&quot;http://www.codeproject.com/script/Membership/View.aspx?mid=5909363&quot;>C.L. Moffatt</a></strong></p>&#xA;"
18862977,2,38549,"2013-09-18 02:36:42",7,NULL,"<p>The difference is in the way tables are joined if there are no common records.</p>&#xA;&#xA;<ul>&#xA;<li><p><code>JOIN</code> is same as <code>INNER JOIN</code> and means to only show records common to both tables. Whether the records are common is determined by the fields in join clause. For example:</p>&#xA;&#xA;<pre><code>FROM t1&#xA;JOIN t2 on t1.ID = t2.ID&#xA;</code></pre>&#xA;&#xA;<p>means show only records where the same <code>ID</code> value exists in both tables.</p></li>&#xA;<li><p><code>LEFT JOIN</code> is same as <code>LEFT OUTER JOIN</code> and means to show all records from left table (i.e. the one that precedes in SQL statement) regardless of the existance of matching records in the right table.</p></li>&#xA;<li><code>RIGHT JOIN</code> is same as <code>RIGHT OUTER JOIN</code> and means opposite of <code>LEFT JOIN</code>, i.e. shows all records from the second (right) table and only matching records from first (left) table. </li>&#xA;</ul>&#xA;&#xA;<p>Source: <a href=&quot;http://www.firebirdfaq.org/faq93/&quot;>What's the difference between LEFT, RIGHT, INNER, OUTER, JOIN?</a></p>&#xA;"
20030933,2,38549,"2013-11-17 12:59:47",3,NULL,"<p>I don't see much details about performance and optimizer in the other answers.</p>&#xA;&#xA;<p>Sometimes it is good to know that only inner join is associative which means the optimizer has the most option to play with it. It can reorder the join order to make it faster keeping the same result. The optimizer can use the most join modes.</p>&#xA;&#xA;<p>Generally it is a good practice to try to use inner joins instead of the different kind of outers. (Of course if it is possible considering the expected result set.)</p>&#xA;&#xA;<p>There are a couple of good examples and explanation here about this strange associative behaviour:</p>&#xA;&#xA;<ul>&#xA;<li><a href=&quot;http://stackoverflow.com/questions/20022196/are-left-outer-joins-associative&quot;>Are left outer joins associative?</a></li>&#xA;<li><a href=&quot;http://stackoverflow.com/questions/9614922/does-the-join-order-matter-in-sql&quot;>Does the join order matter in SQL?</a></li>&#xA;</ul>&#xA;"
21380648,2,38549,"2014-01-27 12:16:05",38,NULL,"<h3>Inner Join</h3>&#xA;&#xA;<p>Retrieve the matched rows only, that is, <code>A intersect B</code>.</p>&#xA;&#xA;<p><img src=&quot;http://i.stack.imgur.com/Zkk3I.jpg&quot; alt=&quot;Enter image description here&quot;></p>&#xA;&#xA;<pre><code>SELECT *&#xA;FROM dbo.Students S&#xA;INNER JOIN dbo.Advisors A&#xA;    ON S.Advisor_ID = A.Advisor_ID&#xA;</code></pre>&#xA;&#xA;<hr>&#xA;&#xA;<h3>Left Outer Join</h3>&#xA;&#xA;<p>Select all records from the first table, and any records in the second&#xA;table that match the joined keys.</p>&#xA;&#xA;<p><img src=&quot;http://i.stack.imgur.com/Z584b.jpg&quot; alt=&quot;Enter image description here&quot;></p>&#xA;&#xA;<pre><code>SELECT *&#xA;FROM dbo.Students S&#xA;LEFT JOIN dbo.Advisors A&#xA;    ON S.Advisor_ID = A.Advisor_ID&#xA;</code></pre>&#xA;&#xA;<hr>&#xA;&#xA;<h3>Full Outer Join</h3>&#xA;&#xA;<p>Select all records from the second table, and any records in the first&#xA;table that match the joined keys.</p>&#xA;&#xA;<p><img src=&quot;http://i.stack.imgur.com/c1QF3.jpg&quot; alt=&quot;Enter image description here&quot;></p>&#xA;&#xA;<pre><code>SELECT *&#xA;FROM dbo.Students S&#xA;FULL JOIN dbo.Advisors A&#xA;    ON S.Advisor_ID = A.Advisor_ID&#xA;</code></pre>&#xA;&#xA;<hr>&#xA;&#xA;<h3>References</h3>&#xA;&#xA;<ul>&#xA;<li><p><em><a href=&quot;http://www.datamartist.com/sql-inner-join-left-outer-join-full-outer-join-examples-with-syntax-for-sql-server&quot;>Inner and outer joins SQL examples and the Join block</a></em></p></li>&#xA;<li><p><em><a href=&quot;http://www.techonthenet.com/sql/joins.php&quot;>SQL: JOINS</a></em></p></li>&#xA;</ul>&#xA;"
23008416,2,38549,"2014-04-11 09:18:07",6,NULL,"<p>Inner join. &#xA;A join is combining the rows from two tables. An inner join attempts to match up the two tables based on the criteria you specify in the query, and only returns the rows that match. If a row from the first table in the join matches two rows in the second table, then two rows will be returned in the results. If there’s a row in the first table that doesn’t match a row in the second, it’s not returned; likewise, if there’s a row in the second table that doesn’t match a row in the first, it’s not returned.</p>&#xA;&#xA;<p>Outer Join. &#xA;A left join attempts to find match up the rows from the first table to rows in the second table. If it can’t find a match, it will return the columns from the first table and leave the columns from the second table blank (null).</p>&#xA;"
27458534,2,38549,"2014-12-13 11:58:59",45,NULL,"<p>The Venn diagrams don't really do it for me. </p>&#xA;&#xA;<p>They don't show any distinction between a cross join and an inner join, for example, or more generally show any distinction between different types of join predicate or provide a framework for reasoning about how they will operate.</p>&#xA;&#xA;<p>There is no substitute for understanding the logical processing and it is relatively simple to grasp anyway.</p>&#xA;&#xA;<p><strong>Source Tables</strong></p>&#xA;&#xA;<p><img src=&quot;http://i.stack.imgur.com/LVYKx.png&quot; alt=&quot;enter link description here&quot;></p>&#xA;&#xA;<p>First start with a <code>CROSS JOIN</code> (AKA Cartesian Product). This does not have an <code>ON</code> clause and simply returns every permutation of rows from the two tables.</p>&#xA;&#xA;<p><strong>SELECT A.Colour, B.Colour FROM A CROSS JOIN B</strong></p>&#xA;&#xA;<p><img src=&quot;http://i.stack.imgur.com/cv3t6.png&quot; alt=&quot;enter link description here&quot;></p>&#xA;&#xA;<p>Inner and Outer joins have an &quot;ON&quot; clause predicate. </p>&#xA;&#xA;<ul>&#xA;<li><strong>Inner Join.</strong> Evaluate the condition in the &quot;ON&quot; clause for all rows in the cross join result. If true return the joined row. Otherwise discard it.</li>&#xA;<li><strong>Left Outer Join.</strong> Same as inner join then for any rows in the left table that did not match anything output these with NULL values for the right table columns.</li>&#xA;<li><strong>Right Outer Join.</strong> Same as inner join then for any rows in the right table that did not  match anything output these with NULL values for the left table columns.</li>&#xA;<li><strong>Full Outer Join.</strong> Same as inner join then preserve left non matched rows as in left outer join and right non matching rows as per right outer join.</li>&#xA;</ul>&#xA;&#xA;<h1>Some examples</h1>&#xA;&#xA;<p><strong>SELECT A.Colour, B.Colour FROM A INNER JOIN B ON A.Colour = B.Colour</strong></p>&#xA;&#xA;<p>The above is the classic equi join.</p>&#xA;&#xA;<p><img src=&quot;http://i.stack.imgur.com/a8IHd.png&quot; alt=&quot;Inner Join&quot;></p>&#xA;&#xA;<h3>SELECT A.Colour, B.Colour FROM A INNER JOIN B ON A.Colour NOT IN ('Green','Blue')</h3>&#xA;&#xA;<p>The inner join condition need not necessarily be an equality condition and it need not reference columns from both (or even either) of the tables. Evaluating <code>A.Colour NOT IN ('Green','Blue')</code> on each row of the cross join returns.</p>&#xA;&#xA;<p><img src=&quot;http://i.stack.imgur.com/ZwoCi.png&quot; alt=&quot;inner 2&quot;></p>&#xA;&#xA;<p><strong>SELECT A.Colour, B.Colour FROM A INNER JOIN B ON 1 =1</strong></p>&#xA;&#xA;<p>The join condition evaluates to true for all rows in the cross join result so this is just the same as a cross join. I won't repeat the picture of the 16 rows again.</p>&#xA;&#xA;<h3>SELECT A.Colour, B.Colour FROM A LEFT OUTER JOIN B ON A.Colour = B.Colour</h3>&#xA;&#xA;<p>Outer Joins are logically evaluated in the same way as inner joins except that if a row from the left table (for a left join) does not join with any rows from the right hand table at all it is preserved in the result with <code>NULL</code> values for the right hand columns.</p>&#xA;&#xA;<p><img src=&quot;http://i.stack.imgur.com/4bzv2.png&quot; alt=&quot;LOJ&quot;></p>&#xA;&#xA;<h3>SELECT A.Colour, B.Colour FROM A LEFT OUTER JOIN B ON A.Colour = B.Colour WHERE B.Colour IS NULL</h3>&#xA;&#xA;<p>This simply restricts the previous result to only return the rows where <code>B.Colour IS NULL</code>. In this particular case these will be the rows that were preserved as they had no match in the right hand table and the query returns the single red row not matched in table <code>B</code>. This is known as an anti semi join.</p>&#xA;&#xA;<p>It is important to select a column for the <code>IS NULL</code> test that is either not nullable or for which the join condition ensures that any <code>NULL</code> values will be excluded in order for this pattern to work correctly and avoid just bringing back rows which happen to have a <code>NULL</code> value for that column in addition to the un matched rows.</p>&#xA;&#xA;<p><img src=&quot;http://i.stack.imgur.com/d6CVF.png&quot; alt=&quot;loj is null&quot;></p>&#xA;&#xA;<h3>SELECT A.Colour, B.Colour FROM A RIGHT OUTER JOIN B ON A.Colour = B.Colour</h3>&#xA;&#xA;<p>Right outer joins act similarly to left outer joins except they preserve non matching rows from the right table and null extend the left hand columns.</p>&#xA;&#xA;<p><img src=&quot;http://i.stack.imgur.com/LIOW4.png&quot; alt=&quot;ROJ&quot;></p>&#xA;&#xA;<h3>SELECT A.Colour, B.Colour FROM A FULL OUTER JOIN B ON A.Colour = B.Colour</h3>&#xA;&#xA;<p>Full outer joins combine the behaviour of left and right joins and preserve the non matching rows from both the left and the right tables.</p>&#xA;&#xA;<p><img src=&quot;http://i.stack.imgur.com/iVoqu.png&quot; alt=&quot;FOJ&quot;></p>&#xA;&#xA;<h3>SELECT A.Colour, B.Colour FROM A FULL OUTER JOIN B ON 1 = 0</h3>&#xA;&#xA;<p>No rows in the cross join match the <code>1=0</code> predicate. All rows from both sides are preserved using normal outer join rules with NULL in the columns from the table on the other side.</p>&#xA;&#xA;<p><img src=&quot;http://i.stack.imgur.com/gtIhf.png&quot; alt=&quot;FOJ 2&quot;></p>&#xA;&#xA;<h3>SELECT A.Colour, B.Colour FROM A LEFT OUTER JOIN B ON A.Colour = B.Colour WHERE B.Colour = 'Green'</h3>&#xA;&#xA;<p>Note that the <code>WHERE</code> clause (if present) logically runs after the join. One common error is to perform a left outer join and then include a WHERE clause with a condition on the right table that ends up excluding the non matching rows. The above ends up performing the outer join...</p>&#xA;&#xA;<p><img src=&quot;http://i.stack.imgur.com/4bzv2.png&quot; alt=&quot;LOJ&quot;></p>&#xA;&#xA;<p>... And then the &quot;Where&quot; clause runs. <code>NULL= 'Green'</code> does not evaluate to true so the row preserved by the outer join ends up discarded (along with the blue one) effectively converting the join back to an inner one.</p>&#xA;&#xA;<p><img src=&quot;http://i.stack.imgur.com/tRHdf.png&quot; alt=&quot;LOJtoInner&quot;> </p>&#xA;&#xA;<p>If the intention was to include only rows from B where Colour is Green and all rows from A regardless the correct syntax would be</p>&#xA;&#xA;<h3>SELECT A.Colour, B.Colour FROM A LEFT OUTER JOIN B ON A.Colour = B.Colour AND B.Colour = 'Green'</h3>&#xA;&#xA;<p><img src=&quot;http://i.stack.imgur.com/cvJ1s.png&quot; alt=&quot;enter image description here&quot;></p>&#xA;"
27540786,2,38549,"2014-12-18 06:54:55",7,NULL,"<p><strong>Joins</strong> are used to combine the data from two tables, with the result being a new, temporary table. Joins are performed based on something called a predicate, which specifies the condition to use in order to perform a join.  The difference between an inner join and an outer join is that an inner join will return <strong>only</strong> the rows that actually match based on the join predicate.&#xA;Here we have 2 tables that we will use for our example:</p>&#xA;&#xA;<p><img src=&quot;http://i.stack.imgur.com/fZ2IZ.png&quot; alt=&quot;enter image description here&quot;></p>&#xA;&#xA;<p><strong><em>Inner Join:</em></strong>&#xA;Inner join creates a new result table by combining column values of two tables (<em>Employee</em> and <em>Location</em>) based upon the join-predicate. The query compares each row of <em>Employee</em> with each row of <em>Location</em> to find all pairs of rows which satisfy the join-predicate. When the join-predicate is satisfied by matching non-NULL values, column values for each matched pair of rows of <em>Employee</em> and <em>Location</em> are combined into a result row.&#xA;Here’s what the SQL for an inner join will look like:</p>&#xA;&#xA;<pre><code>select  * from employee inner join location on employee.empID = location.empID&#xA;OR&#xA;select  * from employee, location where employee.empID = location.empID&#xA;</code></pre>&#xA;&#xA;<p>Now, here is what the result of running that SQL would look like:&#xA;<img src=&quot;http://i.stack.imgur.com/RmdJE.png&quot; alt=&quot;enter image description here&quot;></p>&#xA;&#xA;<p><strong>Outer Join:</strong>&#xA;An outer join does not require each record in the two joined tables to have a matching record. The joined table retains each record—even if no other matching record exists. Outer joins subdivide further into left outer joins and right outer joins, depending on which table's rows are retained (left or right).</p>&#xA;&#xA;<p><strong><em>Left Outer Join</em></strong>&#xA;The result of a left outer join (or simply left join) for tables <em>Employee</em> and <em>Location</em> always contains all records of the &quot;left&quot; table (<em>Employee</em>), even if the join-condition does not find any matching record in the &quot;right&quot; table (<em>Location</em>).&#xA;Here is what the SQL for a left outer join would look like, using the tables above:</p>&#xA;&#xA;<pre><code>select  * from employee left outer join location on employee.empID = location.empID;&#xA;//Use of outer keyword is optional&#xA;</code></pre>&#xA;&#xA;<p>Now, here is what the result of running this SQL would look like:&#xA;<img src=&quot;http://i.stack.imgur.com/U9lNP.png&quot; alt=&quot;enter image description here&quot;></p>&#xA;&#xA;<p><strong><em>Right Outer Join</em></strong>&#xA;A right outer join (or right join) closely resembles a left outer join, except with the treatment of the tables reversed. Every row from the &quot;right&quot; table (<em>Location</em>) will appear in the joined table at least once. If no matching row from the &quot;left&quot; table (<em>Employee</em>) exists, NULL will appear in columns from <em>Employee</em> for those records that have no match in <em>Location</em>.&#xA;This is what the SQL looks like:</p>&#xA;&#xA;<pre><code>select * from employee right outer join location  on employee.empID = location.empID;&#xA;//Use of outer keyword is optional&#xA;</code></pre>&#xA;&#xA;<p>Using the tables presented above, we can show what the result set of a right outer join would look like:</p>&#xA;&#xA;<p><img src=&quot;http://i.stack.imgur.com/c8Jtn.png&quot; alt=&quot;enter image description here&quot;></p>&#xA;"
28598795,2,38549,"2015-02-19 04:50:21",0,NULL,"<p>In simple words : </p>&#xA;&#xA;<p><strong>Inner join</strong> -> Take ONLY common records from parent and child tables WHERE primary key of Parent table matches Foreign key in Child table.</p>&#xA;&#xA;<p><strong>Left join</strong> -> </p>&#xA;&#xA;<p>pseudo code</p>&#xA;&#xA;<pre><code>1.Take All records from left Table&#xA;2.for(each record in right table,) {&#xA;    if(Records from left &amp; right table matching on primary &amp; foreign key){&#xA;       use their values as it is as result of join at the right side for 2nd table.&#xA;    } else {&#xA;       put value NULL values in that particular record as result of join at the right side for 2nd table.&#xA;    }&#xA;  }&#xA;</code></pre>&#xA;&#xA;<p><strong>Right join</strong> : Exactly opposite of left join . Put name of table in LEFT JOIN at right side in Right join , you get same output as LEFT JOIN.</p>&#xA;&#xA;<p><strong>Outer join</strong> : Show all records in Both tables <code>No matter what</code>. If records in Left table are not matching to right table based on Primary , Forieign key , use NULL value as result of join . </p>&#xA;&#xA;<p><strong>Example :</strong></p>&#xA;&#xA;<p><img src=&quot;http://i.stack.imgur.com/pCErn.png&quot; alt=&quot;Example&quot;></p>&#xA;&#xA;<p>Lets assume now for 2 tables </p>&#xA;&#xA;<p><code>1.employees  , 2.phone_numbers_employees</code></p>&#xA;&#xA;<pre><code>employees : id , name &#xA;&#xA;phone_numbers_employees : id , phone_num , emp_id   &#xA;</code></pre>&#xA;&#xA;<p>Here , employees table is Master table , phone_numbers_employees is child table(it contains <code>emp_id</code> as foreign key which connects <code>employee.id</code> so its child table.)</p>&#xA;&#xA;<p><strong>Inner joins</strong> </p>&#xA;&#xA;<p>Take the records of 2 tables <strong>ONLY IF Primary key of employees table(its id) matches Foreign key of Child table phone_numbers_employees(emp_id)</strong>.</p>&#xA;&#xA;<p>So query would be :</p>&#xA;&#xA;<pre><code>SELECT e.id , e.name , p.phone_num FROM employees AS e INNER JOIN phone_numbers_employees AS p ON e.id = p.emp_id;&#xA;</code></pre>&#xA;&#xA;<p>Here take only matching rows on primary key = foreign key as explained above.Here non matching rows on primary key = foreign key are skipped as result of join.</p>&#xA;&#xA;<p><strong>Left joins</strong> :</p>&#xA;&#xA;<p>Left join retains all rows of the left table, regardless of whether there is a row that matches on the right table.</p>&#xA;&#xA;<pre><code>SELECT e.id , e.name , p.phone_num FROM employees AS e LEFT JOIN phone_numbers_employees AS p ON e.id = p.emp_id;&#xA;</code></pre>&#xA;&#xA;<p><strong>Outer joins</strong> :</p>&#xA;&#xA;<pre><code>SELECT e.id , e.name , p.phone_num FROM employees AS e OUTER JOIN phone_numbers_employees AS p ON e.id = p.emp_id;&#xA;</code></pre>&#xA;&#xA;<p><strong>Diagramatically it looks like :</strong></p>&#xA;&#xA;<p><img src=&quot;http://i.stack.imgur.com/hMKKt.jpg&quot; alt=&quot;Diagram&quot;></p>&#xA;"
38827,2,38820,"2008-09-02 04:39:29",14,NULL,"<p>I don't like either one. What happens when someone is both a member and an employee?</p>&#xA;"
38829,2,38820,"2008-09-02 04:41:12",45,NULL,"<p>The question is simply answered by recognising that inheritance models an &quot;IS-A&quot; relationship, while membership models a &quot;HAS-A&quot; relationship.</p>&#xA;&#xA;<ul>&#xA;<li>An employee IS A user</li>&#xA;<li>An employee HAS A userinfo</li>&#xA;</ul>&#xA;&#xA;<p>Which one is correct? This is your answer.</p>&#xA;"
38834,2,38820,"2008-09-02 04:47:40",3,NULL,"<p>Neither one is good. Too much mutable state. You should not be able to construct an instance of a class that is in an invalid or partially initialized state.</p>&#xA;&#xA;<p>That said, the second one is better because it favours composition over inheritance.</p>&#xA;"
38852,2,38820,"2008-09-02 05:03:49",13,NULL,"<p>Ask yourself the following:</p>&#xA;&#xA;<ul>&#xA;<li>Do you want to model an Employee <em>IS</em> a User?  If so, chose inheritance.</li>&#xA;<li>Do you want to model an Employee <em>HAS</em> a User information?  If so, use composition.</li>&#xA;<li>Are virtual functions involved between the User (info) and the Employee?  If so, use inheritance.</li>&#xA;<li>Can an Employee have multiple instances of User (info)?  If so, use composition.</li>&#xA;<li>Does it make sense to assign an Employee object to a User (info) object?  If so, use inheritance.</li>&#xA;</ul>&#xA;&#xA;<p>In general, strive to model the reality your program simulates, under the constraints of code complexity and required efficiency.</p>&#xA;"
38898,2,38820,"2008-09-02 05:43:14",4,NULL,"<p>The real questions are:</p>&#xA;&#xA;<ul>&#xA;<li>What are the business rules and user stories behind a user? </li>&#xA;<li>What are the business rules and user stories behind an employee? </li>&#xA;<li>What are the business rules and user stories behind a member?</li>&#xA;</ul>&#xA;&#xA;<p>These can be three completely unrelated entities or not, and that will determine whether your first or second design will work, or if another completely different design is in order.</p>&#xA;"
38905,2,38820,"2008-09-02 05:46:10",9,NULL,"<p>I don't think composition is always better than inheritance (just usually). If Employee and Member really are Users, and they are mutually exclusive, then the first design is better. Consider the scenario where you need to access the UserName of an Employee. Using the second design you would have: </p>&#xA;&#xA;<pre><code>myEmployee.UserInfo.UserName&#xA;</code></pre>&#xA;&#xA;<p>which is bad (law of Demeter), so you would refactor to:</p>&#xA;&#xA;<pre><code>myEmployee.UserName&#xA;</code></pre>&#xA;&#xA;<p>which requires a small method on Employee to delegate to the User object. All of which is avoided by the first design.</p>&#xA;"
38986,2,38820,"2008-09-02 07:43:01",2,NULL,"<p>Stating your requirement/spec might help arrive at the 'best design'.<br />&#xA;Your question is too 'subject-to-reader-interpretation' at the moment.</p>&#xA;"
38991,2,38820,"2008-09-02 07:54:58",2,NULL,"<p>Here's a scenario you should think about:</p>&#xA;&#xA;<p>Composition (the 2nd example) is preferable if the same User can be both an Employee and a Member. Why? Because for two instances (Employee and Member) that represent the same User, if User data changes, you don't have to update it in two places. Only the User instance contains all the User information, and only it has to be updated. Since both Employee and Member classes contain the same User instance, they will automatically both contain the updated information.</p>&#xA;"
51208,2,38820,"2008-09-09 04:07:23",9,NULL,"<p>Nice question although to avoid distractions about <em>right</em> and <em>wrong</em> I'd consider asking for the pros and cons of each approach -- I think that's what you meant by which is better or worse and why. Anyway ....</p>&#xA;&#xA;<h2>The First Approach aka Inheritance</h2>&#xA;&#xA;<p>Pros:</p>&#xA;&#xA;<ul>&#xA;<li>Allows polymorphic behavior.</li>&#xA;<li>Is <em>initially</em> simple and convenient.</li>&#xA;</ul>&#xA;&#xA;<p>Cons:</p>&#xA;&#xA;<ul>&#xA;<li><em>May</em> become complex or clumsy over time <em>if</em> more behavior and relations are added.</li>&#xA;</ul>&#xA;&#xA;<h2>The Second Approach aka Composition</h2>&#xA;&#xA;<p>Pros:</p>&#xA;&#xA;<ul>&#xA;<li>Maps well to non-oop scenarios like relational tables, structured programing, etc</li>&#xA;<li>Is straightforward (if not necessarily convenient) to <em>incrementally</em> extend relations and behavior.</li>&#xA;</ul>&#xA;&#xA;<p>Cons:</p>&#xA;&#xA;<ul>&#xA;<li>No polymorphism therefore it's less convenient to use related information and behavior</li>&#xA;</ul>&#xA;&#xA;<p>Lists like these + the questions <a href=&quot;http://stackoverflow.com/users/372/jon-limjap&quot; rel=&quot;nofollow&quot;>Jon Limjap</a> mentioned will help you make decisions and get started -- then you can find what the <em>right</em> answers should have been ;-)</p>&#xA;"
13124792,2,38820,"2012-10-29 15:36:43",1,NULL,"<p>Three more options:</p>&#xA;&#xA;<ol>&#xA;<li><p>Have the <code>User</code> class contain the supplemental information for both employees and members, with unused fields blank (the <code>ID</code> of a particular <code>User</code> would indicate whether the user was an employee, member, both, or whatever).</p></li>&#xA;<li><p>Have an <code>User</code> class which contains a reference to an <code>ISupplementalInfo</code>, where <code>ISupplementalInfo</code> is inherited by <code>ISupplementalEmployeeInfo</code>, <code>ISupplementalMemberInfo</code>, etc.  Code which is applicable to all users could work with <code>User</code> class objects, and code which had a <code>User</code> reference could get access to a user's supplemental information, but this approach would avoid having to change <code>User</code> if different combinations of supplemental information are required in future.</p></li>&#xA;<li><p>As above, but have the <code>User</code> class contain some kind of collection of <code>ISupplementalInfo</code>.  This approach would have the advantage of facilitating the run-time addition of properties to a user (e.g. because a <code>Member</code> got hired).  When using the previous approach, one would have to define different classes for different combinations of properties; turning a &quot;member&quot; into a &quot;member+customer&quot; would require different code from turning an &quot;employee&quot; into an &quot;employee+customer&quot;.  The disadvantage of the latter approach is that it would make it harder to guard against redundant or inconsistent attributes (using something like a <code>Dictionary&lt;Type, ISupplementalInfo&gt;</code> to hold supplemental information could work, but would seem a little &quot;bulky&quot;).</p></li>&#xA;</ol>&#xA;&#xA;<p>I would tend to favor the second approach, in that it allows for future expansion better than would direct inheritance.  Working with a collection of objects rather than a single object might be slightly burdensome, but that approach may be better able than the others to handle changing requirements.</p>&#xA;"
25430916,2,38820,"2014-08-21 16:04:15",2,NULL,"<p>You can also think of Employee as a <strong>role</strong> of the User (Person). The role of a User can change in time (user can become unemployed) or User can have multiple roles at the same time. </p>&#xA;&#xA;<p>Inheritance is much better when there is <strong>real</strong> &quot;is a&quot; relation, for example Apple - Fruit. But be very careful: Circle - Ellipse is not real &quot;is a&quot; relation, because cirlce has less &quot;freedom&quot; than ellipse (circle is a <strong>state</strong> of ellipse) -  see: <a href=&quot;http://en.wikipedia.org/wiki/Circle-ellipse_problem&quot; rel=&quot;nofollow&quot;>Circle Ellipse problem</a>.</p>&#xA;"
40771,2,40764,"2008-09-02 21:54:37",6,NULL,"<p>I prefer the following syntax:</p>&#xA;&#xA;<pre><code>Dim number As Integer = 1&#xA;Dim str As String = String.TryCast(number)&#xA;&#xA;If str IsNot Nothing Then&#xA;</code></pre>&#xA;&#xA;<p>Hah you can tell I typically write code in C#. 8) </p>&#xA;&#xA;<p>The reason I prefer TryCast is you do not have to mess with the overhead of casting exceptions. Your cast either succeeds or your variable is initialized to null and you deal with that accordingly.</p>&#xA;"
40782,2,40764,"2008-09-02 22:03:59",85,NULL,"<p>Those are all slightly different, and generally have an acceptable usage.</p>&#xA;&#xA;<ul>&#xA;<li><code>var.</code><a href=&quot;http://msdn.microsoft.com/en-us/library/system.object.tostring.aspx&quot;><code>ToString</code></a><code>()</code> is going to give you the string representation of an object, regardless of what type it is.  Use this if <code>var</code> is not a string already.</li>&#xA;<li><a href=&quot;http://msdn.microsoft.com/en-us/library/0zk841e9.aspx&quot;><code>CStr</code></a><code>(var)</code> is the VB string cast operator.  I'm not a VB guy, so I would suggest avoiding it, but it's not really going to hurt anything.  I think it is basically the same as <code>CType</code>.</li>&#xA;<li><a href=&quot;http://msdn.microsoft.com/en-us/library/4x2877xb.aspx&quot;><code>CType</code></a><code>(var, String)</code> will convert the given type into a string, using any provided conversion operators.</li>&#xA;<li><a href=&quot;http://msdn.microsoft.com/en-us/library/7k6y2h6x.aspx&quot;><code>DirectCast</code></a><code>(var, String)</code> is used to up-cast an object into a string.  If you know that an object variable is, in fact, a string, use this.  This is the same as <code>(string)var</code> in C#.</li>&#xA;<li><a href=&quot;http://msdn.microsoft.com/en-us/library/zyy863x8.aspx&quot;><code>TryCast</code></a> (as mentioned by @<a href=&quot;http://stackoverflow.com/questions/40764/how-should-i-cast-in-vbnet#40771&quot;>NotMyself</a>) is like <code>DirectCast</code>, but it will return <code>Nothing</code> if the variable can't be converted into a string, rather than throwing an exception.  This is the same as <code>var as string</code> in C#.  The <code>TryCast</code> page on MSDN has a good comparison, too.</li>&#xA;</ul>&#xA;"
40797,2,40764,"2008-09-02 22:12:08",7,NULL,"<p><a href=&quot;http://msdn.microsoft.com/en-us/library/s2dy91zy%28VS.80%29.aspx&quot;>MSDN</a> seems to indicate that the Cxxx casts for specific types can improve performance in VB .NET because they are converted to inline code.  For some reason, it also suggests <a href=&quot;http://msdn.microsoft.com/en-us/library/7k6y2h6x.aspx&quot;>DirectCast</a> as opposed to CType in certain cases (the documentations states it's when there's an inheritance relationship; I believe this means the sanity of the cast is checked at compile time and optimizations can be applied whereas CType always uses the VB runtime.)</p>&#xA;&#xA;<p>When I'm writing VB .NET code, what I use depends on what I'm doing. If it's prototype code I'm going to throw away, I use whatever I happen to type.  If it's code I'm serious about, I try to use a Cxxx cast.  If one doesn't exist, I use DirectCast if I have a reasonable belief that there's an inheritance relationship.  If it's a situation where I have no idea if the cast should succeed (user input -> integers, for example), then I use TryCast so as to do something more friendly than toss an exception at the user.</p>&#xA;&#xA;<p>One thing I can't shake is I tend to use ToString instead of CStr but supposedly Cstr is faster. </p>&#xA;"
46578,2,40764,"2008-09-05 19:03:09",0,NULL,"<p>At one time, I remember seeing the MSDN library state to use CStr() because it was faster. I do not know if this is true though.</p>&#xA;"
103466,2,40764,"2008-09-19 16:28:44",4,NULL,"<p>User <a href=&quot;http://stackoverflow.com/users/1968/konrad-rudolph&quot;>Konrad Rudolph</a> advocates <a href=&quot;http://stackoverflow.com/questions/102084/hidden-features-of-vbnet#103285&quot;>for DirectCast() in Stack Overflow question &quot;Hidden Features of VB.NET&quot;</a>.</p>&#xA;"
5330177,2,40764,"2011-03-16 18:44:19",1,NULL,"<p>According to the certification exam you should use Convert.ToXXX() whenever possible for simple conversions because it optimizes performance better than CXXX conversions.  </p>&#xA;"
41929,2,41925,"2008-09-03 15:23:32",4,NULL,"<p>Perhaps storing the phone number sections in different columns, allowing for blank or null entries?</p>&#xA;"
41938,2,41925,"2008-09-03 15:29:48",1,NULL,"<p>I think free text (maybe varchar(25)) is the most widely used standard.  This will allow for any format, either domestic or international.</p>&#xA;&#xA;<p>I guess the main driving factor may be how exactly you're querying these numbers and what you're doing with them.</p>&#xA;"
41946,2,41925,"2008-09-03 15:32:31",47,NULL,"<p>KISS - I'm getting tired of many of the US web sites.  They have some cleverly written code to validate postal codes and phone numbers.  When I type my perfectly valid Norwegian contact info I find that quite often it gets rejected.</p>&#xA;&#xA;<p>Leave it a string, unless you have some specific need for something more advanced.</p>&#xA;"
41949,2,41925,"2008-09-03 15:34:52",0,NULL,"<p>What about storing a freetext column that shows a user-friendly version of the telephone number, then a normalised version that removes spaces, brackets and expands '+'. For example:</p>&#xA;&#xA;<p><strong>User friendly:</strong> +44 (0)181 4642542</p>&#xA;&#xA;<p><strong>Normalized:</strong> 00441814642542</p>&#xA;"
41955,2,41925,"2008-09-03 15:37:05",1,NULL,"<p>I find most web forms correctly allow for the country code, area code, then the remaining 7 digits but almost always forget to allow entry of an extension. This almost always ends up making me utter angry words, since at work we don't have a receptionist, and my ext.# is needed to reach me.</p>&#xA;"
41956,2,41925,"2008-09-03 15:38:26",5,NULL,"<p>I personally like the idea of storing a normalized varchar phone number (e.g. 9991234567) then, of course, formatting that phone number inline as you display it. </p>&#xA;&#xA;<p>This way all the data in your database is &quot;clean&quot; and free of formatting</p>&#xA;"
41964,2,41925,"2008-09-03 15:43:47",1,NULL,"<blockquote>&#xA;  <p>I find most web forms correctly allow for the country code, area code, then the remaining 7 digits but almost always forget to allow entry of an extension. This almost always ends up making me utter angry words, since at work we don't have a receptionist, and my ext.# is needed to reach me.</p>&#xA;</blockquote>&#xA;&#xA;<p>I would have to check, but I think our DB schema is similar. We hold a country code (it might default to the US, not sure), area code, 7 digits, and extension.</p>&#xA;"
41982,2,41925,"2008-09-03 15:54:44",55,NULL,"<p>First, beyond the country code, there is no real standard. About the best you can do is recognize, by the country code, which nation a particular phone number belongs to and deal with the rest of the number according to that nation's format.</p>&#xA;&#xA;<p>Generally, however, phone equipment and such is standardized so you can almost always break a given phone number into the following components</p>&#xA;&#xA;<ul>&#xA;<li>C Country code 1-10 digits (right now 4 or less, but that may change)</li>&#xA;<li>A Area code (Province/state/region) code 0-10 digits  (may actually want a region field and an area field separately, rather than one area code)</li>&#xA;<li>E Exchange (prefix, or switch) code 0-10 digits</li>&#xA;<li>L Line number 1-10 digits</li>&#xA;</ul>&#xA;&#xA;<p>With this method you can potentially separate numbers such that you can find, for instance, people that might be close to each other because they have the same country, area, and exchange codes. With cell phones that is no longer something you can count on though.</p>&#xA;&#xA;<p>Further, inside each country there are differing standards. You can always depend on a (AAA) EEE-LLLL in the US, but in a 3rd world country you may have exchanges in the cities (AAA) EE-LLL, and simply line numbers in the rural areas (AAA) LLLL. You will have to start at the top in a tree of some form, and format them as you have information.  For example, country code 0 has a known format for the rest of the number, but for country code 5432 you might need to examine the area code before you understand the rest of the number.</p>&#xA;&#xA;<p>You may also want to handle <code>vanity</code> numbers such as <code>(800) Lucky-Guy</code>, which requires recognizing that, if it's a US number, there's one too many digits (and you may need to full representation for advertising or other purposes) and that in the US the letters map to the numbers differently than in Germany.</p>&#xA;&#xA;<p>You may also want to store the entire number separately as a text field (with internationalization) so you can go back later and re-parse numbers as things change, or as a backup in case someone submits a bad method to parse a particular country's format and loses information.</p>&#xA;"
42028,2,41925,"2008-09-03 16:10:48",5,NULL,"<p>Look up E.164.  Basically, you store the phone number as a code starting with the country prefix and an optional pbx suffix.  Display is then a localization issue.  Validation can also be done, but it's also a localization issue (based on the country prefix).</p>&#xA;&#xA;<p>For example, +12125551212+202 would be formatted in the en_US locale as (212) 555-1212 x202.  It would have a different format in <code>en_GB</code> or <code>de_DE</code>.  </p>&#xA;&#xA;<p>There is quite a bit of info out there about ITU-T E.164, but it's pretty cryptic. </p>&#xA;"
170898,2,41925,"2008-10-04 19:30:31",2,NULL,"<p>Ok, so based on the info on this page, here is a start on an international phone number validator:</p>&#xA;&#xA;<pre><code>function validatePhone(phoneNumber) {&#xA;    var valid = true;&#xA;    var stripped = phoneNumber.replace(/[\(\)\.\-\ \+\x]/g, '');    &#xA;&#xA;    if(phoneNumber == &quot;&quot;){&#xA;    	valid = false;&#xA;    }else if (isNaN(parseInt(stripped))) {&#xA;        valid = false;&#xA;    }else if (stripped.length &gt; 40) {&#xA;        valid = false;&#xA;    }&#xA;    return valid;&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>Loosely based on a script from this page: <a href=&quot;http://www.webcheatsheet.com/javascript/form_validation.php&quot; rel=&quot;nofollow&quot;>http://www.webcheatsheet.com/javascript/form_validation.php</a></p>&#xA;"
170899,2,41925,"2008-10-04 19:32:04",18,NULL,"<p>The <a href=&quot;http://en.wikipedia.org/wiki/E.164&quot;>Wikipedia page on E.164</a> should tell you everything you need to know.</p>&#xA;"
170919,2,41925,"2008-10-04 19:58:45",0,NULL,"<p>I've used 3 different ways to store phone numbers depending on the usage requirements.</p>&#xA;&#xA;<ol>&#xA;<li>If the number is being stored just for human retrieval and won't be used for searching its stored in a string type field exactly as the user entered it.</li>&#xA;<li>If the field is going to be searched on then any extra characters, such as +, spaces and brackets etc are removed and the remaining number stored in a string type field.</li>&#xA;<li>Finally, if the phone number is going to be used by a computer/phone application, then in this case it would need to be entered and stored as a valid phone number usable by the system, this option of course, being the hardest to code for.</li>&#xA;</ol>&#xA;"
262346,2,41925,"2008-11-04 16:23:44",7,NULL,"<p>Here's my proposed structure, I'd appreciate feedback:</p>&#xA;&#xA;<p>The phone database field should be a varchar(42) with the following format:</p>&#xA;&#xA;<p>CountryCode - Number x Extension</p>&#xA;&#xA;<p>So, for example, in the US, we could have:</p>&#xA;&#xA;<p>1-2125551234x1234</p>&#xA;&#xA;<p>This would represent a US number (country code 1) with area-code/number (212) 555 1234 and extension 1234.</p>&#xA;&#xA;<p>Separating out the country code with a dash makes the country code clear to someone who is perusing the data. This is not <em>strictly</em> necessary because country codes are &quot;<a href=&quot;http://en.wikipedia.org/wiki/Prefix_code&quot; rel=&quot;nofollow&quot;>prefix codes</a>&quot; (you can read them left to right and you will always be able to unambiguously determine the country). But, since country codes have varying lengths (between 1 and 4 characters at the moment) you can't easily tell at a glance the country code unless you use some sort of separator. </p>&#xA;&#xA;<p>I use an &quot;x&quot; to separate the extension because otherwise it really wouldn't be possible (in many cases) to figure out which was the number and which was the extension.</p>&#xA;&#xA;<p>In this way you can store the entire number, including country code and extension, in a single database field, that you can then use to speed up your queries, instead of joining on a user-defined function as you have been painfully doing so far.</p>&#xA;&#xA;<p>Why did I pick a varchar(42)? Well, first off, international phone numbers will be of varied lengths, hence the &quot;var&quot;. I am storing a dash and an &quot;x&quot;, so that explains the &quot;char&quot;, and anyway, you won't be doing integer arithmetic on the phone numbers (I guess) so it makes little sense to try to use a numeric type. As for the length of 42, I used the maximum possible length of all the fields added up, based on Adam Davis' answer, and added 2 for the dash and the 'x&quot;. </p>&#xA;"
262382,2,41925,"2008-11-04 16:33:02",0,NULL,"<p>Where are you getting the phone numbers from? If you're getting them from part of the phone network, you'll get a string of digits and a number type and plan, eg</p>&#xA;&#xA;<p>441234567890 type/plan 0x11 (which means international E.164)</p>&#xA;&#xA;<p>In most cases the best thing to do is to store all of these as they are, and normalise for display, though storing normalised numbers can be useful if you want to use them as a unique key or similar. </p>&#xA;"
7567049,2,41925,"2011-09-27 09:37:27",0,NULL,"<blockquote>&#xA;  <p>User friendly: +44 (0)181 464 2542 normalised: 00441814642542</p>&#xA;</blockquote>&#xA;&#xA;<p>The (0) is not valid in the international format. See the ITU-T E.123 standard.</p>&#xA;&#xA;<p>The &quot;normalised&quot; format would not be useful to US readers as they use 011 for international access.</p>&#xA;"
42535,2,42519,"2008-09-03 20:41:11",67,NULL,"<p>Here it is in C#</p>&#xA;&#xA;<pre class=&quot;lang-csharp prettyprint-override&quot;><code>int[,] array = new int[4,4] {&#xA;    { 1,2,3,4 },&#xA;    { 5,6,7,8 },&#xA;    { 9,0,1,2 },&#xA;    { 3,4,5,6 }&#xA;};&#xA;&#xA;int[,] rotated = RotateMatrix(array, 4);&#xA;&#xA;static int[,] RotateMatrix(int[,] matrix, int n) {&#xA;    int[,] ret = new int[n, n];&#xA;&#xA;    for (int i = 0; i &lt; n; ++i) {&#xA;        for (int j = 0; j &lt; n; ++j) {&#xA;            ret[i, j] = matrix[n - j - 1, i];&#xA;        }&#xA;    }&#xA;&#xA;    return ret;&#xA;}&#xA;</code></pre>&#xA;"
42578,2,42519,"2008-09-03 20:59:46",4,NULL,"<p>Here's my Ruby version (note the values aren't displayed the same, but it still rotates as described).</p>&#xA;&#xA;<pre class=&quot;lang-ruby prettyprint-override&quot;><code>def rotate(matrix)&#xA;  result = []&#xA;  4.times { |x|&#xA;    result[x] = []&#xA;    4.times { |y|&#xA;      result[x][y] = matrix[y][3 - x]&#xA;    }&#xA;  }&#xA;&#xA;  result&#xA;end&#xA;&#xA;matrix = []&#xA;matrix[0] = [1,2,3,4]&#xA;matrix[1] = [5,6,7,8]&#xA;matrix[2] = [9,0,1,2]&#xA;matrix[3] = [3,4,5,6]&#xA;&#xA;def print_matrix(matrix)&#xA;  4.times { |y|&#xA;    4.times { |x|&#xA;      print &quot;#{matrix[x][y]} &quot;&#xA;    }&#xA;    puts &quot;&quot;&#xA;  }&#xA;end&#xA;&#xA;print_matrix(matrix)&#xA;puts &quot;&quot;&#xA;print_matrix(rotate(matrix))&#xA;</code></pre>&#xA;&#xA;<p>The output:</p>&#xA;&#xA;<pre><code>1 5 9 3 &#xA;2 6 0 4 &#xA;3 7 1 5 &#xA;4 8 2 6 &#xA;&#xA;4 3 2 1 &#xA;8 7 6 5 &#xA;2 1 0 9 &#xA;6 5 4 3&#xA;</code></pre>&#xA;"
42590,2,42519,"2008-09-03 21:04:31",6,NULL,"<p><a href=&quot;http://stackoverflow.com/questions/42519/how-do-you-rotate-a-two-dimensional-array#42535&quot;>Nick's</a> answer would work for an NxM array too with only a small modification (as opposed to an NxN).</p>&#xA;&#xA;<pre class=&quot;lang-csharp prettyprint-override&quot;><code>string[,] orig = new string[n, m];&#xA;string[,] rot = new string[m, n];&#xA;&#xA;...&#xA;&#xA;for ( int i=0; i &lt; n; i++ )&#xA;  for ( int j=0; j &lt; m; j++ )&#xA;    rot[j, n - i - 1] = orig[i, j];&#xA;</code></pre>&#xA;&#xA;<p>One way to think about this is that you have moved the center of the axis (0,0) from the top left corner to the top right corner.  You're simply transposing from one to the other.</p>&#xA;"
42612,2,42519,"2008-09-03 21:13:22",10,NULL,"<p>A couple of people have already put up examples which involve making a new array.  </p>&#xA;&#xA;<p>A few other things to consider:</p>&#xA;&#xA;<p>(a) Instead of actually moving the data, simply traverse the &quot;rotated&quot; array differently.  </p>&#xA;&#xA;<p>(b) Doing the rotation in-place can be a little trickier.  You'll need a bit of scratch place (probably roughly equal to one row or column in size).  There's an ancient ACM paper about doing in-place transposes (<a href=&quot;http://doi.acm.org/10.1145/355719.355729&quot;>http://doi.acm.org/10.1145/355719.355729</a>), but their example code is nasty goto-laden FORTRAN.</p>&#xA;&#xA;<p>Addendum:</p>&#xA;&#xA;<p><a href=&quot;http://doi.acm.org/10.1145/355611.355612&quot;>http://doi.acm.org/10.1145/355611.355612</a> is another, supposedly superior, in-place transpose algorithm.</p>&#xA;"
42772,2,42519,"2008-09-03 22:48:21",-1,NULL,"<p>Nick's answer is O(n.n) since the number of operations increases with the square of the rank of the matrix, so a rank 4 matrix (4x4) requires 16 operations and a rank 5 requires 25 operations.</p>&#xA;&#xA;<p>I have an O(1) algorithm, but it's getting late here so I'll post the code tomorrow (ooohh, the suspense!)</p>&#xA;"
43333,2,42519,"2008-09-04 08:22:13",31,NULL,"<p>As I said in my previous post, here's some code in C# that implements an O(1) matrix rotation for any size matrix. For brevity and readability there's no error checking or range checking. The code:</p>&#xA;&#xA;<pre class=&quot;lang-csharp prettyprint-override&quot;><code>static void Main (string [] args)&#xA;{&#xA;  int [,]&#xA;    //  create an arbitrary matrix&#xA;    m = {{0, 1}, {2, 3}, {4, 5}};&#xA;&#xA;  Matrix&#xA;    //  create wrappers for the data&#xA;    m1 = new Matrix (m),&#xA;    m2 = new Matrix (m),&#xA;    m3 = new Matrix (m);&#xA;&#xA;  //  rotate the matricies in various ways - all are O(1)&#xA;  m1.RotateClockwise90 ();&#xA;  m2.Rotate180 ();&#xA;  m3.RotateAnitclockwise90 ();&#xA;&#xA;  //  output the result of transforms&#xA;  System.Diagnostics.Trace.WriteLine (m1.ToString ());&#xA;  System.Diagnostics.Trace.WriteLine (m2.ToString ());&#xA;  System.Diagnostics.Trace.WriteLine (m3.ToString ());&#xA;}&#xA;&#xA;class Matrix&#xA;{&#xA;  enum Rotation&#xA;  {&#xA;    None,&#xA;    Clockwise90,&#xA;    Clockwise180,&#xA;    Clockwise270&#xA;  }&#xA;&#xA;  public Matrix (int [,] matrix)&#xA;  {&#xA;    m_matrix = matrix;&#xA;    m_rotation = Rotation.None;&#xA;  }&#xA;&#xA;  //  the transformation routines&#xA;  public void RotateClockwise90 ()&#xA;  {&#xA;    m_rotation = (Rotation) (((int) m_rotation + 1) &amp; 3);&#xA;  }&#xA;&#xA;  public void Rotate180 ()&#xA;  {&#xA;    m_rotation = (Rotation) (((int) m_rotation + 2) &amp; 3);&#xA;  }&#xA;&#xA;  public void RotateAnitclockwise90 ()&#xA;  {&#xA;    m_rotation = (Rotation) (((int) m_rotation + 3) &amp; 3);&#xA;  }&#xA;&#xA;  //  accessor property to make class look like a two dimensional array&#xA;  public int this [int row, int column]&#xA;  {&#xA;    get&#xA;    {&#xA;      int&#xA;        value = 0;&#xA;&#xA;      switch (m_rotation)&#xA;      {&#xA;      case Rotation.None:&#xA;        value = m_matrix [row, column];&#xA;        break;&#xA;&#xA;      case Rotation.Clockwise90:&#xA;        value = m_matrix [m_matrix.GetUpperBound (0) - column, row];&#xA;        break;&#xA;&#xA;      case Rotation.Clockwise180:&#xA;        value = m_matrix [m_matrix.GetUpperBound (0) - row, m_matrix.GetUpperBound (1) - column];&#xA;        break;&#xA;&#xA;      case Rotation.Clockwise270:&#xA;        value = m_matrix [column, m_matrix.GetUpperBound (1) - row];&#xA;        break;&#xA;      }&#xA;&#xA;      return value;&#xA;    }&#xA;&#xA;    set&#xA;    {&#xA;      switch (m_rotation)&#xA;      {&#xA;      case Rotation.None:&#xA;        m_matrix [row, column] = value;&#xA;        break;&#xA;&#xA;      case Rotation.Clockwise90:&#xA;        m_matrix [m_matrix.GetUpperBound (0) - column, row] = value;&#xA;        break;&#xA;&#xA;      case Rotation.Clockwise180:&#xA;        m_matrix [m_matrix.GetUpperBound (0) - row, m_matrix.GetUpperBound (1) - column] = value;&#xA;        break;&#xA;&#xA;      case Rotation.Clockwise270:&#xA;        m_matrix [column, m_matrix.GetUpperBound (1) - row] = value;&#xA;        break;&#xA;      }&#xA;    }&#xA;  }&#xA;&#xA;  //  creates a string with the matrix values&#xA;  public override string ToString ()&#xA;  {&#xA;    int&#xA;      num_rows = 0,&#xA;      num_columns = 0;&#xA;&#xA;    switch (m_rotation)&#xA;    {&#xA;    case Rotation.None:&#xA;    case Rotation.Clockwise180:&#xA;      num_rows = m_matrix.GetUpperBound (0);&#xA;      num_columns = m_matrix.GetUpperBound (1);&#xA;      break;&#xA;&#xA;    case Rotation.Clockwise90:&#xA;    case Rotation.Clockwise270:&#xA;      num_rows = m_matrix.GetUpperBound (1);&#xA;      num_columns = m_matrix.GetUpperBound (0);&#xA;      break;&#xA;    }&#xA;&#xA;    StringBuilder&#xA;      output = new StringBuilder ();&#xA;&#xA;    output.Append (&quot;{&quot;);&#xA;&#xA;    for (int row = 0 ; row &lt;= num_rows ; ++row)&#xA;    {&#xA;      if (row != 0)&#xA;      {&#xA;        output.Append (&quot;, &quot;);&#xA;      }&#xA;&#xA;      output.Append (&quot;{&quot;);&#xA;&#xA;      for (int column = 0 ; column &lt;= num_columns ; ++column)&#xA;      {&#xA;        if (column != 0)&#xA;        {&#xA;          output.Append (&quot;, &quot;);&#xA;        }&#xA;&#xA;        output.Append (this [row, column].ToString ());&#xA;      }&#xA;&#xA;      output.Append (&quot;}&quot;);&#xA;    }&#xA;&#xA;    output.Append (&quot;}&quot;);&#xA;&#xA;    return output.ToString ();&#xA;  }&#xA;&#xA;  int [,]&#xA;    //  the original matrix&#xA;    m_matrix;&#xA;&#xA;  Rotation&#xA;    //  the current view of the matrix&#xA;    m_rotation;&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>OK, I'll put my hand up, it doesn't actually do any modifications to the original array when rotating. But, in an OO system that doesn't matter as long as the object looks like it's been rotated to the clients of the class. At the moment, the Matrix class uses references to the original array data so changing any value of m1 will also change m2 and m3. A small change to the constructor to create a new array and copy the values to it will sort that out.</p>&#xA;"
44368,2,42519,"2008-09-04 18:12:15",33,NULL,"<p>Here is one that does the rotation in place instead of using a completely new array to hold the result.  I've left off initialization of the array and printing it out.  This only works for square arrays but they can be of any size.  Memory overhead is equal to the size of one element of the array so you can do the rotation of as large an array as you want.  (code is C++)</p>&#xA;&#xA;<pre class=&quot;lang-cpp prettyprint-override&quot;><code>int a[4][4];&#xA;int n=4;&#xA;int tmp;&#xA;for (int i=0; i&lt;n/2; i++){&#xA;        for (int j=i; j&lt;n-i-1; j++){&#xA;                tmp=a[i][j];&#xA;                a[i][j]=a[j][n-i-1];&#xA;                a[j][n-i-1]=a[n-i-1][n-j-1];&#xA;                a[n-i-1][n-j-1]=a[n-j-1][i];&#xA;                a[n-j-1][i]=tmp;&#xA;        }&#xA;}&#xA;</code></pre>&#xA;"
48607,2,42519,"2008-09-07 17:41:19",0,NULL,"<p>@dagorym: Aw, man. I had been hanging onto this as a good &quot;I'm bored, what can I ponder&quot; puzzle. I came up with my in-place transposition code, but got here to find yours pretty much identical to mine...ah, well. Here it is in Ruby.</p>&#xA;&#xA;<pre class=&quot;lang-ruby prettyprint-override&quot;><code>require 'pp'&#xA;n = 10&#xA;a = []&#xA;n.times { a &lt;&lt; (1..n).to_a }&#xA;&#xA;pp a&#xA;&#xA;0.upto(n/2-1) do |i|&#xA;  i.upto(n-i-2) do |j|&#xA;    tmp             = a[i][j]&#xA;    a[i][j]         = a[n-j-1][i]&#xA;    a[n-j-1][i]     = a[n-i-1][n-j-1]&#xA;    a[n-i-1][n-j-1] = a[j][n-i-1]&#xA;    a[j][n-i-1]     = tmp&#xA;  end&#xA;end&#xA;&#xA;pp a&#xA;</code></pre>&#xA;"
193942,2,42519,"2008-10-11 10:33:49",19,NULL,"<p>Whilst rotating the data in place might be necessary (perhaps to update the physically stored representation), it becomes simpler and possibly more performant to add a layer of indirection onto the array access, perhaps an interface:</p>&#xA;&#xA;<pre class=&quot;lang-csharp prettyprint-override&quot;><code>interface IReadableMatrix&#xA;{&#xA;    int GetValue(int x, int y);&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>If your <code>Matrix</code> already implements this interface, then it can be rotated via a <a href=&quot;http://en.wikipedia.org/wiki/Decorator_pattern&quot;>decorator</a> class like this:</p>&#xA;&#xA;<pre class=&quot;lang-csharp prettyprint-override&quot;><code>class RotatedMatrix : IReadableMatrix&#xA;{&#xA;    private readonly IReadableMatrix _baseMatrix;&#xA;&#xA;    public RotatedMatrix(IReadableMatrix baseMatrix)&#xA;    {&#xA;        _baseMatrix = baseMatrix;&#xA;    }&#xA;&#xA;    int GetValue(int x, int y)&#xA;    {&#xA;        // transpose x and y dimensions&#xA;        return _baseMatrix(y, x);&#xA;    }&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>Rotating +90/-90/180 degrees, flipping horizontally/vertically and scaling can all be achieved in this fashion as well.</p>&#xA;&#xA;<p>Performance would need to be measured in your specific scenario.  However the O(n^2) operation has now been replaced with an O(1) call.  It's a virtual method call which <em>is</em> slower than direct array access, so it depends upon how frequently the rotated array is used after rotation.  If it's used once, then this approach would definitely win.  If it's rotated then used in a long-running system for days, then in-place rotation might perform better.  It also depends whether you can accept the up-front cost.</p>&#xA;&#xA;<p>As with all performance issues, measure, measure, measure!</p>&#xA;"
496056,2,42519,"2009-01-30 16:12:47",77,NULL,"<p><strong>Python:</strong></p>&#xA;&#xA;<pre class=&quot;lang-py prettyprint-override&quot;><code>rotated = zip(*original[::-1])&#xA;</code></pre>&#xA;&#xA;<p>Cheap, I know.</p>&#xA;&#xA;<p>And counterclockwise:</p>&#xA;&#xA;<pre class=&quot;lang-py prettyprint-override&quot;><code>rotated_ccw = zip(*original)[::-1]&#xA;</code></pre>&#xA;"
3137413,2,42519,"2010-06-29 02:12:09",2,NULL,"<p>PHP:</p>&#xA;&#xA;<pre class=&quot;lang-php prettyprint-override&quot;><code>&lt;?php    &#xA;$a = array(array(1,2,3,4),array(5,6,7,8),array(9,0,1,2),array(3,4,5,6));&#xA;$b = array(); //result&#xA;&#xA;while(count($a)&gt;0)&#xA;{&#xA;    $b[count($a[0])-1][] = array_shift($a[0]);&#xA;    if (count($a[0])==0)&#xA;    {&#xA;         array_shift($a);&#xA;    }&#xA;}&#xA;?&gt;&#xA;</code></pre>&#xA;"
3137649,2,42519,"2010-06-29 03:27:42",1,NULL,"<p>All the current solutions have O(n^2) overhead as scratch space (this excludes those filthy OOP cheaters!). Here's a solution with O(1) memory usage, rotating the matrix in-place 90 degress right. Screw extensibility, this sucker runs fast!</p>&#xA;&#xA;<pre class=&quot;lang-cpp prettyprint-override&quot;><code>#include &lt;algorithm&gt;&#xA;#include &lt;cstddef&gt;&#xA;&#xA;// Rotates an NxN matrix of type T 90 degrees to the right.&#xA;template &lt;typename T, size_t N&gt;&#xA;void rotate_matrix(T (&amp;matrix)[N][N])&#xA;{&#xA;    for(size_t i = 0; i &lt; N; ++i)&#xA;        for(size_t j = 0; j &lt;= (N-i); ++j)&#xA;            std::swap(matrix[i][j], matrix[j][i]);&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>DISCLAIMER: I didn't actually test this. Let's play whack-a-bug!</p>&#xA;"
3571501,2,42519,"2010-08-26 01:43:32",9,NULL,"<p>Ruby-way: <code>.transpose.map &amp;:reverse</code></p>&#xA;"
8664879,2,42519,"2011-12-29 07:00:05",112,NULL,"<p><strong>O(n^2) time and O(1) space algorithm</strong> ( without any workarounds and hanky-panky stuff! )</p>&#xA;&#xA;<p><strong>Rotate by +90:</strong></p>&#xA;&#xA;<ol>&#xA;<li>Transpose</li>&#xA;<li>Reverse each row</li>&#xA;</ol>&#xA;&#xA;<p><strong>Rotate by -90:</strong></p>&#xA;&#xA;<ol>&#xA;<li>Transpose</li>&#xA;<li>Reverse each column</li>&#xA;</ol>&#xA;&#xA;<p><strong>Rotate by +180:</strong></p>&#xA;&#xA;<p><em>Method 1</em>: Rotate by +90 twice</p>&#xA;&#xA;<p><em>Method 2</em>: Reverse each row and then reverse each column</p>&#xA;&#xA;<p><strong>Rotate by -180:</strong></p>&#xA;&#xA;<p><em>Method 1</em>: Rotate by -90 twice</p>&#xA;&#xA;<p><em>Method 2</em>: Reverse each column and then reverse each row</p>&#xA;&#xA;<p><em>Method 3</em>: Reverse by +180 as they are same</p>&#xA;"
8668894,2,42519,"2011-12-29 14:13:19",1,NULL,"<p><code>For i:= 0 to X do&#xA;       For j := 0 to X do&#xA;               graphic[j][i] := graphic2[X-i][j]</code></p>&#xA;&#xA;<p>X is the size of the array the graphic is in.</p>&#xA;"
9711525,2,42519,"2012-03-14 22:52:31",3,NULL,"<p>here's a in-space rotate method, by java, only for square. for non-square 2d array, you will have to create new array anyway.</p>&#xA;&#xA;<pre class=&quot;lang-java prettyprint-override&quot;><code>private void rotateInSpace(int[][] arr) {&#xA;    int z = arr.length;&#xA;    for (int i = 0; i &lt; z / 2; i++) {&#xA;        for (int j = 0; j &lt; (z / 2 + z % 2); j++) {&#xA;            int x = i, y = j;&#xA;            int temp = arr[x][y];&#xA;            for (int k = 0; k &lt; 4; k++) {&#xA;                int temptemp = arr[y][z - x - 1];&#xA;                arr[y][z - x - 1] = temp;&#xA;                temp = temptemp;&#xA;&#xA;                int tempX = y;&#xA;                y = z - x - 1;&#xA;                x = tempX;&#xA;            }&#xA;        }&#xA;    }&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>code to rotate any size 2d array by creating new array:</p>&#xA;&#xA;<pre class=&quot;lang-java prettyprint-override&quot;><code>private int[][] rotate(int[][] arr) {&#xA;    int width = arr[0].length;&#xA;    int depth = arr.length;&#xA;    int[][] re = new int[width][depth];&#xA;    for (int i = 0; i &lt; depth; i++) {&#xA;        for (int j = 0; j &lt; width; j++) {&#xA;            re[j][depth - i - 1] = arr[i][j];&#xA;        }&#xA;    }&#xA;    return re;&#xA;}&#xA;</code></pre>&#xA;"
10021595,2,42519,"2012-04-05 01:42:12",1,NULL,"<p>This is my implementation, in C, O(1) memory complexity, in place rotation, 90 degrees clockwise:</p>&#xA;&#xA;<pre class=&quot;lang-c prettyprint-override&quot;><code>#include &lt;stdio.h&gt;&#xA;&#xA;#define M_SIZE 5&#xA;&#xA;static void initMatrix();&#xA;static void printMatrix();&#xA;static void rotateMatrix();&#xA;&#xA;static int m[M_SIZE][M_SIZE];&#xA;&#xA;int main(void){&#xA;    initMatrix();&#xA;    printMatrix();&#xA;    rotateMatrix();&#xA;    printMatrix();&#xA;&#xA;    return 0;&#xA;}&#xA;&#xA;static void initMatrix(){&#xA;    int i, j;&#xA;&#xA;    for(i = 0; i &lt; M_SIZE; i++){&#xA;        for(j = 0; j &lt; M_SIZE; j++){&#xA;            m[i][j] = M_SIZE*i + j + 1;&#xA;        }&#xA;    }&#xA;}&#xA;&#xA;static void printMatrix(){&#xA;    int i, j;&#xA;&#xA;    printf(&quot;Matrix\n&quot;);&#xA;    for(i = 0; i &lt; M_SIZE; i++){&#xA;        for(j = 0; j &lt; M_SIZE; j++){&#xA;            printf(&quot;%02d &quot;, m[i][j]);&#xA;        }&#xA;        printf(&quot;\n&quot;);&#xA;    }&#xA;    printf(&quot;\n&quot;);&#xA;}&#xA;&#xA;static void rotateMatrix(){&#xA;    int r, c;&#xA;&#xA;    for(r = 0; r &lt; M_SIZE/2; r++){&#xA;        for(c = r; c &lt; M_SIZE - r - 1; c++){&#xA;            int tmp = m[r][c];&#xA;&#xA;            m[r][c] = m[M_SIZE - c - 1][r];&#xA;            m[M_SIZE - c - 1][r] = m[M_SIZE - r - 1][M_SIZE - c - 1];&#xA;            m[M_SIZE - r - 1][M_SIZE - c - 1] = m[c][M_SIZE - r - 1];&#xA;            m[c][M_SIZE - r - 1] = tmp;&#xA;        }&#xA;    }&#xA;}&#xA;</code></pre>&#xA;"
11695638,2,42519,"2012-07-27 21:05:43",1,NULL,"<p>#transpose is a standard method of Ruby's Array class, thus:</p>&#xA;&#xA;<pre><code>% irb&#xA;irb(main):001:0&gt; m = [[1, 2, 3, 4], [5, 6, 7, 8], [9, 0, 1, 2], [3, 4, 5, 6]]&#xA;=&gt; [[1, 2, 3, 4], [5, 6, 7, 8], [9, 0, 1, 2], [3, 4, 5, 6]] &#xA;irb(main):002:0&gt; m.reverse.transpose&#xA;=&gt; [[3, 9, 5, 1], [4, 0, 6, 2], [5, 1, 7, 3], [6, 2, 8, 4]]&#xA;</code></pre>&#xA;&#xA;<p>The implementation is an n^2 transposition function written in C. You can see it here:&#xA;<a href=&quot;http://www.ruby-doc.org/core-1.9.3/Array.html#method-i-transpose&quot; rel=&quot;nofollow&quot;>http://www.ruby-doc.org/core-1.9.3/Array.html#method-i-transpose</a>&#xA;by choosing &quot;click to toggle source&quot; beside &quot;transpose&quot;.</p>&#xA;&#xA;<p>I recall better than O(n^2) solutions, but only for specially constructed matrices (such as sparse matrices)</p>&#xA;"
15073652,2,42519,"2013-02-25 18:18:34",1,NULL,"<p>C code for matrix rotation 90 degree clockwise IN PLACE for any M*N matrix</p>&#xA;&#xA;<pre class=&quot;lang-c prettyprint-override&quot;><code>void rotateInPlace(int * arr[size][size], int row, int column){&#xA;    int i, j;&#xA;    int temp = row&gt;column?row:column;&#xA;    int flipTill = row &lt; column ? row : column;&#xA;    for(i=0;i&lt;flipTill;i++){&#xA;        for(j=0;j&lt;i;j++){&#xA;            swapArrayElements(arr, i, j);&#xA;        }&#xA;    }&#xA;&#xA;    temp = j+1;&#xA;&#xA;    for(i = row&gt;column?i:0; i&lt;row; i++){&#xA;            for(j=row&lt;column?temp:0; j&lt;column; j++){&#xA;                swapArrayElements(arr, i, j);&#xA;            }&#xA;    }&#xA;&#xA;    for(i=0;i&lt;column;i++){&#xA;        for(j=0;j&lt;row/2;j++){&#xA;            temp = arr[i][j];&#xA;            arr[i][j] = arr[i][row-j-1];&#xA;            arr[i][row-j-1] = temp;&#xA;        }&#xA;    }&#xA;}&#xA;</code></pre>&#xA;"
15432619,2,42519,"2013-03-15 12:34:21",0,NULL,"<p>Here is my attempt for matrix 90 deg rotation which is a 2 step solution in C. First transpose the matrix in place and then swap the cols.</p>&#xA;&#xA;<pre class=&quot;lang-c prettyprint-override&quot;><code>#define ROWS        5&#xA;#define COLS        5&#xA;&#xA;void print_matrix_b(int B[][COLS], int rows, int cols) &#xA;{&#xA;    for (int i = 0; i &lt;= rows; i++) {&#xA;        for (int j = 0; j &lt;=cols; j++) {&#xA;            printf(&quot;%d &quot;, B[i][j]);&#xA;        }&#xA;        printf(&quot;\n&quot;);&#xA;    }&#xA;}&#xA;&#xA;void swap_columns(int B[][COLS], int l, int r, int rows)&#xA;{&#xA;    int tmp;&#xA;    for (int i = 0; i &lt;= rows; i++) {&#xA;        tmp = B[i][l];&#xA;        B[i][l] = B[i][r];&#xA;        B[i][r] = tmp;&#xA;    }&#xA;}&#xA;&#xA;&#xA;void matrix_2d_rotation(int B[][COLS], int rows, int cols)&#xA;{&#xA;    int tmp;&#xA;    // Transpose the matrix first&#xA;    for (int i = 0; i &lt;= rows; i++) {&#xA;        for (int j = i; j &lt;=cols; j++) {&#xA;            tmp = B[i][j];&#xA;            B[i][j] = B[j][i];&#xA;            B[j][i] = tmp;&#xA;        }&#xA;    }&#xA;    // Swap the first and last col and continue until&#xA;    // the middle.&#xA;    for (int i = 0; i &lt; (cols / 2); i++)&#xA;        swap_columns(B, i, cols - i, rows);&#xA;}&#xA;&#xA;&#xA;&#xA;int _tmain(int argc, _TCHAR* argv[])&#xA;{&#xA;    int B[ROWS][COLS] = { &#xA;                  {1, 2, 3, 4, 5}, &#xA;                      {6, 7, 8, 9, 10},&#xA;                          {11, 12, 13, 14, 15},&#xA;                          {16, 17, 18, 19, 20},&#xA;                          {21, 22, 23, 24, 25}&#xA;                        };&#xA;&#xA;    matrix_2d_rotation(B, ROWS - 1, COLS - 1);&#xA;&#xA;    print_matrix_b(B, ROWS - 1, COLS -1);&#xA;    return 0;&#xA;}&#xA;</code></pre>&#xA;"
15501334,2,42519,"2013-03-19 13:50:14",0,NULL,"<p>The O(1) memory algorithm:</p>&#xA;&#xA;<ol>&#xA;<li><p>rotate the outer-most data, then you can get below result:</p>&#xA;&#xA;<pre><code>[3][9][5][1]&#xA;[4][6][7][2]&#xA;[5][0][1][3]&#xA;[6][2][8][4]&#xA;</code></pre></li>&#xA;</ol>&#xA;&#xA;<p>To do this rotation, we know </p>&#xA;&#xA;<pre><code>    dest[j][n-1-i] = src[i][j]&#xA;</code></pre>&#xA;&#xA;<p>Observe below: &#xA;        a(0,0) -> a(0,3)&#xA;        a(0,3) -> a(3,3)&#xA;        a(3,3) -> a(3,0)&#xA;        a(3,0) -> a(0,0)</p>&#xA;&#xA;<p>Therefore it's a circle, you can rotate N elements in one loop. Do this N-1 loop then you can rotate the outer-most elements.</p>&#xA;&#xA;<ol>&#xA;<li>Now you can the inner is a same question for 2X2. </li>&#xA;</ol>&#xA;&#xA;<p>Therefore we can conclude it like below:</p>&#xA;&#xA;<pre><code>function rotate(array, N)&#xA;{&#xA;    Rotate outer-most data&#xA;    rotate a new array with N-2 or you can do the similar action following step1&#xA;}&#xA;</code></pre>&#xA;"
16661397,2,42519,"2013-05-21 02:50:59",1,NULL,"<p>Here is the Java version:</p>&#xA;&#xA;<pre class=&quot;lang-java prettyprint-override&quot;><code>public static void rightRotate(int[][] matrix, int n) {&#xA;    for (int layer = 0; layer &lt; n / 2; layer++) {&#xA;        int first = layer;&#xA;        int last = n - 1 - first;&#xA;        for (int i = first; i &lt; last; i++) {&#xA;           int offset = i - first;&#xA;           int temp = matrix[first][i];&#xA;           matrix[first][i] = matrix[last-offset][first];&#xA;           matrix[last-offset][first] = matrix[last][last-offset];&#xA;           matrix[last][last-offset] = matrix[i][last];&#xA;           matrix[i][last] = temp;&#xA;        }&#xA;    }&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>the method first rotate the mostouter layer, then move to the inner layer squentially.</p>&#xA;"
18013355,2,42519,"2013-08-02 09:27:52",0,NULL,"<pre class=&quot;lang-java prettyprint-override&quot;><code>private static int[][] rotate(int[][] matrix, int n) {&#xA;    int[][] rotated = new int[n][n];&#xA;    for (int i = 0; i &lt; n; i++) {&#xA;        for (int j = 0; j &lt; n; j++) {&#xA;            rotated[i][j] = matrix[n-j-1][i];&#xA;        }&#xA;    }&#xA;    return rotated;&#xA;}&#xA;</code></pre>&#xA;"
18215843,2,42519,"2013-08-13 17:47:22",2,NULL,"<p>here is my In Place implementation in C</p>&#xA;&#xA;<pre class=&quot;lang-c prettyprint-override&quot;><code>void rotateRight(int matrix[][SIZE], int length) {&#xA;&#xA;    int layer = 0;&#xA;&#xA;    for (int layer = 0; layer &lt; length / 2; ++layer) {&#xA;&#xA;        int first = layer;&#xA;        int last = length - 1 - layer;&#xA;&#xA;        for (int i = first; i &lt; last; ++i) {&#xA;&#xA;            int topline = matrix[first][i];&#xA;            int rightcol = matrix[i][last];&#xA;            int bottomline = matrix[last][length - layer - 1 - i];&#xA;            int leftcol = matrix[length - layer - 1 - i][first];&#xA;&#xA;            matrix[first][i] = leftcol;&#xA;            matrix[i][last] = topline;&#xA;            matrix[last][length - layer - 1 - i] = rightcol;&#xA;            matrix[length - layer - 1 - i][first] = bottomline;&#xA;        }&#xA;    }&#xA;}&#xA;</code></pre>&#xA;"
18262380,2,42519,"2013-08-15 21:42:02",2,NULL,"<p>Implementation of dimple's +90 pseudocode (e.g. transpose then reverse each row) in JavaScript:</p>&#xA;&#xA;<pre class=&quot;lang-js prettyprint-override&quot;><code>function rotate90(a){&#xA;  // transpose from http://www.codesuck.com/2012/02/transpose-javascript-array-in-one-line.html&#xA;  a = Object.keys(a[0]).map(function (c) { return a.map(function (r) { return r[c]; }); });&#xA;  // row reverse&#xA;  for (i in a){&#xA;    a[i] = a[i].reverse();&#xA;  }&#xA;  return a;&#xA;}&#xA;</code></pre>&#xA;"
20199933,2,42519,"2013-11-25 17:56:29",12,NULL,"<p>There are tons of good code here but I just want to show what's going on geometrically so you can understand the code logic a little better.  Here is how I would approach this.</p>&#xA;&#xA;<p>first of all, do not confuse this with transposition which is very easy..</p>&#xA;&#xA;<p>the basica idea is to treat it as layers and we rotate one layer at a time..</p>&#xA;&#xA;<p>say we have a 4x4</p>&#xA;&#xA;<pre><code>1   2   3   4&#xA;5   6   7   8&#xA;9   10  11  12&#xA;13  14  15  16&#xA;</code></pre>&#xA;&#xA;<p>after we rotate it clockwise by 90 we get</p>&#xA;&#xA;<pre><code>13  9   5   1&#xA;14  10  6   2   &#xA;15  11  7   3&#xA;16  12  8   4&#xA;</code></pre>&#xA;&#xA;<p>so let's decompose this, first we rotate the 4 corners essentially</p>&#xA;&#xA;<pre><code>1           4&#xA;&#xA;&#xA;13          16&#xA;</code></pre>&#xA;&#xA;<p>then we rotate the following diamond which is sort of askew</p>&#xA;&#xA;<pre><code>    2&#xA;            8&#xA;9       &#xA;        15&#xA;</code></pre>&#xA;&#xA;<p>and then the 2nd skewed diamond</p>&#xA;&#xA;<pre><code>        3&#xA;5           &#xA;            12&#xA;    14&#xA;</code></pre>&#xA;&#xA;<p>so that takes care of the outer edge so essentially we do that one shell at a time until </p>&#xA;&#xA;<p>finally the middle square (or if it's odd just the final element which does not move)</p>&#xA;&#xA;<pre><code>6   7&#xA;10  11&#xA;</code></pre>&#xA;&#xA;<p>so now let's figure out the indices of each layer, assume we always work with the outermost layer, we are doing</p>&#xA;&#xA;<pre><code>[0,0] -&gt; [0,n-1], [0,n-1] -&gt; [n-1,n-1], [n-1,n-1] -&gt; [n-1,0], and [n-1,0] -&gt; [0,0]&#xA;[0,1] -&gt; [1,n-1], [1,n-2] -&gt; [n-1,n-2], [n-1,n-2] -&gt; [n-2,0], and [n-2,0] -&gt; [0,1]&#xA;[0,2] -&gt; [2,n-2], [2,n-2] -&gt; [n-1,n-3], [n-1,n-3] -&gt; [n-3,0], and [n-3,0] -&gt; [0,2]&#xA;</code></pre>&#xA;&#xA;<p>so on and so on&#xA;until we are halfway through the edge</p>&#xA;&#xA;<p>so in general the pattern is </p>&#xA;&#xA;<pre><code>[0,i] -&gt; [i,n-i], [i,n-i] -&gt; [n-1,n-(i+1)], [n-1,n-(i+1)] -&gt; [n-(i+1),0], and [n-(i+1),0] to [0,i]&#xA;</code></pre>&#xA;"
20202797,2,42519,"2013-11-25 20:37:33",0,NULL,"<p>It is not possible to do it quicker than O(n^2) for in place rotation, for the reason that if we want to rotate the matrix, we have to touch all the n^2 element at least once, no matter what algorithm you are implementing.</p>&#xA;"
21265476,2,42519,"2014-01-21 17:47:50",1,NULL,"<p>O(1) Space</p>&#xA;&#xA;<pre><code>public void rotate(int[][] matrix){&#xA;    int n=matrix.length;&#xA;    for(int i=0; i&lt;n/2; i++){&#xA;        int first=i;&#xA;        int last=n-1-i;&#xA;        for(int j=first; j&lt;last; j++){&#xA;            int top = matrix[first][j]; &#xA;             matrix[first][j]=matrix[last-j][first];&#xA;             matrix[last-j][first]=matrix[last][last-j];&#xA;             matrix[last][last - j]=matrix[j][last];&#xA;             matrix[j][last]=top;&#xA;&#xA;        }&#xA;    }&#xA;&#xA;}&#xA;</code></pre>&#xA;"
21977882,2,42519,"2014-02-24 02:29:51",0,NULL,"<p>Here is a recursive PHP way:</p>&#xA;&#xA;<pre><code>$m = array();&#xA;            $m[0] = array('a', 'b', 'c');&#xA;            $m[1] = array('d', 'e', 'f');&#xA;            $m[2] = array('g', 'h', 'i');&#xA;            $newMatrix = array();&#xA;&#xA;            function rotateMatrix($m, $i = 0, &amp;$newMatrix)&#xA;            {&#xA;                foreach ($m as $chunk) {&#xA;                    $newChunk[] = $chunk[$i];&#xA;                }&#xA;                $newMatrix[] = array_reverse($newChunk);&#xA;                $i++;&#xA;&#xA;                if ($i &lt; count($m)) {&#xA;                    rotateMatrix($m, $i, $newMatrix);&#xA;                }&#xA;            }&#xA;&#xA;            rotateMatrix($m, 0, $newMatrix);&#xA;            echo '&lt;pre&gt;';&#xA;            var_dump($newMatrix);&#xA;            echo '&lt;pre&gt;';&#xA;</code></pre>&#xA;"
22858585,2,42519,"2014-04-04 09:19:05",0,NULL,"<p>My version of rotation:</p>&#xA;&#xA;<pre><code>void rotate_matrix(int *matrix, int size)&#xA;{&#xA;&#xA;int result[size*size];&#xA;&#xA;    for (int i = 0; i &lt; size; ++i)&#xA;        for (int j = 0; j &lt; size; ++j)&#xA;            result[(size - 1 - i) + j*size] = matrix[i*size+j];&#xA;&#xA;    for (int i = 0; i &lt; size*size; ++i)&#xA;        matrix[i] = result[i];&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>In it we change last column to first row and so further. It is may be not optimal but clear for understanding.</p>&#xA;"
23486371,2,42519,"2014-05-06 05:09:02",0,NULL,"<p><strong>For Novice programmers, in plain C++ . (Borland stuff)</strong>   </p>&#xA;&#xA;<pre><code>#include&lt;iostream.h&gt;&#xA;#include&lt;conio.h&gt;&#xA;&#xA;int main()&#xA;{&#xA;    clrscr();&#xA;&#xA;    int arr[10][10];        // 2d array that holds input elements &#xA;    int result[10][10];     //holds result&#xA;&#xA;    int m,n;                //rows and columns of arr[][]&#xA;    int x,y;                //rows and columns of result[][]&#xA;&#xA;    int i,j;                //loop variables&#xA;    int t;                  //temporary , holds data while conversion&#xA;&#xA;    cout&lt;&lt;&quot;Enter no. of rows and columns of array: &quot;;&#xA;    cin&gt;&gt;m&gt;&gt;n;&#xA;    cout&lt;&lt;&quot;\nEnter elements of array: \n\n&quot;;&#xA;    for(i = 0; i &lt; m; i++)&#xA;    {&#xA;        for(j = 0; j&lt;n ; j++)&#xA;        {&#xA;          cin&gt;&gt;arr[i][j];         // input array elements from user&#xA;        }&#xA;    }&#xA;&#xA;&#xA;   //rotating matrix by +90 degrees&#xA;&#xA;    x = n ;                      //for non-square matrix&#xA;    y = m ;     &#xA;&#xA;    for(i = 0; i &lt; x; i++)&#xA;    {  t = m-1;                     // to create required array bounds&#xA;       for(j = 0; j &lt; y; j++)&#xA;       {&#xA;          result[i][j] = arr[t][i];&#xA;          t--;&#xA;       }&#xA;   }&#xA;&#xA;   //print result&#xA;&#xA;   cout&lt;&lt;&quot;\nRotated matrix is: \n\n&quot;;&#xA;   for(i = 0; i &lt; x; i++)&#xA;   {&#xA;       for(j = 0; j &lt; y; j++)&#xA;       {&#xA;             cout&lt;&lt;result[i][j]&lt;&lt;&quot; &quot;;&#xA;       }&#xA;       cout&lt;&lt;&quot;\n&quot;;&#xA;   }&#xA;&#xA;   getch();&#xA;   return 0;&#xA;}&#xA;</code></pre>&#xA;"
24356420,2,42519,"2014-06-22 22:36:55",0,NULL,"<pre><code>#!/usr/bin/env python&#xA;&#xA;original = [ [1,2,3],&#xA;             [4,5,6],&#xA;             [7,8,9] ]&#xA;&#xA;# Rotate matrix 90 degrees...&#xA;for i in map(None,*original[::-1]):&#xA;    print str(i) + '\n'&#xA;</code></pre>&#xA;&#xA;<p>This causes the sides to be rotated 90 degrees (ie. 123 (top side) is now 741 (left side).</p>&#xA;&#xA;<p>This Python solution works because it uses slicing with a negative step to reverse the row orders (bringing 7 to top)</p>&#xA;&#xA;<pre><code>original = [ [7,8,9],&#xA;             [4,5,6],&#xA;             [1,2,3] ]&#xA;</code></pre>&#xA;&#xA;<ul>&#xA;<li><p>It then uses map (along with the implied identity function which is the result of map with None as first arg) along with * to unpack all elements in sequence, to regroup the columns (ie. the first elements are put in a tuple together, the 2nd elements are put in a tuple together, and so forth). You effectively get get returned the following regrouping:</p>&#xA;&#xA;<p><code>original = [[7,8,9],&#xA;             [4,5,6],&#xA;             [1,2,3]]&#xA;</code></p></li>&#xA;</ul>&#xA;"
26180084,2,42519,"2014-10-03 13:41:41",0,NULL,"<p><strong>PHP:</strong></p>&#xA;&#xA;<pre><code>array_unshift($array, null);&#xA;$array = call_user_func_array(&quot;array_map&quot;, $array);&#xA;</code></pre>&#xA;&#xA;<p>If you need to rotate rectangular two-dimension array on 90 degree, add the following line before or after (depending on the rotation direction you need) the code above:</p>&#xA;&#xA;<pre><code>$array = array_reverse($array);&#xA;</code></pre>&#xA;"
26320746,2,42519,"2014-10-12 00:47:57",1,NULL,"<p>From a linear point of view, consider the matrices:</p>&#xA;&#xA;<pre><code>    1 2 3        0 0 1&#xA;A = 4 5 6    B = 0 1 0&#xA;    7 8 9        1 0 0&#xA;</code></pre>&#xA;&#xA;<p>Now take A transpose</p>&#xA;&#xA;<pre><code>     1 4 7&#xA;A' = 2 5 8&#xA;     3 6 9&#xA;</code></pre>&#xA;&#xA;<p>And consider the action of A' on B, or B on A'.<br>&#xA;Respectively:</p>&#xA;&#xA;<pre><code>      7 4 1          3 6 9&#xA;A'B = 8 5 2    BA' = 2 5 8&#xA;      9 6 3          1 4 7&#xA;</code></pre>&#xA;&#xA;<p>This is expandable for any n x n matrix.&#xA;And applying this concept quickly in code:</p>&#xA;&#xA;<pre><code>void swapInSpace(int** mat, int r1, int c1, int r2, int c2)&#xA;{&#xA;    mat[r1][c1] ^= mat[r2][c2];&#xA;    mat[r2][c2] ^= mat[r1][c1];&#xA;    mat[r1][c1] ^= mat[r2][c2];&#xA;}&#xA;&#xA;void transpose(int** mat, int size)&#xA;{&#xA;    for (int i = 0; i &lt; size; i++)&#xA;    {&#xA;        for (int j = (i + 1); j &lt; size; j++)&#xA;        {&#xA;            swapInSpace(mat, i, j, j, i);&#xA;        }&#xA;    }&#xA;}&#xA;&#xA;void rotate(int** mat, int size)&#xA;{&#xA;    //Get transpose&#xA;    transpose(mat, size);&#xA;&#xA;    //Swap columns&#xA;    for (int i = 0; i &lt; size / 2; i++)&#xA;    {&#xA;        for (int j = 0; j &lt; size; j++)&#xA;        {&#xA;            swapInSpace(mat, i, j, size - (i + 1), j);&#xA;        }&#xA;    }&#xA;}&#xA;</code></pre>&#xA;"
26374543,2,42519,"2014-10-15 04:35:42",2,NULL,"<p>There are a lot of answers already, and I found two claiming O(1) time complexity. The <strong>real</strong> O(1) algorithm is to leave the array storage untouched, and change how you index its elements. The goal here is that it does not consume additional memory, nor does it require additional time to iterate the data.</p>&#xA;&#xA;<p>Rotations of 90, -90 and 180 degrees are simple transformations which can be performed as long as you know how many rows and columns are in your 2D array; To rotate any vector by 90 degrees, swap the axes and negate the Y axis. For -90 degree, swap the axes and negate the X axis. For 180 degrees, negate both axes without swapping.</p>&#xA;&#xA;<p>Further transformations are possible, such as mirroring horizontally and/or vertically by negating the axes independently.</p>&#xA;&#xA;<p>This can be done through e.g. an accessor method. The examples below are JavaScript functions, but the concepts apply equally to all languages.</p>&#xA;&#xA;<pre class=&quot;lang-js prettyprint-override&quot;><code>// Get an array element in column/row order&#xA;function getArray2d(a, x, y) {&#xA;   return a[y][x]; &#xA;}&#xA;&#xA;// Get an array element rotated 90 degrees clockwise&#xA;function getArray2dCW(a, x, y) {&#xA;    var t = x;&#xA;    x = y;&#xA;    y = a.length - t - 1;&#xA;    return a[y][x];&#xA;}&#xA;&#xA;// Get an array element rotated 90 degrees counter-clockwise&#xA;function getArray2dCCW(a, x, y) {&#xA;    var t = x;&#xA;    x = a[0].length - y - 1;&#xA;    y = t;&#xA;    return a[y][x];&#xA;}&#xA;&#xA;// Get an array element rotated 180 degrees&#xA;function getArray2d180(a, x, y) {&#xA;    x = a[0].length - x - 1;&#xA;    y = a.length - y - 1;&#xA;    return a[y][x];&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>This code assumes an array of nested arrays, where each inner array is a row.</p>&#xA;&#xA;<p>The method allows you to read (or write) elements (even in random order) as if the array has been rotated or transformed. Now just pick the right function to call, probably by reference, and away you go!</p>&#xA;&#xA;<p>The concept can be extended to apply transformations additively (and non-destructively) through the accessor methods. Including arbitrary angle rotations and scaling.</p>&#xA;"
27161656,2,42519,"2014-11-27 01:24:27",0,NULL,"<p>JavaScript solution to rotate matrix by 90 degrees in place:</p>&#xA;&#xA;<pre><code>function rotateBy90(m) {&#xA;  var length = m.length;&#xA;  //for each layer of the matrix&#xA;  for (var first = 0; first &lt; length &gt;&gt; 1; first++) {&#xA;    var last = length - 1 - first;&#xA;    for (var i = first; i &lt; last; i++) {&#xA;      var top = m[first][i]; //store top&#xA;      m[first][i] = m[last - i][first]; //top = left&#xA;      m[last - i][first] = m[last][last - i]; //left = bottom&#xA;      m[last][last - i] = m[i][last]; //bottom = right&#xA;      m[i][last] = top; //right = top&#xA;    }&#xA;  }&#xA;  return m;&#xA;}&#xA;</code></pre>&#xA;"
28610081,2,42519,"2015-02-19 15:22:53",0,NULL,"<p>C# code to rotate [n,m] 2D arrays 90 deg right</p>&#xA;&#xA;<pre><code>using System;&#xA;using System.Collections.Generic;&#xA;using System.Linq;&#xA;using System.Text;&#xA;using System.Threading.Tasks;&#xA;&#xA;namespace MatrixProject&#xA;{&#xA;    // mattrix class&#xA;&#xA;    class Matrix{&#xA;        private int rows;&#xA;        private int cols;&#xA;        private int[,] matrix;&#xA;&#xA;        public Matrix(int n){&#xA;            this.rows = n;&#xA;            this.cols = n;&#xA;            this.matrix = new int[this.rows,this.cols];&#xA;&#xA;        }&#xA;&#xA;        public Matrix(int n,int m){&#xA;            this.rows = n;&#xA;            this.cols = m;&#xA;&#xA;            this.matrix = new int[this.rows,this.cols];&#xA;        }&#xA;&#xA;        public void Show()&#xA;        {&#xA;            for (var i = 0; i &lt; this.rows; i++)&#xA;            {&#xA;                for (var j = 0; j &lt; this.cols; j++) {&#xA;                    Console.Write(&quot;{0,3}&quot;, this.matrix[i, j]);&#xA;                }&#xA;                Console.WriteLine();&#xA;            }                &#xA;        }&#xA;&#xA;        public void ReadElements()&#xA;        {&#xA;           for (var i = 0; i &lt; this.rows; i++)&#xA;                for (var j = 0; j &lt; this.cols; j++)&#xA;                {&#xA;                    Console.Write(&quot;element[{0},{1}]=&quot;,i,j);&#xA;                    this.matrix[i, j] = Convert.ToInt32(Console.ReadLine());&#xA;                }            &#xA;        }&#xA;&#xA;&#xA;        // rotate [n,m] 2D array by 90 deg right&#xA;        public void Rotate90DegRight()&#xA;        {&#xA;&#xA;            // create a mirror of current matrix&#xA;            int[,] mirror = this.matrix;&#xA;&#xA;            // create a new matrix&#xA;            this.matrix = new int[this.cols, this.rows];&#xA;&#xA;            for (int i = 0; i &lt; this.rows; i++)&#xA;            {&#xA;                for (int j = 0; j &lt; this.cols; j++)&#xA;                {&#xA;                    this.matrix[j, this.rows - i - 1] = mirror[i, j];&#xA;                }&#xA;            }&#xA;&#xA;            // replace cols count with rows count&#xA;            int tmp = this.rows;&#xA;            this.rows = this.cols;&#xA;            this.cols = tmp;           &#xA;        }&#xA;    }&#xA;&#xA;    class Program&#xA;    {&#xA;        static void Main(string[] args)&#xA;        {&#xA;            Matrix myMatrix = new Matrix(3,4);&#xA;            Console.WriteLine(&quot;Enter matrix elements:&quot;);&#xA;            myMatrix.ReadElements();&#xA;            Console.WriteLine(&quot;Matrix elements are:&quot;);&#xA;            myMatrix.Show();&#xA;            myMatrix.Rotate90DegRight();&#xA;            Console.WriteLine(&quot;Matrix rotated at 90 deg are:&quot;);&#xA;            myMatrix.Show();&#xA;            Console.ReadLine();&#xA;        }&#xA;    }&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>Result:</p>&#xA;&#xA;<pre><code>    Enter matrix elements:&#xA;    element[0,0]=1&#xA;    element[0,1]=2&#xA;    element[0,2]=3&#xA;    element[0,3]=4&#xA;    element[1,0]=5&#xA;    element[1,1]=6&#xA;    element[1,2]=7&#xA;    element[1,3]=8&#xA;    element[2,0]=9&#xA;    element[2,1]=10&#xA;    element[2,2]=11&#xA;    element[2,3]=12&#xA;    Matrix elements are:&#xA;      1  2  3  4&#xA;      5  6  7  8&#xA;      9 10 11 12&#xA;    Matrix rotated at 90 deg are:&#xA;      9  5  1&#xA;     10  6  2&#xA;     11  7  3&#xA;     12  8  4&#xA;</code></pre>&#xA;"
43636,2,43632,"2008-09-04 12:35:26",55,NULL,"<p>Perl lets you make part of your regular expression case-insensitive by using the (?i:) pattern modifier.</p>&#xA;&#xA;<p>Modern regex flavors allow you to apply modifiers to only part of the regular expression. If you insert the modifier (?ism) in the middle of the regex, the modifier only applies to the part of the regex to the right of the modifier. You can turn off modes by preceding them with a minus sign. All modes after the minus sign will be turned off. E.g. (?i-sm) turns on case insensitivity, and turns off both single-line mode and multi-line mode.</p>&#xA;&#xA;<p>Not all regex flavors support this. JavaScript and Python apply all mode modifiers to the entire regular expression. They don't support the (?-ismx) syntax, since turning off an option is pointless when mode modifiers apply to the whole regular expressions. All options are off by default.</p>&#xA;&#xA;<p>You can quickly test how the regex flavor you're using handles mode modifiers. The regex (?i)te(?-i)st should match test and TEst, but not teST or TEST.</p>&#xA;&#xA;<p><a href=&quot;http://www.regular-expressions.info/modifiers.html&quot;>Source</a></p>&#xA;"
43641,2,43632,"2008-09-04 12:37:31",4,NULL,"<p>You could use </p>&#xA;&#xA;<pre><code>(?:F|f)(?:O|o)(?:O|o)&#xA;</code></pre>&#xA;&#xA;<p>The ?: in the brackets in .Net means it's non-capturing, and just used to group the terms of the | (or) statement.</p>&#xA;"
43654,2,43632,"2008-09-04 12:41:20",4,NULL,"<p>What language are you using?  A standard way to do this would be something like /([Ff][Oo]{2}|BAR)/ with case sensitivity on, but in Java, for example, there is a case sensitivity modifier (?i) which makes all characters to the right of it case insensitive and (?-i) which forces sensitivity.  An example of that Java regex modifier can be found <a href=&quot;http://exampledepot.com/egs/java.util.regex/Case.html&quot; rel=&quot;nofollow&quot;>here</a>.</p>&#xA;"
43655,2,43632,"2008-09-04 12:41:45",3,NULL,"<p>Unfortunately syntax for case-insensitive matching is not common. &#xA;In .NET you can use RegexOptions.IgnoreCase flag or <strong>?i</strong> modifier</p>&#xA;"
45612,2,45604,"2008-09-05 12:05:25",11,NULL,"<blockquote>&#xA;  <p>Why doesn't C# support this class level generic type inference?</p>&#xA;</blockquote>&#xA;&#xA;<p>Because they're generally ambiguous. By contrast, type inference is trivial for function calls (if all types appear in arguments). But in the case of constructor calls (glorified functions, for the sake of discussion), the compiler has to resolve multiple levels at the same time. One level is the class level and the other is the constructor arguments level. I believe solving this is algorithmically non-trivial. Intuitively, I'd say it's even NP-complete.</p>&#xA;&#xA;<p>To illustrate an extreme case where resolution is impossible, imagine the following class and tell me what the compiler should do:</p>&#xA;&#xA;<pre><code>class Foo&lt;T&gt; {&#xA;    public Foo&lt;U&gt;(U x) { }&#xA;}&#xA;&#xA;var x = new Foo(1);&#xA;</code></pre>&#xA;"
45706,2,45604,"2008-09-05 12:48:42",2,NULL,"<p>Thanks Konrad, that's a good response (+1), but just to expand on it.</p>&#xA;&#xA;<p>Let's pretend that C# has an explicit constructor function:</p>&#xA;&#xA;<pre><code>//your example&#xA;var x = new Foo( 1 );&#xA;&#xA;//becomes&#xA;var x = Foo.ctor( 1 );&#xA;&#xA;//your problem is valid because this would be&#xA;var x = Foo&lt;T&gt;.ctor&lt;int&gt;( 1 );&#xA;//and T can't be inferred&#xA;</code></pre>&#xA;&#xA;<p>You're quite right that the first constructor can't be inferred.</p>&#xA;&#xA;<p>Now let's go back to the class</p>&#xA;&#xA;<pre><code>class Foo&lt;T&gt; &#xA;{&#xA;    //&lt;T&gt; can't mean anything else in this context&#xA;    public Foo(T x) { }&#xA;}&#xA;&#xA;//this would now throw an exception unless the&#xA;//typeparam matches the parameter&#xA;var x = Foo&lt;int&gt;.ctor( 1 );&#xA;&#xA;//so why wouldn't this work?&#xA;var x = Foo.ctor( 1 );&#xA;</code></pre>&#xA;&#xA;<p>Of course, if I add your constructor back in (with its alternate type) we have an ambiguous call - exactly as if a normal method overload couldn't be resolved.</p>&#xA;"
45728,2,45604,"2008-09-05 12:58:06",20,NULL,"<p>Actually, your question isn't bad. I've been toying with a generic programming language for last few years and although I've never come around to actually develop it (and probably never will), I've thought a lot about generic type inference and one of my top priorities has always been to allow the construction of classes without having to specify the generic type.</p>&#xA;&#xA;<p>C# simply lacks the set of rules to make this possible. I think the developers never saw the neccesity to include this. Actually, the following code would be very near to your proposition and solve the problem. All C# needs is an added syntax support.</p>&#xA;&#xA;<pre><code>class Foo&lt;T&gt; {&#xA;    public Foo(T x) { … }&#xA;}&#xA;&#xA;// Notice: non-generic class overload. Possible in C#!&#xA;class Foo {&#xA;    public static Foo&lt;T&gt; ctor&lt;T&gt;(T x) { return new Foo&lt;T&gt;(x); }&#xA;}&#xA;&#xA;var x = Foo.ctor(42);&#xA;</code></pre>&#xA;&#xA;<p>Since this code actually works, we've shown that the problem is not one of semantics but simply one of lacking support. I guess I have to take back my previous posting. ;-)</p>&#xA;"
47529,2,47521,"2008-09-06 15:01:36",2,NULL,"<p>Connection will be closed automatically since you're using it inside &quot;using&quot; block.</p>&#xA;"
47699,2,47521,"2008-09-06 18:10:17",0,NULL,"<p>Judging from <a href=&quot;http://blogs.msdn.com/oldnewthing/archive/2008/08/12/8849519.aspx&quot; rel=&quot;nofollow&quot;>this technical explanation</a>, your code will not work as expected, but abort on the second item, because the connection was already closed when returning the first item.</p>&#xA;&#xA;<p>@<a href=&quot;#47746&quot; rel=&quot;nofollow&quot;>Joel Gauvreau </a>: Yes, I should have read on. <a href=&quot;http://blogs.msdn.com/oldnewthing/archive/2008/08/14/8862242.aspx&quot; rel=&quot;nofollow&quot;>Part 3</a> of this series explains that the compiler adds special handling for finally blocks to trigger only at the <em>real</em> end.</p>&#xA;"
47746,2,47521,"2008-09-06 19:10:12",2,NULL,"<p>From the simple test I have tried, aku is right, dispose is called as soon as the foreach block exit.  </p>&#xA;&#xA;<p>@<a href=&quot;#47699&quot; rel=&quot;nofollow&quot;>David </a>: However call stack is kept between call, so the connection would not be closed because on the next call we would return to the next instruction after the yield, which is the while block.</p>&#xA;&#xA;<p>My understanding is that when the iterator is disposed, the connection would also be disposed with it. I also think that the Connection.Close would not be needed because it would be taken care of when the object is disposed because of the using clause.</p>&#xA;&#xA;<p>Here is a simple program I tried to test the behavior...</p>&#xA;&#xA;<pre><code>class Program&#xA;{&#xA;    static void Main(string[] args)&#xA;    {&#xA;        foreach (int v in getValues())&#xA;        {&#xA;            Console.WriteLine(v);&#xA;        }&#xA;        Console.ReadKey();&#xA;&#xA;        foreach (int v in getValues())&#xA;        {&#xA;            Console.WriteLine(v);&#xA;            break;&#xA;        }&#xA;        Console.ReadKey();&#xA;    }&#xA;&#xA;    public static IEnumerable&lt;int&gt; getValues()&#xA;    {&#xA;        using (TestDisposable t = new TestDisposable())&#xA;        {&#xA;            for(int i = 0; i&lt;10; i++)&#xA;                yield return t.GetValue();&#xA;        }&#xA;    }&#xA;}&#xA;&#xA;public class TestDisposable : IDisposable&#xA;{&#xA;    private int value;&#xA;&#xA;    public void Dispose()&#xA;    {&#xA;        Console.WriteLine(&quot;Disposed&quot;);&#xA;    }&#xA;&#xA;    public int GetValue()&#xA;    {&#xA;        value += 1;&#xA;        return value;&#xA;    }&#xA;}&#xA;</code></pre>&#xA;"
47799,2,47521,"2008-09-06 20:15:18",9,NULL,"<p>The Iterator that the compiler synthesises implements IDisposable, which foreach calls when the foreach loop is exited.</p>&#xA;&#xA;<p>The Iterator's Dispose() method will clean up the using statements on early exit.</p>&#xA;&#xA;<p>As long as you use the iterator in a foreach loop, using() block, or call the Dispose() method in some other way, the cleanup of the Iterator will happen.</p>&#xA;"
48222,2,48211,"2008-09-07 07:31:48",1,NULL,"<p>I am incredibly surprised at the accuracy of <a href=&quot;http://depython.net&quot; rel=&quot;nofollow&quot;>depython.net</a></p>&#xA;&#xA;<p>What I think they do is use the dis module and reconstruct your code with it. You'll have to find a way to do that or someone who has written the algorithm already.</p>&#xA;"
48549,2,48211,"2008-09-07 16:14:51",4,NULL,"<p>I've used decompyle (the Ubuntu package, not the online service, I don't know if they're the same thing, though) in the past and was more than satisfied with the results. It saved me hours of work after a <code>rm *.py</code> instead of <code>rm *.pyc</code>.</p>&#xA;"
48696,2,48211,"2008-09-07 19:20:43",3,NULL,"<p>Here is a little more info on <code>decompyle</code>: this is the same software that became the commercial <a href=&quot;http://www.crazy-compilers.com/decompyle/&quot; rel=&quot;nofollow&quot;>decompyle service</a>. It used to be open source and an old version of it is available/maintained as <a href=&quot;http://packages.debian.org/unstable/python/decompyle&quot; rel=&quot;nofollow&quot;>a debian package</a> (including source code). </p>&#xA;&#xA;<p>It will decompile Python up to version 2.3, but not 2.4+. </p>&#xA;"
194063,2,48211,"2008-10-11 13:16:37",15,NULL,"<p>As others said, the free version of decompyle only works up to 2.3. But sometimes you can get it to work by converting your newer pyc to the old marshalling format.</p>&#xA;&#xA;<p>The following script takes two arguments, the input and the output file, and converts it into something which decompyle will at least try its teeth on.</p>&#xA;&#xA;<pre><code>#!/usr/bin/python&#xA;import marshal&#xA;import sys&#xA;&#xA;MAGIC23 = ';\xf2\r\n'&#xA;&#xA;def load_pyc(filename):&#xA;        f = open(filename, 'rb')&#xA;        try:&#xA;                magic = f.read(4)&#xA;                timestamp = f.read(4)&#xA;                codeobject = marshal.load(f)&#xA;        finally:&#xA;                f.close()&#xA;                return magic, timestamp, codeobject&#xA;&#xA;def dump_pyc_23(filename, timestamp, codeobject):&#xA;        assert len(timestamp)==4&#xA;        f = open(filename, 'wb')&#xA;        try:&#xA;                f.write(MAGIC23)&#xA;                f.write(timestamp)&#xA;                marshal.dump(codeobject, f, 0)&#xA;        finally:&#xA;                f.close()&#xA;&#xA;magic, timestamp, codeobject = load_pyc(sys.argv[1])&#xA;dump_pyc_23(sys.argv[2], timestamp, codeobject)&#xA;</code></pre>&#xA;&#xA;<p>Good Luck!</p>&#xA;"
1163234,2,48211,"2009-07-22 05:39:19",3,NULL,"<p>There is a fork of decompyle called <a href=&quot;http://sourceforge.net/projects/unpyc/&quot; rel=&quot;nofollow&quot;>unpyc</a> that has seen some activity recently. I tried using it with some pyc files but it didn't work with them.</p>&#xA;"
1238074,2,48211,"2009-08-06 10:19:53",5,NULL,"<p>I have a good experience with <a href=&quot;http://sourceforge.net/projects/unpyc/&quot; rel=&quot;nofollow&quot;>UnPyc</a> — it perfectly recovered my Django models.py.</p>&#xA;"
1681491,2,48211,"2009-11-05 15:57:25",4,NULL,"<p>You don't want an online service but depython.com is a good Python decompile service. Give it a try.</p>&#xA;"
7474393,2,48211,"2011-09-19 16:45:15",42,NULL,"<p>This saved my life once: <a href=&quot;https://github.com/wibiti/uncompyle2&quot;>https://github.com/wibiti/uncompyle2</a> </p>&#xA;&#xA;<p>Hope it helps </p>&#xA;"
8243267,2,48211,"2011-11-23 13:48:07",4,NULL,"<p>For others ever in this regrettable situation I can confirm that uncompyle2 now works with Python 2.7 (and only 2.7 it seems at this time) and just saved me from a nasty accident (and yes, I should have been using source control).</p>&#xA;"
49016,2,49002,"2008-09-08 02:09:31",176,NULL,"<p>Think of containment as a <strong>has a</strong> relationship. A car &quot;has an&quot; engine, a person &quot;has a&quot; name, etc.</p>&#xA;&#xA;<p>Think of inheritance as an <strong>is a</strong> relationship. A car &quot;is a&quot; vehicle, a person &quot;is a&quot; mammal, etc.</p>&#xA;&#xA;<p>I take no credit for this approach. I took it straight from the <a href=&quot;http://rads.stackoverflow.com/amzn/click/0735619670&quot;>Second Edition of Code Complete</a> by <a href=&quot;http://blogs.construx.com/blogs/stevemcc/default.aspx&quot;>Steve McConnell</a>, <em>Section 6.3</em>.</p>&#xA;"
49037,2,49002,"2008-09-08 02:25:16",30,NULL,"<p>In Java or C#, an object cannot change its type once it has been instantiated.</p>&#xA;&#xA;<p>So, if your object need to appear as a different object or behave differently depending on an object state or conditions, then use <strong>Composition</strong>: Refer to <a href=&quot;http://www.dofactory.com/Patterns/PatternState.aspx&quot;>State</a> and <a href=&quot;http://www.dofactory.com/Patterns/PatternStrategy.aspx&quot;>Strategy</a> Design Patterns.</p>&#xA;&#xA;<p>If the object need to be of the same type, then use <strong>Inheritance</strong> or implement interfaces.</p>&#xA;"
49041,2,49002,"2008-09-08 02:29:19",14,NULL,"<p>Inheritance is very powerful, but you can't force it (see: the <a href=&quot;http://en.wikipedia.org/wiki/Circle-ellipse_problem&quot;>circle-ellipse problem</a>). If you really can't be completely sure of a true &quot;is-a&quot; subtype relationship, then it's best to go with composition.</p>&#xA;"
49070,2,49002,"2008-09-08 02:48:50",51,NULL,"<p>Another, very pragmatic reason, to prefer composition over inheritance has to do with your domain model, and mapping it to a relational database. It's really hard to map inheritance to the SQL model (you end up with all sorts of hacky workarounds, like creating columns that aren't always used, using views, etc). Some ORMLs try to deal with this, but it always gets complicated quickly. Composition can be easily modeled through a foreign-key relationship between two tables, but inheritance is much harder.</p>&#xA;"
49090,2,49002,"2008-09-08 03:00:09",4,NULL,"<p>Aside from is a/has a considerations, one must also consider the &quot;depth&quot; of inheritance your object has to go through. Anything beyond five or six levels of inheritance deep might cause unexpected casting and boxing/unboxing problems, and in those cases it might be wise to compose your object instead.</p>&#xA;"
53354,2,49002,"2008-09-10 03:04:26",651,NULL,"<p><em>Prefer composition over inheritance as it is more malleable / easy to modify later, but do not use a compose-always approach.</em> With composition, it's easy to change behavior on the fly with Dependency Injection / Setters. Inheritance is more rigid as most languages do not allow you to derive from more than one type.. So the goose is more or less cooked once you derive from Class A.<br>&#xA;My acid test for the above is:  </p>&#xA;&#xA;<ul>&#xA;<li>Does TypeB want to expose the complete interface (all public methods no less) of TypeA such that TypeB can be used where TypeA is expected? Indicates <strong>Inheritance</strong>. </li>&#xA;</ul>&#xA;&#xA;<p>e.g. A Cessna biplane will expose the complete interface of an airplane, if not more. So that makes it fit to derive from Airplane. </p>&#xA;&#xA;<ul>&#xA;<li>Does TypeB only want only some/part of the behavior exposed by TypeA? Indicates need for <strong>Composition.</strong>   </li>&#xA;</ul>&#xA;&#xA;<p>e.g. A Bird may need only the fly behavior of an Airplane. In this case, it makes sense to extract it out as an interface / class / both and make it a member of both classes.</p>&#xA;&#xA;<p><strong>Update:</strong> Just came back to my answer and it seems now that it is incomplete without a specific mention of Barbara Liskov's <a href=&quot;http://en.wikipedia.org/wiki/Liskov_substitution_principle&quot;>Liskov Substitution Principle</a> as a test for 'Should I be inheriting from this type?'</p>&#xA;"
832554,2,49002,"2009-05-07 01:43:41",4,NULL,"<p>When you want to &quot;copy&quot;/Expose the base class' API, you use inheritance. When you only want to &quot;copy&quot; functionality, use delegation.</p>&#xA;&#xA;<p>One example of this: You want to create a Stack out of a List. Stack only has pop, push and peek. You shouldn't use inheritance given that you don't want push_back, push_front, removeAt, et al.-kind of functionality in a Stack.</p>&#xA;"
842089,2,49002,"2009-05-08 22:29:06",39,NULL,"<p>While in short words I would agree with &quot;Prefer composition over inheritance&quot;, very often for me it sounds like &quot;prefer potatoes over coca-cola&quot;. There are places for inheritance and places for composition. You need to understand difference, then this question will disappear. What it really means for me is &quot;if you are going to use inheritance - think again, chances are you need composition&quot;.</p>&#xA;&#xA;<p>You should prefer potatoes over coca cola when you want to eat, and coca cola over potatoes when you want to drink.</p>&#xA;&#xA;<p>Creating a subclass should mean more than just a convenient way to call superclass methods. You should use inheritance when subclass &quot;is-a&quot; super class both structurally and functionally, when it can be used as superclass and you are going to use that. If it is not the case - it is not inheritance, but something else. Composition is when your objects consists of another, or has some relationship to them.</p>&#xA;&#xA;<p>So for me it looks like if someone does not know if he needs inheritance or composition, the real problem is that he does not know if he want to drink or to eat. Think about your problem domain more, understand it better.</p>&#xA;"
891820,2,49002,"2009-05-21 07:54:55",98,NULL,"<p>If you understand the difference, it's easier to explain.</p>&#xA;&#xA;<h2>Procedural Code</h2>&#xA;&#xA;<p>An example of this is PHP without the use of classes (particularly before PHP5). All logic is encoded in a set of functions. You may include other files containing helper functions and so on and conduct your business logic by passing data around in functions. This can be very hard to manage as the application grows. PHP5 tries to remedy this by offering more object oriented design.</p>&#xA;&#xA;<h2>Inheritance</h2>&#xA;&#xA;<p>This encourages the use of classes. Inheritance is one of the three tenets of OO design (inheritance, polymorphism, encapsulation).</p>&#xA;&#xA;<pre><code>class Person {&#xA;   String Title;&#xA;   String Name;&#xA;   Int Age&#xA;}&#xA;&#xA;class Employee : Person {&#xA;   Int Salary;&#xA;   String Title;&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>This is inheritance at work. The Employee &quot;is a&quot; Person or inherits from Person. All inheritance relationships are &quot;is-a&quot; relationships. Employee also shadows the Title property from Person, meaning Employee.Title will return the Title for the Employee not the Person.</p>&#xA;&#xA;<h2>Composition</h2>&#xA;&#xA;<p>Composition is favoured over inheritance. To put it very simply you would have:</p>&#xA;&#xA;<pre><code>class Person {&#xA;   String Title;&#xA;   String Name;&#xA;   Int Age;&#xA;&#xA;   public Person(String title, String name, String age) {&#xA;      this.Title = title;&#xA;      this.Name = name;&#xA;      this.Age = age;&#xA;   }&#xA;&#xA;}&#xA;&#xA;class Employee {&#xA;   Int Salary;&#xA;   private Person person;&#xA;&#xA;   public Employee(Person p, Int salary) {&#xA;       this.person = p;&#xA;       this.Salary = salary;&#xA;   }&#xA;}&#xA;&#xA;Person johnny = new Person (&quot;Mr.&quot;, &quot;John&quot;, 25);&#xA;Employee john = new Employee (johnny, 50000);&#xA;</code></pre>&#xA;&#xA;<p>Composition is typically &quot;has a&quot; or &quot;uses a&quot; relationship. Here the Employee class has a Person. It does not inherit from Person but instead gets the Person object passed to it, which is why it &quot;has a&quot; Person.</p>&#xA;&#xA;<h2>Composition over Inheritance</h2>&#xA;&#xA;<p>Now say you want to create a Manager type so you end up with:</p>&#xA;&#xA;<pre><code>class Manager : Person, Employee {&#xA;   ...&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>This example will work fine, however, what if Person and Employee both declared <code>Title</code>? Should Manager.Title return &quot;Manager of Operations&quot; or &quot;Mr.&quot;? Under composition this ambiguity is better handled:</p>&#xA;&#xA;<pre><code>Class Manager {&#xA;   public Title;&#xA;   public Manager(Person p, Employee e)&#xA;   {&#xA;      this.Title = e.Title;&#xA;   }&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>The Manager object is composed as an Employee and a Person. The Title behaviour is taken from employee. This explicit composition removes ambiguity among other things and you'll encounter fewer bugs.</p>&#xA;"
891854,2,49002,"2009-05-21 08:11:27",11,NULL,"<p>Inheritance creates a strong relationship between a subclass and super class; subclass must be aware of super class'es implementation details. Creating the super class is much harder, when you have to think about how it can be extended. You have to document class invariants carefully, and state what other methods overridable methods use internally. </p>&#xA;&#xA;<p>Inheritance is sometimes useful, if the hierarchy really represents a is-a-relationship. It relates to Open-Closed Principle, which states that classes should be closed for modification but open to extension. That way you can have polymorphism; to have a generic method that deals with super type and its methods, but via dynamic dispatch the method of subclass is invoked. This is flexible, and helps to create indirection, which is essential in software (to know less about implementation details).</p>&#xA;&#xA;<p>Inheritance is easily overused, though, and creates additional complexity, with hard dependencies between classes. Also understanding what happens during execution of a program gets pretty hard due to layers and dynamic selection of method calls.</p>&#xA;&#xA;<p>I would suggest using composing as the default. It is more modular, and gives the benefit of late binding (you can change the component dynamically). Also it's easier to test the things separately. And if you need to use a method from a class, you are not forced to be of certain form (Liskov Substitution Principle).</p>&#xA;"
891908,2,49002,"2009-05-21 08:34:49",34,NULL,"<p>With all the undeniable benefits provided by inheritance, here's some of its disadvantages.</p>&#xA;&#xA;<p><strong>Disadvantages of Inheritance:</strong></p>&#xA;&#xA;<ol>&#xA;<li>You can't change the implementation inherited from super classes at runtime (obviously because inheritance is defined at compile time).</li>&#xA;<li>Inheritance exposes a subclass to details of its parent's class implementation, that's why it's often said that inheritance breaks encapsulation (in a sense that you really need to focus on interfaces only not implementation, so reusing by sub classing is not always preferred).</li>&#xA;<li>The tight coupling provided by inheritance makes the implementation of a subclass very bound up with the implementation of a super class that any change in the parent implementation will force the sub class to change.</li>&#xA;<li>Excessive reusing by sub-classing can make the inheritance stack very deep and very confusing too.</li>&#xA;</ol>&#xA;&#xA;<p>On the other hand <b>Object composition</b> is defined at runtime through objects acquiring references to other objects. In such a case these objects will never be able to reach each-other's protected data (no encapsulation break) and will be forced to respect each other's interface. And in this case also, implementation dependencies will be a lot less than in case of inheritance.</p>&#xA;"
2124476,2,49002,"2010-01-23 19:55:33",35,NULL,"<p>Inheritance is pretty enticing especially coming from procedural-land and it often looks deceptively elegant. I mean all I need to do is add this one bit of functionality to some other class, right? Well, one of the problems is that <h2>inheritance is probably the worst form of coupling you can have</h2></p>&#xA;&#xA;<p>Your base class breaks encapsulation by exposing implementation details to subclasses in the form of protected members. This makes your system rigid and fragile. The more tragic flaw however is the new subclass brings with it all the baggage and opinion of the inheritance chain.</p>&#xA;&#xA;<p>The article, <a href=&quot;http://www.agileatwork.com/inheritance-is-evil-the-story-of-the-epic-fail-of-dataannotationsmodelbinder/&quot;>Inheritance is Evil: The Epic Fail of the DataAnnotationsModelBinder</a>, walks through an example of this in C#. It shows the use of inheritance when composition should have been used and how it could be refactored.</p>&#xA;"
3863382,2,49002,"2010-10-05 11:57:51",12,NULL,"<p>You need to have a look at <strong><a href=&quot;http://web.archive.org/web/20110722014513/http://www.objectmentor.com/resources/articles/lsp.pdf&quot;>The Liskov Substitution Principle</a></strong> in Uncle Bob's <a href=&quot;http://butunclebob.com/ArticleS.UncleBob.PrinciplesOfOod&quot;>SOLID</a> principles of class design. :) </p>&#xA;"
4303034,2,49002,"2010-11-29 10:54:20",8,NULL,"<p>Suppose an aircraft has only two parts: an engine and wings.<br>&#xA;Then there are two ways to design an aircraft class.  </p>&#xA;&#xA;<pre><code>Class Aircraft extends Engine{&#xA;  var wings;&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>Now your aircraft can start with having fixed wings<br>&#xA;and change them to rotary wings on the fly. It's essentially<br>&#xA;an engine with wings. But what if I wanted to change<br>&#xA;the engine on the fly as well?  </p>&#xA;&#xA;<p>Either the base class <code>Engine</code> exposes a mutator to change its<br>&#xA;properties, or I redesign <code>Aircraft</code> as:   </p>&#xA;&#xA;<pre><code>Class Aircraft {&#xA;  var wings;&#xA;  var engine;&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>Now, I can replace my engine on the fly as well.</p>&#xA;"
8353160,2,49002,"2011-12-02 07:40:20",4,NULL,"<p>Subtyping is appropriate and more powerful where the <a href=&quot;http://stackoverflow.com/a/8352969&quot;>invariants can be enumerated</a>, else use function composition for extensibility.</p>&#xA;"
8413988,2,49002,"2011-12-07 10:40:48",4,NULL,"<p>I agree with @Pavel, when he says, there are places for composition and there are places for inheritance.</p>&#xA;&#xA;<p>I think inheritance should be used if your answer is an affirmative to any of these questions.</p>&#xA;&#xA;<ul>&#xA;<li>Is your class part of a structure that benefits from polymorphism ? For example, if you had a Shape class, which declares a method called draw(), then we clearly need Circle and Square classes to be subclasses of Shape, so that their client classes would depend on Shape and not on specific subclasses.</li>&#xA;<li>Does your class need to re-use any high level interactions defined in another class ? The <a href=&quot;http://en.wikipedia.org/wiki/Template_method_pattern&quot; rel=&quot;nofollow&quot;>template method</a> design pattern would be impossible to implement without inheritance. I believe all extensible frameworks use this pattern.</li>&#xA;</ul>&#xA;&#xA;<p>However, if your intention is purely that of code re-use, then composition most likely is a better design choice.</p>&#xA;"
10678768,2,49002,"2012-05-21 01:59:42",13,NULL,"<p>My general rule of thumb: <em>Before using inheritance, consider if composition makes more sense.</em></p>&#xA;&#xA;<p>Reason: <em>Subclassing usually means more complexity and connectedness, i.e. harder to change, maintain, and scale without making mistakes.</em></p>&#xA;&#xA;<p>A much more complete and concrete <a href=&quot;http://www.javalobby.org/forums/thread.jspa?forumID=61&amp;threadID=16487#91822172&quot;>answer from Tim Boudreau</a> of Sun:</p>&#xA;&#xA;<blockquote>&#xA;  <p>Common problems to the use of inheritance as I see it are:</p>&#xA;  &#xA;  <ul>&#xA;  <li><em>Innocent acts can have unexpected results</em> - The classic example of this is calls to overridable methods from the superclass&#xA;  constructor, before the subclasses instance fields have been&#xA;  initialized. In a perfect world, nobody would ever do that. This is&#xA;  not a perfect world.</li>&#xA;  <li><em>It offers perverse temptations for subclassers to make assumptions about order of method calls and such</em> - such assumptions tend not to&#xA;  be stable if the superclass may evolve over time. See also <a href=&quot;http://www.javalobby.org/forums/thread.jspa?threadID=16036&amp;messageID=91819530#91819530&quot;>my toaster&#xA;  and coffee pot analogy</a>.</li>&#xA;  <li><em>Classes get heavier</em> - you don't necessarily know what work your superclass is doing in its constructor, or how much memory it's going&#xA;  to use. So constructing some innocent would-be lightweight object can&#xA;  be far more expensive than you think, and this may change over time if&#xA;  the superclass evolves</li>&#xA;  <li><em>It encourages an explosion of subclasses</em>. Classloading costs time, more classes costs memory. This may be a non-issue until you're&#xA;  dealing with an app on the scale of NetBeans, but there, we had real&#xA;  issues with, for example, menus being slow because the first display&#xA;  of a menu triggered massive class loading. We fixed this by moving to&#xA;  more declarative syntax and other techniques, but that cost time to&#xA;  fix as well.</li>&#xA;  <li><em>It makes it harder to change things later</em> - if you've made a class public, swapping the superclass is going to break subclasses -&#xA;  it's a choice which, once you've made the code public, you're married&#xA;  to. So if you're not altering the real functionality to your&#xA;  superclass, you get much more freedom to change things later if you&#xA;  use, rather than extend the thing you need. Take, for example,&#xA;  subclassing JPanel - this is usually wrong; and if the subclass is&#xA;  public somewhere, you never get a chance to revisit that decision. If&#xA;  it's accessed as JComponent getThePanel() , you can still do it (hint:&#xA;  expose models for the components within as your API).</li>&#xA;  <li><em>Object hierarchies don't scale (or making them scale later is much harder than planning ahead)</em> - this is the classic &quot;too many layers&quot;&#xA;  problem. I'll go into this below, and how the AskTheOracle pattern can&#xA;  solve it (though it may offend OOP purists). </li>&#xA;  </ul>&#xA;  &#xA;  <p>...</p>&#xA;  &#xA;  <p>My take on what to do, if you do allow for inheritance, which you may&#xA;  take with a grain of salt is:</p>&#xA;  &#xA;  <ul>&#xA;  <li>Expose no fields, ever, except constants</li>&#xA;  <li>Methods shall be either abstract or final</li>&#xA;  <li>Call no methods from the superclass constructor</li>&#xA;  </ul>&#xA;  &#xA;  <p>...</p>&#xA;  &#xA;  <p>all of this applies less to small projects than large ones, and less&#xA;  to private classes than public ones</p>&#xA;</blockquote>&#xA;"
11758048,2,49002,"2012-08-01 11:15:27",2,NULL,"<p>As many people told, I will first start with the check - whether there exists an &quot;is-a&quot; relationship. If it exists I usually check the following:</p>&#xA;&#xA;<blockquote>&#xA;  <p>Whether the base class can be instantiated. That is, whether the base class can be non-abstract.  If it can be non-abstract I usually prefer composition</p>&#xA;</blockquote>&#xA;&#xA;<p>E.g 1. Accountant <strong>is an</strong> Employee. But I will <strong>not</strong> use inheritance because a Employee object can be instantiated.</p>&#xA;&#xA;<p>E.g 2. Book <strong>is a</strong> SellingItem. A SellingItem cannot be instantiated - it is abstract concept. Hence I will use inheritacne. The SellingItem is an <strong>abstract base class (or interface</strong> in C#)</p>&#xA;&#xA;<p>What do you think about this approach?</p>&#xA;&#xA;<p>Also, I support @anon answer in <a href=&quot;http://stackoverflow.com/questions/3351666/why-use-inheritance-at-all?lq=1&quot;>Why use inheritance at all?</a></p>&#xA;&#xA;<blockquote>&#xA;  <p>The main reason for using inheritance is not as a form of composition - it is so you can get polymorphic behaviour. If you don't need polymorphism, you probably should not be using inheritance.</p>&#xA;</blockquote>&#xA;&#xA;<p>@MatthieuM. says in <a href=&quot;http://programmers.stackexchange.com/questions/12439/code-smell-inheritance-abuse/12448#comment303759_12448&quot;>http://programmers.stackexchange.com/questions/12439/code-smell-inheritance-abuse/12448#comment303759_12448</a></p>&#xA;&#xA;<blockquote>&#xA;  <p>The issue with inheritance is that it can be used for two orthogonal purposes:</p>&#xA;  &#xA;  <p>interface (for polymorphism)</p>&#xA;  &#xA;  <p>implementation (for code reuse)</p>&#xA;</blockquote>&#xA;&#xA;<p><strong>REFERENCE</strong></p>&#xA;&#xA;<ol>&#xA;<li><a href=&quot;http://stackoverflow.com/questions/38820/which-class-design-is-better?lq=1&quot;>Which class design is better?</a></li>&#xA;<li><a href=&quot;http://stackoverflow.com/questions/269496/inheritance-vs-aggregation/269553#comment15610225_269553&quot;>Inheritance vs. Aggregation</a></li>&#xA;</ol>&#xA;"
13072300,2,49002,"2012-10-25 15:44:02",3,NULL,"<p>Like anything else in life, technically it might seem right, but in reality it is not usually the case. </p>&#xA;&#xA;<p>Just because some monolithic systems employ certain methods over others doesn't necessarily make them correct, especially when you have experts working on a system who have different priorities enforced by whatever external factors. </p>&#xA;&#xA;<p>Don't just assume these cases pertain only to us mere mortal developers.</p>&#xA;"
14633709,2,49002,"2013-01-31 19:34:06",10,NULL,"<p>Personally I learned to always prefer composition over inheritance. There is no programmatic problem you can solve with inheritance which you cannot solve with composition; though you may have to use Interfaces(Java) or Protocols(Obj-C) in some cases. Since C++ doesn't know any such thing, you'll have to use abstract base classes, which means you cannot get entirely rid of inheritance in C++.</p>&#xA;&#xA;<p>Composition is often more logical, it provides better abstraction, better encapsulation, better code reuse (especially in very large projects) and is less likely to break anything at a distance just because you made an isolated change anywhere in your code. It also makes it easier to uphold the &quot;<em>Single Responsibility Principle</em>&quot;, which is often summarized as &quot;<em>There should never be more than one reason for a class to change.</em>&quot;, and it means that every class exists for a specific purpose and it should only have methods that are directly related to its purpose. Also having a very shallow inheritance tree makes it much easier to keep the overview even when your project starts to get really large. Many people think that inheritance represents our <em>real world</em> pretty well, but that isn't the truth. The real world uses much more composition than inheritance. Pretty much every real world object you can hold in your hand has been composed out of other, smaller real world objects.</p>&#xA;&#xA;<p>There are downsides of composition, though. If you skip inheritance altogether and only focus on composition, you will notice that you often have to write a couple of extra code lines that weren't necessary if you had used inheritance. You are also sometimes forced to repeat yourself and this violates the <em>DRY Principle</em> (DRY = Don't Repeat Yourself). Also composition often requires delegation, and a method is just calling another method of another object with no other code surrounding this call. Such &quot;double method calls&quot; (which may easily extend to triple or quadruple method calls and even farther than that) have much worse performance than inheritance, where you simply inherit a method of your parent. Calling an inherited method may be equally fast as calling a non-inherited one, or it may be slightly slower, but is usually still faster than two consecutive method calls.</p>&#xA;&#xA;<p>You may have noticed that most OO languages don't allow multiple inheritance. While there are a couple of cases where multiple inheritance can really buy you something, but those are rather exceptions than the rule. Whenever you run into a situation where you think &quot;multiple inheritance would be a really cool feature to solve this problem&quot;, you are usually at a point where you should re-think inheritance altogether, since even it may require a couple of extra code lines, a solution based on composition will usually turn out to be much more elegant, flexible and future proof.</p>&#xA;&#xA;<p>Inheritance is really a cool feature, but I'm afraid it has been overused the last couple of years. People treated inheritance as the one hammer that can nail it all, regardless if it was actually a nail, a screw, or maybe a something completely different.</p>&#xA;"
16046223,2,49002,"2013-04-16 20:15:09",5,NULL,"<p>These two ways can live together just fine and actually support each other.</p>&#xA;&#xA;<p>Composition is just playing it modular: you create interface similar to the parent class, create new object and delegate calls to it. If these objects need not to know of each other, it's quite safe and easy to use composition. There are so many possibilites here.</p>&#xA;&#xA;<p>However, if the parent class for some reason needs to access functions provided by the &quot;child class&quot; for inexperienced programmer it may look like it's a great place to use  inheritance. The parent class can just call it's own abstract &quot;foo()&quot; which is overwritten by the subclass and then it can give the value to the abstract base.</p>&#xA;&#xA;<p>It looks like a nice idea, but in many cases it's better just give the class an object which implements the foo() (or even set the value provided the foo() manually) than to inherit the new class from some base class which requires the function foo() to be specified.</p>&#xA;&#xA;<p>Why?</p>&#xA;&#xA;<p><strong>Because inheritance is a poor way of moving information</strong>.</p>&#xA;&#xA;<p>The composition has a real edge here: the relationship can be reversed: the &quot;parent class&quot; or &quot;abstract worker&quot; can aggregate any specific &quot;child&quot; objects implementing certain interface + <strong>any child can be set inside any other type of parent, which accepts it's type</strong>. And there can be any number of objects, for example MergeSort or QuickSort could sort any list of objects implementing an abstract Compare -interface. Or to put it another way: any group of objects which implement &quot;foo()&quot; and other group of objects which can make use of objects having &quot;foo()&quot; can play together. </p>&#xA;&#xA;<p>I can think of three real reasons for using inheritance:</p>&#xA;&#xA;<ol>&#xA;<li>You have many classes with <strong>same interface</strong> and you want to save time writing them</li>&#xA;<li>You have to use same Base Class for each object</li>&#xA;<li>You need to modify the private variables, which can not be public in any case</li>&#xA;</ol>&#xA;&#xA;<p>If these are true, then it is probably necessary to use inheritance.</p>&#xA;&#xA;<p>There is nothing bad in using reason 1, it is very good thing to have a solid interface on your objects. This can be done using composition or with inheritance, no problem - if this interface is simple and does not change. Usually inheritance is quite effective here.</p>&#xA;&#xA;<p>If the reason is number 2 it gets a bit tricky. Do you really only need to use the same base class? In general, just using the same base class is not good enough, but it may be a requirement of your framework, a design consideration which can not be avoided.</p>&#xA;&#xA;<p>However, if you want to use the private variables, the case 3, then you may be in trouble. <strong>If you consider global variables unsafe, then you should consider using inheritance to get access to private variables also unsafe</strong>. Mind you, global variables are not all THAT bad - databases are essentially big set of global variables. But if you can handle it, then it's quite fine.</p>&#xA;"
18548784,2,49002,"2013-08-31 13:41:05",3,NULL,"<p>Inheritance is a very powerfull machanism for code reuse. But needs to be used properly. I would say that inheritance is used correctly if the subclass is also a subtype of the parent class. As mentioned above, the Liskov Substitution Principle is the key point here. </p>&#xA;&#xA;<p>Subclass is not the same as subtype. You might create subclasses that are not subtypes (and this is when you should use composition). To understand what a subtype is, lets start giving an explanation of what a type is.</p>&#xA;&#xA;<p>When we say that the number 5 is of type integer, we are stating that 5 belongs to a set of possible values (as an example, see the possible values for the Java primitive types). We are also stating that there is a valid set of methods I can perform on the value like addition and subtraction. And finally we are stating that there are a set of properties that are always satisfied, for example, if I add the values 3 and 5, I will get 8 as a result.</p>&#xA;&#xA;<p>To give another example, think about the abstract data types, Set of integers and List of integers, the values they can hold are restricted to integers. They both support a set of methods, like add(newValue) and size(). And they both have different properties (class invariant), Sets does not allow duplicates while List does allow duplicates (of course there are other properties that they both satisfy).</p>&#xA;&#xA;<p>Subtype is also a type, which has a relation to another type, called parent type (or supertype). The subtype must satisfy the features (values, methods and properties) of the parent type. The relation means that in any context where the supertype is expected, it can be substitutable by a subtype, without affecting the behaviour of the execution. Let’s go to see some code to exemplify what I’m saying. Suppose I write a List of integers (in some sort of pseudo language):</p>&#xA;&#xA;<pre><code>class List {&#xA;  data = new Array();&#xA;&#xA;  Integer size() {&#xA;    return data.length;&#xA;  }&#xA;&#xA;  add(Integer anInteger) {&#xA;    data[data.length] = anInteger;&#xA;  }&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>Then, I write the Set of integers as a subclass of the List of integers:</p>&#xA;&#xA;<pre><code>class Set, inheriting from: List {&#xA;  add(Integer anInteger) {&#xA;     if (data.notContains(anInteger)) {&#xA;       super.add(anInteger);&#xA;     }&#xA;  }&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>Our Set of integers class is a subclass of List of Integers, but is not a subtype, due to it is not satisfying all the features of the List class. The values, and the signature of the methods are satisfied but the properties are not. The behaviour of the add(Integer) method has been clearly changed, not preserving the properties of the parent type. Think from the point of view of the client of your classes. They might receive a Set of integers where a List of integers is expected. The client might want to add a value and get that value added to the List even if that value already exist in the List. But her wont get that behaviour if the value exists. A big suprise for her!</p>&#xA;&#xA;<p>This is a classic example of an improper use of inheritance. Use composition in this case.</p>&#xA;&#xA;<p>(a fragment from: <a href=&quot;http://www.copypasteisforword.com/notes/use-inheritance-properly&quot; rel=&quot;nofollow&quot;>use inheritance properly</a>).</p>&#xA;"
20832301,2,49002,"2013-12-30 01:57:35",3,NULL,"<p>The answer is quite simple</p>&#xA;&#xA;<p>When you have an is-a relation between two classes (example dog is a canine) you go for inheritance.</p>&#xA;&#xA;<p>On the other hand when you have has-a or some adjective relationship between two classes (student has courses) or (teacher studies courses) you chose composition.</p>&#xA;"
20921914,2,49002,"2014-01-04 13:57:55",-5,NULL,"<p>This rule is a complete nonsense. Why? </p>&#xA;&#xA;<p>The reason is that in every case it is possible to tell whether to use composition or inheritance. &#xA;This is determined by the answer to a question: &quot;IS something A something else&quot; or &quot;HAS &#xA;something A something else&quot;. </p>&#xA;&#xA;<p>You cannot &quot;prefer&quot; to make something to be something else or to have something else. Strict logical rules apply. </p>&#xA;&#xA;<p>Also there are no &quot;contrived examples&quot; because in every situation an answer to this question can be given. </p>&#xA;&#xA;<p>If you cannot answer this question there is something else wrong. &#xA;This includes&#xA;overlapping responsibilities of classess which are usually the result of <a href=&quot;http://devmatrix.wordpress.com/wp-admin/post.php?post=115&amp;action=edit&amp;message=6&amp;postpost=v2&quot; rel=&quot;nofollow&quot;>wrong use of interfaces</a>, less often by rewriting same code in different classess. </p>&#xA;&#xA;<p>To avoid this situations I also recommend to use good names for classes , that fully resemble their responsibilities. </p>&#xA;"
22475358,2,49002,"2014-03-18 09:39:25",2,NULL,"<p>Composition v/s Inheritance is a wide subject. There is no real answer for what is better as I think it all depends on the design of the system.</p>&#xA;&#xA;<p>Generally type of relationship between object provide better information to choose one of them.</p>&#xA;&#xA;<p>If relation type is  &quot;IS-A&quot; relation then Inheritance is better approach.&#xA;otherwise relation type is  &quot;HAS-A&quot; relation then composition will better approach.</p>&#xA;&#xA;<p>Its totally depend on entity relationship.</p>&#xA;"
24036352,2,49002,"2014-06-04 11:36:14",3,NULL,"<p>A simple, brief answer would be that inheritance should be used when you need an object of your class to have the same <em>interface</em> as its parent class, so that it can thereby be treated as an object of the parent class (upcasting). Moreover, function calls on a derived class object would remain the same everywhere in code, but the specific method to call would be determined at runtime (i.e. the low-level <em>implementation</em> differs, the high-level <em>interface</em> remains the same).</p>&#xA;&#xA;<p>Composition should be used when you do not need the new class to have the same interface, i.e. you wish to conceal certain aspects of the class' implementation which the user of that class need not know about. So composition is more in the way of supporting <em>encapsulation</em> (i.e. concealing the implementation) while inheritance is meant to support <em>abstraction</em> (i.e. providing a simplified representation of something, in this case the <strong>same</strong> interface for a range of types with different internals).</p>&#xA;"
